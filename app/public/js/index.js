/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/YWRlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectSpread2.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _objectSpread2)\n/* harmony export */ });\n/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defineProperty.js */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcz81NTMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEOztBQUVqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFZTtBQUNmLGlCQUFpQixzQkFBc0I7QUFDdkM7O0FBRUE7QUFDQTtBQUNBLFFBQVEsMkRBQWM7QUFDdEIsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\n");

/***/ }),

/***/ "./resources/js/alertsManagement.js":
/*!******************************************!*\
  !*** ./resources/js/alertsManagement.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux */ \"./node_modules/redux/es/redux.js\");\n/* harmony import */ var _alertsState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alertsState.js */ \"./resources/js/alertsState.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n\n\n // <div class=\"live\">\n//   <a href=\"#\" class=\"intro-banner-vdo-play-btn pinkBg\" target=\"_blank\">\t<i class=\"glyphicon glyphicon-play whiteText\" aria-hidden=\"true\"></i>\n//     <span class=\"ripple pinkBg\"></span>\n//     <span class=\"ripple pinkBg\"></span>\n//     <span class=\"ripple pinkBg\"></span>\n//   </a>\n// </div>\n\nvar regex = new RegExp('^\\-?[0-9]+\\.?\\[0-9]*$');\n$(function () {\n  var alertsStore = (0,redux__WEBPACK_IMPORTED_MODULE_2__.createStore)(_alertsState_js__WEBPACK_IMPORTED_MODULE_0__.default);\n  var storedAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n  _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsList.forEach(function (coin) {\n    var optitem = $('<option>', {\n      value: coin,\n      text: _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin]['name']\n    });\n    $('#alertCoins').append(optitem);\n  });\n  $('#home').empty();\n\n  if (storedAlerts.length > 0) {\n    storedAlerts.forEach(function (alert) {\n      var card = $('<div>', {\n        id: alert.alertID,\n        \"class\": 'noti_card alert alert-dismissible fade show'\n      });\n      var desc = $('<h6>', {\n        html: alert.alertDescription\n      });\n      var closebutton = $('<button>', {\n        type: 'button',\n        \"class\": 'close',\n        'aria-label': 'Close'\n      });\n      closebutton.html('<span aria-hidden=\"true\">&times;</span>');\n      card.append(desc);\n      card.append(closebutton);\n      var clist = $('<ul>');\n      alert.alertCoins.forEach(function (coin) {\n        var cdisplay;\n\n        if (coin == '0') {\n          cdisplay = $('<p>', {\n            html: 'All coins'\n          });\n        } else {\n          var imgsrc = _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin] ? _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin]['img'] : _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList.default.img;\n          var imgdiv = $('<img>', {\n            src: imgsrc\n          });\n          cdisplay = $('<li>');\n          cdisplay.append(imgdiv);\n        }\n\n        clist.append(cdisplay);\n      });\n      card.append(clist);\n      var thr = $('<p>', {\n        html: '<span>' + alert.lowerThr + ' %</span> | <span>' + alert.upperThr + ' %</span>'\n      });\n      card.append(thr);\n      $('#home').append(card);\n    });\n    $('.noti_card button').click(function (e) {\n      var elem = e.currentTarget;\n      var alertDiv = $(elem).parent();\n      var alertID = alertDiv.attr('id');\n      var ll = JSON.parse(localStorage.getItem('alerts'));\n      var newList = ll.filter(function (val) {\n        return val.alertID !== alertID;\n      });\n      localStorage.setItem('alerts', JSON.stringify(newList));\n      alertsStore.dispatch({\n        type: 'REMOVE_ALERT'\n      });\n    });\n  } else {\n    // console.log('no stored alerts found');\n    var noalert = $('<p>');\n    noalert.html('<span>No alerts found! Create by clicking on </span><img src=\"front/arbitrageimg/plus.svg\" alt=\"\">');\n    $('#home').append(noalert);\n  }\n\n  alertsStore.subscribe(function () {\n    var alerts = alertsStore.getState(); // console.log(alerts);\n\n    if (alerts.length === 0) $('#home').empty();\n\n    if (alerts.length > 0) {\n      $('#home').empty();\n      alerts.forEach(function (alert) {\n        var card = $('<div>', {\n          id: alert.alertID,\n          \"class\": 'noti_card alert alert-dismissible fade show'\n        });\n        var desc = $('<h6>', {\n          html: alert.alertDescription\n        });\n        var closebutton = $('<button>', {\n          type: 'button',\n          \"class\": 'close',\n          'aria-label': 'Close'\n        });\n        closebutton.html('<span aria-hidden=\"true\">&times;</span>');\n        card.append(desc);\n        card.append(closebutton);\n        var clist = $('<ul>');\n        alert.alertCoins.forEach(function (coin) {\n          var cdisplay;\n\n          if (coin == '0') {\n            cdisplay = $('<p>', {\n              html: 'All coins'\n            });\n          } else {\n            var imgsrc = _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin] ? _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin]['img'] : _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList.default.img;\n            var imgdiv = $('<img>', {\n              src: imgsrc\n            });\n            cdisplay = $('<li>');\n            cdisplay.append(imgdiv);\n          }\n\n          clist.append(cdisplay);\n        });\n        card.append(clist);\n        var thr = $('<p>', {\n          html: '<span>' + alert.lowerThr + ' %</span> | <span>' + alert.upperThr + ' %</span>'\n        });\n        card.append(thr);\n        $('#home').append(card);\n      });\n      $('.alertbox').show();\n      $(\".tab-content\").show();\n      $('#myTabContent').show();\n      $('.noti_card button').click(function (e) {\n        var elem = e.currentTarget;\n        var alertDiv = $(elem).parent();\n        var alertID = alertDiv.attr('id');\n        var ll = JSON.parse(localStorage.getItem('alerts'));\n        var newList = ll.filter(function (val) {\n          return val.alertID !== alertID;\n        });\n        localStorage.setItem('alerts', JSON.stringify(newList));\n        alertsStore.dispatch({\n          type: 'REMOVE_ALERT'\n        });\n      });\n    }\n  });\n  $('#box-1').click(function (e) {\n    var elem = e.currentTarget;\n\n    if ($(elem).val() === \"1\") {\n      $(elem).val(\"0\");\n    } else {\n      $(elem).val(\"1\");\n    }\n  });\n  $('#alertCoins').on('change', function () {\n    var val = $('#alertCoins').val(); // console.log(val);\n\n    if (val && val.includes('0')) {\n      $('#alertCoins').val(['0']);\n      $('#alertCoins').parent().dropdown('toggle');\n    }\n\n    ;\n  });\n  $('#show_div').click(function () {\n    var alertDescription = $('#alertDescription').val();\n\n    if (alertDescription.length < 1) {\n      console.log({\n        'error': 'Description is mandatory'\n      });\n      return;\n    }\n\n    var alertCoins = $('#alertCoins').val();\n\n    if (alertCoins === null) {\n      console.log({\n        'error': 'Select atleast one coin'\n      });\n      return;\n    }\n\n    if (alertCoins.length < 1) {\n      console.log({\n        'error': 'Select atleast one coin'\n      });\n      return;\n    }\n\n    var lowerThrval = $('#txtChar1').val();\n    var upperThrval = $('#txtChar2').val();\n\n    if (!regex.test(lowerThrval)) {\n      console.log({\n        'error': 'enter a positive or negative number'\n      });\n      return;\n    }\n\n    if (!regex.test(upperThrval)) {\n      console.log({\n        'error': 'enter a positive or negative number'\n      });\n      return;\n    }\n\n    var lowerThr = parseFloat(lowerThrval.match(regex)[0]);\n    var upperThr = parseFloat(upperThrval.match(regex)[0]);\n\n    if (lowerThr > upperThr) {\n      console.log({\n        'error': 'lower threshold should be less than upper threshold'\n      });\n      return;\n    }\n\n    var alertSound = $('#box-1').val() === \"1\" ? true : false;\n    var alertsList;\n    var alertID = '_' + Math.random().toString(36).substr(2, 9);\n\n    if (localStorage.getItem('alerts') === null) {\n      alertsList = [{\n        alertID: alertID,\n        alertDescription: alertDescription,\n        alertCoins: alertCoins,\n        lowerThr: lowerThr,\n        upperThr: upperThr,\n        alertSound: alertSound\n      }];\n    } else {\n      alertsList = JSON.parse(localStorage.getItem('alerts'));\n      alertsList.push({\n        alertID: alertID,\n        alertDescription: alertDescription,\n        alertCoins: alertCoins,\n        lowerThr: lowerThr,\n        upperThr: upperThr,\n        alertSound: alertSound\n      });\n    }\n\n    localStorage.setItem('alerts', JSON.stringify(alertsList));\n    alertsStore.dispatch({\n      type: 'ADD_ALERT'\n    }); // $('#alertCoins').parent().dropdown('toggle');\n\n    $(\".alertbox\").hide();\n    $('.alert_create').hide();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/alertsManagement.js\n");

/***/ }),

/***/ "./resources/js/alertsState.js":
/*!*************************************!*\
  !*** ./resources/js/alertsState.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar initialState = JSON.parse(localStorage.getItem('alerts'));\n\nvar alertsState = function alertsState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_ALERT':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    case 'REMOVE_ALERT':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (alertsState);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYWxlcnRzU3RhdGUuanM/OTc2YyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiYWxlcnRzU3RhdGUiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNQSxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFyQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUFrQztBQUFBLE1BQWpDQyxLQUFpQyx1RUFBekJOLFlBQXlCO0FBQUEsTUFBWE8sTUFBVzs7QUFDcEQsVUFBT0EsTUFBTSxDQUFDQyxJQUFkO0FBQ0UsU0FBSyxXQUFMO0FBQ0E7QUFDRUYsYUFBSyxHQUFHTCxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLENBQVgsQ0FBUjtBQUNBLGVBQU9FLEtBQVA7QUFDRDs7QUFFRCxTQUFLLGNBQUw7QUFDQTtBQUNFQSxhQUFLLEdBQUdMLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFSO0FBQ0EsZUFBT0UsS0FBUDtBQUNEOztBQUVEO0FBQ0UsYUFBT0EsS0FBUDtBQWRKO0FBZ0JELENBakJEOztBQWtCQSxpRUFBZUQsV0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9hbGVydHNTdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaXRpYWxTdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcbmNvbnN0IGFsZXJ0c1N0YXRlID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQUREX0FMRVJUJzpcbiAgICB7XG4gICAgICBzdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlICdSRU1PVkVfQUxFUlQnOlxuICAgIHtcbiAgICAgIHN0YXRlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWxlcnRzJykpO1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBhbGVydHNTdGF0ZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/alertsState.js\n");

/***/ }),

/***/ "./resources/js/displayCurr.js":
/*!*************************************!*\
  !*** ./resources/js/displayCurr.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux */ \"./node_modules/redux/es/redux.js\");\n/* harmony import */ var _alertsState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alertsState.js */ \"./resources/js/alertsState.js\");\n/* harmony import */ var _favListState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./favListState.js */ \"./resources/js/favListState.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n$(function () {\n  var alertsStore = (0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)(_alertsState_js__WEBPACK_IMPORTED_MODULE_1__.default);\n  var favListStore = (0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)(_favListState_js__WEBPACK_IMPORTED_MODULE_2__.default);\n  localStorage.setItem('favState', false);\n  var base_exchange_button = $('#modalBaseExchange');\n  var base_currency_button;\n  var localbasecurrency = localStorage.getItem('localbasecurrency');\n\n  if (localbasecurrency === null) {\n    localStorage.setItem('localbasecurrency', 'unitedstatesdollar');\n    localbasecurrency = 'unitedstatesdollar';\n  }\n\n  if ($('#dropdownBaseCurrency').length > 0) {\n    base_currency_button = $('#dropdownBaseCurrency');\n    base_currency_button.empty();\n    base_currency_button.val(localbasecurrency);\n    var buttoncontent = $('<img>', {\n      src: _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[localbasecurrency]['img']\n    });\n    base_currency_button.append(buttoncontent); // base_currency_button.append('<span>' + currencyDetails[localbasecurrency]['name'] + '</span>');\n\n    base_currency_button.append(' ' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[localbasecurrency]['sname']);\n  }\n\n  $('#tablesearchinput').prop('disabled', false); // const maxrows = $('.features select').val();\n\n  var baseexchangename = base_exchange_button.val().toLowerCase();\n  var basecurrencyname = base_currency_button ? base_currency_button.val().toLowerCase() : localbasecurrency;\n  var currentForexData; // console.log($('.features select'));\n\n  $('.features select').on('change', function () {\n    var maxrow = $('.features select').val();\n    console.log(maxrow);\n\n    if (maxrow === 'all') {\n      $('#tablesearchinput').prop('disabled', false);\n      _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').show();\n      });\n    }\n\n    if (maxrow !== 'all') {\n      $('#tablesearchinput').prop('disabled', true);\n      var maxrownum = parseInt(maxrow);\n      var hideList = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.slice(maxrownum);\n      hideList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').hide();\n      });\n      var showList = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.slice(0, maxrownum);\n      showList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').show();\n      });\n    }\n  }); //Generating exchange filter modal\n\n  _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n    var eximgpath = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['img'];\n    var eximage = $('<img>', {\n      src: eximgpath,\n      height: '20px',\n      width: 'auto',\n      alt: exchange.toLowerCase(),\n      \"class\": 'pr-1'\n    });\n    var inputCh = $('<input type=\"checkbox\" value=\"' + exchange + '\" name=\"exchangecheckbox\" autocomplete=\"off\">');\n    var inputicon = $('<i class=\"cr-icon fa fa-check\"></i>');\n    $('#ex-data-img').append('<div class=\"col ex-select\"> <label class=\"btn bg-white rounded btn-light btn-block text-left\">' + inputCh[0].outerHTML + '<span class=\"cr\">' + inputicon[0].outerHTML + '</span>' + eximage[0].outerHTML + exchange + '</label></div>');\n  }); //Generating coin filter modal\n\n  _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n    var Coinimgpath = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsAlertsList[coin]['img'];\n    var Coinimage = $('<img>', {\n      src: Coinimgpath,\n      height: '20px',\n      width: 'auto',\n      alt: coin.toLowerCase(),\n      \"class\": 'mr-1'\n    });\n    var inputCh = $('<input type=\"checkbox\" value=\"' + coin + '\" name=\"coincheckbox\" autocomplete=\"off\">');\n    var inputicon = $('<i class=\"cr-icon fa fa-check\"></i>');\n    $('#coin-data-img').append('<div class=\"col ex-select\"> <label class=\"btn bg-white rounded btn-light btn-block text-left\">' + inputCh[0].outerHTML + '<span class=\"cr\">' + inputicon[0].outerHTML + '</span>' + Coinimage[0].outerHTML + coin + '</label></div>');\n  }); //show or hide exchange columns\n\n  $(document).ready(function () {\n    //Exchange Filter\n    $('input[type=checkbox][name=exchangecheckbox]').change(function () {\n      var checkboxes = document.querySelectorAll(\"input[name=\\\"exchangecheckbox\\\"]:checked\");\n      var values = [];\n      checkboxes.forEach(function (checkbox) {\n        values.push(checkbox.value);\n      });\n      console.log(values);\n\n      if (values.length >= 3) {\n        _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n          if (values.includes(exchange)) {\n            $(\".\" + exchange).show();\n          } else {\n            $(\".\" + exchange).hide();\n          }\n        });\n      } else {\n        _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n          $(\".\" + exchange).show();\n        });\n      }\n    }); //Coin Filter\n\n    $('input[type=checkbox][name=coincheckbox]').change(function () {\n      var checkboxes = document.querySelectorAll(\"input[name=\\\"coincheckbox\\\"]:checked\");\n      var values = [];\n      checkboxes.forEach(function (checkbox) {\n        values.push(checkbox.value);\n      });\n\n      if (values.length != 0) {\n        _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n          if (values.includes(coin)) {\n            $('#' + coin.toLowerCase() + '_row').show();\n          } else {\n            $('#' + coin.toLowerCase() + '_row').hide();\n          }\n        });\n      } else {\n        _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n          $('#' + coin.toLowerCase() + '_row').show();\n        });\n      }\n    });\n  });\n  var tableBody = $('#currencytable_body');\n  var tableHeader = $('#currency_header_row');\n  _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n    var headercol = $('<th>', {\n      scope: 'col',\n      id: exchange + '_col',\n      \"class\": exchange\n    });\n    var eximgpath = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['img'];\n    var headimg = $('<img>', {\n      src: eximgpath,\n      alt: exchange.toLowerCase()\n    });\n    headercol.append(headimg);\n    headercol.append(' ' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['name']);\n    tableHeader.append(headercol);\n\n    if (exchange.toLowerCase() === baseexchangename) {\n      headercol.addClass('highlight-top');\n    }\n\n    var ddlink = $('<a>', {\n      \"class\": 'dropdown-item'\n    });\n    var ddimage = $('<img>', {\n      src: eximgpath,\n      alt: exchange.toLowerCase(),\n      height: '20px',\n      width: 'auto'\n    });\n    ddlink.append(ddimage);\n    ddlink.append(' ' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['name']);\n    var ddcont = $('<div>', {\n      \"class\": 'ex-select my-1'\n    });\n    ddcont.append(ddlink);\n    $('#ex-select-menu').append(ddcont);\n  });\n  _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin, idc) {\n    var coinrow = $('<tr>', {\n      id: coin.toLowerCase() + '_row'\n    }); // const firstcol = $('<td>', { class: 'fav', html: '<i class=\"fa fa-star-o\" aria-hidden=\"true\"></i>' });\n    // coinrow.append(firstcol);\n\n    var imgpath = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsAlertsList[coin]['img'];\n    var imgtext = ' <span class=\"d-none d-sm-none d-md-block\">' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsAlertsList[coin]['name'] + '</span> <span class=\"d-sm-block\">' + coin + '</span>';\n    var imgdiv = $('<img>', {\n      src: imgpath,\n      alt: coin\n    });\n    var headcol = $('<th>', {\n      \"class\": 'first'\n    });\n    headcol.append(imgdiv);\n    headcol.append(imgtext);\n    coinrow.append(headcol);\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n      var divname1 = exchange.toLowerCase() + '_' + coin.toLowerCase();\n      var divname2 = divname1 + '_p';\n      var span2 = $('<span>', {\n        id: divname2,\n        text: '--'\n      });\n      var span1 = $('<span>', {\n        id: divname1,\n        \"class\": 'text-green',\n        text: '--'\n      });\n      var coincol = $('<td>', {\n        \"class\": exchange\n      });\n      var lb = $('<br>');\n      coincol.append(span2);\n      coincol.append(lb);\n      coincol.append(span1);\n\n      if (exchange.toLowerCase() === baseexchangename) {\n        coincol.addClass('highlight');\n      }\n\n      coinrow.append(coincol);\n    });\n    tableBody.append(coinrow);\n  });\n  $('#main_data_table').addClass('table-striped');\n  var storedFavList = localStorage.getItem('favList') ? JSON.parse(localStorage.getItem('favList')) : [];\n  storedFavList.forEach(function (item) {\n    var favdiv = $('#' + item + ' td').first();\n    var stardiv = $(favdiv).children()[0];\n    $(stardiv).toggleClass('fa-star-o fa-star');\n  });\n  var storedAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n  alertsStore.subscribe(function () {\n    storedAlerts = alertsStore.getState();\n    storedAlerts.forEach(function (alert) {\n      var alertCoins = alert.alertCoins;\n      alertCoins.forEach(function (coin) {\n        var filtered = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.filter(function (exchange) {\n          var pr = currentPratio[coin][exchange];\n\n          if (pr === 0 || exchange === baseexchangename.toUpperCase()) {\n            return false;\n          } else {\n            if (alert.lowerThr < 0 && alert.upperThr > 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr > 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr < 0 && alert.upperThr < 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr < 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            return false;\n          }\n        });\n\n        if (filtered.length > 0) {\n          var shouldChange = $('#' + alert.alertID).hasClass('active');\n          var fillist = $('#' + alert.alertID).data('filtered');\n          var differentList;\n\n          if (fillist) {\n            differentList = fillist.length !== filtered.length;\n          } else {\n            differentList = true;\n          }\n\n          if (!shouldChange || differentList) {\n            $('#' + alert.alertID).addClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            var elist = $('<p>', {\n              \"class\": \"elist\",\n              html: 'For ' + filtered.join(', ')\n            });\n            $('#' + alert.alertID).data('filtered', filtered);\n            $('#' + alert.alertID).append(elist);\n          }\n        } else {\n          var _shouldChange = $('#' + alert.alertID).hasClass('active');\n\n          if (_shouldChange) {\n            $('#' + alert.alertID).removeClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            $('#' + alert.alertID).removeData();\n          }\n        }\n      });\n    });\n  });\n  var basevalues = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.reduce(function (accu, item) {\n    return Object.assign(accu, _defineProperty({}, item, 0));\n  }, {});\n  var currentPrice = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.reduce(function (accu1, coin) {\n    var obj1 = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.reduce(function (accu2, exchange) {\n      return Object.assign(accu2, _defineProperty({}, exchange, 0));\n    }, {});\n    return Object.assign(accu1, _defineProperty({}, coin, obj1));\n  }, {});\n  var currentPratio = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.reduce(function (accu1, coin) {\n    var obj1 = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.reduce(function (accu2, exchange) {\n      return Object.assign(accu2, _defineProperty({}, exchange, 0));\n    }, {});\n    return Object.assign(accu1, _defineProperty({}, coin, obj1));\n  }, {});\n\n  var dispCurrFormat = function dispCurrFormat(val) {\n    if (val < 10) {\n      return val.toFixed(2);\n    } else {\n      return val.toFixed(0);\n    }\n  };\n\n  $('#ex-select-menu a').click(function (e) {\n    e.preventDefault();\n    var elem = $(e.currentTarget);\n    $('#exchangeCenter').modal('hide');\n    var imgelem = elem.html();\n    var exchangeVAL = $(imgelem).attr('alt');\n    var oldexchangename = baseexchangename;\n\n    if (_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.includes(exchangeVAL.toUpperCase()) === false) {\n      return;\n    }\n\n    ;\n    base_exchange_button.html(elem.html());\n    base_exchange_button.val(exchangeVAL.toUpperCase());\n    baseexchangename = exchangeVAL.toUpperCase();\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      basevalues[coin] = currentPrice[coin][baseexchangename];\n    });\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      var baseprice = basevalues[coin];\n      _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n        var price = currentPrice[coin][exchange];\n        var divname = exchange.toLowerCase() + '_' + coin.toLowerCase();\n        var divnamep = divname + '_p';\n        var parentcell = $('#' + divnamep).parent();\n\n        if (oldexchangename.toLowerCase() === exchange.toLowerCase()) {\n          var _parentcell = $('#' + divnamep).parent();\n\n          _parentcell.removeClass('highlight');\n\n          $('#' + oldexchangename.toUpperCase() + '_col').removeClass('highlight-top');\n        }\n\n        if (baseexchangename === exchange) {\n          var _parentcell2 = $('#' + divnamep).parent();\n\n          _parentcell2.addClass('highlight');\n\n          $('#' + exchange + '_col').addClass('highlight-top');\n        }\n\n        if (baseprice !== 0 && price !== 0) {\n          $('#' + divname).empty();\n          $('#' + divnamep).empty();\n\n          if (exchange.toLowerCase() !== baseexchangename.toLowerCase()) {\n            var pratio = (price / baseprice - 1) * 100;\n            currentPratio[coin.toUpperCase()][exchange] = pratio;\n\n            if (pratio < 0) {\n              $('#' + divname).addClass('text-red');\n              $('#' + divname).removeClass('text-green');\n            } else {\n              $('#' + divname).addClass('text-green');\n              $('#' + divname).removeClass('text-red');\n            }\n\n            $('#' + divname).text(pratio.toFixed(0) + ' %');\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(price));\n          } else {\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(price));\n          }\n        } else if (price !== 0 && baseprice === 0) {\n          $('#' + divname).text('--');\n          $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(price));\n        } else {\n          $('#' + divname).text('--');\n          $('#' + divnamep).text('--');\n        }\n      });\n    });\n    var getAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n    getAlerts.forEach(function (alert) {\n      var alertCoins = alert.alertCoins;\n      alertCoins.forEach(function (coin) {\n        var filtered = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.filter(function (exchange) {\n          var pr = currentPratio[coin][exchange];\n\n          if (pr === 0 || exchange === baseexchangename.toUpperCase()) {\n            return false;\n          } else {\n            if (alert.lowerThr < 0 && alert.upperThr > 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr > 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr < 0 && alert.upperThr < 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr < 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            return false;\n          }\n        });\n\n        if (filtered.length > 0) {\n          var shouldChange = $('#' + alert.alertID).hasClass('active');\n          var fillist = $('#' + alert.alertID).data('filtered');\n          var differentList;\n\n          if (fillist) {\n            differentList = fillist.length !== filtered.length;\n          } else {\n            differentList = true;\n          }\n\n          if (!shouldChange || differentList) {\n            $('#' + alert.alertID).addClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            var elist = $('<p>', {\n              \"class\": \"elist\",\n              html: 'For ' + filtered.join(', ')\n            });\n            $('#' + alert.alertID).data('filtered', filtered);\n            $('#' + alert.alertID).append(elist);\n          }\n        } else {\n          var _shouldChange2 = $('#' + alert.alertID).hasClass('active');\n\n          if (_shouldChange2) {\n            $('#' + alert.alertID).removeClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            $('#' + alert.alertID).removeData();\n          }\n        }\n      });\n    });\n  });\n  $('#currency a').click(function (e) {\n    e.preventDefault();\n    var excname = baseexchangename.toUpperCase();\n\n    if (_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.includes(excname) === false) {\n      return;\n    }\n\n    ;\n    var oldbasecurrencyname = basecurrencyname;\n    var elem = $(e.currentTarget);\n    $('#dropdownBaseCurrency').dropdown('toggle');\n    var imgelem = elem.html();\n    var currencyVAL = $(imgelem).attr('alt');\n    base_currency_button.html(elem.html());\n    base_currency_button.val(currencyVAL.toLowerCase());\n    localStorage.setItem('localbasecurrency', currencyVAL.toLowerCase());\n    basecurrencyname = currencyVAL.toLowerCase();\n    var oldrate = currentForexData.rates[_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[oldbasecurrencyname]['sname']];\n    var newrate = currentForexData.rates[_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[basecurrencyname]['sname']];\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      basevalues[coin] = currentPrice[coin][excname] * newrate / oldrate;\n    });\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      var baseprice = basevalues[coin];\n      _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n        var oldprice = currentPrice[coin][exchange];\n        var newprice = oldprice * newrate / oldrate;\n        currentPrice[coin][exchange] = newprice;\n        var divname = exchange.toLowerCase() + '_' + coin.toLowerCase();\n        var divnamep = divname + '_p';\n\n        if (baseprice !== 0 && newprice !== 0) {\n          $('#' + divname).empty();\n          $('#' + divnamep).empty();\n\n          if (exchange.toLowerCase() !== baseexchangename.toLowerCase()) {\n            var pratio = (newprice / baseprice - 1) * 100;\n            currentPratio[coin.toUpperCase()][exchange] = pratio;\n\n            if (pratio < 0) {\n              $('#' + divname).addClass('text-red');\n              $('#' + divname).removeClass('text-green');\n            } else {\n              $('#' + divname).addClass('text-green');\n              $('#' + divname).removeClass('text-red');\n            }\n\n            $('#' + divname).text(pratio.toFixed(0) + ' %');\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(newprice));\n          } else {\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(newprice));\n          }\n        } else if (newprice !== 0 && baseprice === 0) {\n          $('#divname').text('--');\n          $('#divnamep').text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(newprice));\n        } else {\n          $('#' + divname).text('--');\n          $('#' + divnamep).text('--');\n        }\n      });\n    });\n  }); //Dropdown auto close bug fixing.\n\n  $('div.dropdown-menu.custome-class').on('click', function (event) {\n    var events = $._data(document, 'events') || {};\n    events = events.click || [];\n\n    for (var i = 0; i < events.length; i++) {\n      if (events[i].selector) {\n        //Check if the clicked element matches the event selector\n        if ($(event.target).is(events[i].selector)) {\n          events[i].handler.call(event.target, event);\n        } // Check if any of the clicked element parents matches the\n        // delegated event selector (Emulating propagation)\n\n\n        $(event.target).parents(events[i].selector).each(function () {\n          events[i].handler.call(this, event);\n        });\n      }\n    }\n\n    event.stopPropagation(); //Always stop propagation\n  });\n  var addCount = 1;\n  var str1 = '';\n  $('.add-more-range').click(function (e) {\n    e.preventDefault();\n    str1 = \"<div class=\\\"d-flex align-items-center addrange\\\" id=\\\"range-row-\" + addCount + \"\\\"> <div class=\\\"mb-3 pr-3\\\"> <input type=\\\"number\\\" id=\\\"min-value-\" + addCount + \"\\\" style=\\\"width: 80px;height: 35px;\\\" class=\\\"form-control\\\" placeholder=\\\"Min\\\"> </div> <div class=\\\"mb-3 pr-3\\\"> <span class=\\\"font-weight-bold\\\">-</span> </div> <div class=\\\"mb-3 pr-3\\\"> <input type=\\\"number\\\"  id=\\\"max-value-\" + addCount + \"\\\" style=\\\"width: 80px;height: 35px;\\\" class=\\\"form-control\\\" placeholder=\\\"Max\\\"> </div> <div class=\\\"mb-3 pr-3\\\"> <!-- <label class=\\\"d-flex justify-content-start\\\">Choose color :</label> --> <input type=\\\"color\\\" id=\\\"set-color-\" + addCount + \"\\\" class=\\\"form-control p-0 border-0 rounded-circle selectcolor\\\" style=\\\"box-shadow: none !important;\\\"> </div></div>\"; //  <div> <button style=\"font-size: 22px;\" class=\"btn mt-2 bg-transparent p-0 delete-more-range-`+addCount+`\"><i class=\"text-red fa fa-trash\"></i></button> </div> </div>`;\n\n    var finalDiv = document.createElement('div'); // is the node\n\n    finalDiv.innerHTML = str1;\n    addCount++;\n    document.getElementsByClassName(\"range-percent\")[0].appendChild(finalDiv); // $('#dropdownMenuLink').trigger('click');\n  });\n  var minrange = [];\n  var maxrange = [];\n  var color = [];\n  $('#change-color').click(function (e) {\n    e.preventDefault();\n    var clist = document.getElementsByClassName('addrange');\n\n    for (var i = 0; i < clist.length; i++) {\n      minrange.push(document.getElementById(\"min-value-\" + i + \"\").value);\n      maxrange.push(document.getElementById(\"max-value-\" + i + \"\").value);\n      color.push(document.getElementById(\"set-color-\" + i + \"\").value);\n    }\n  });\n  $('#cancel-color').click(function (e) {\n    e.preventDefault();\n    var str = '';\n    str = '<div class=\"d-flex align-items-center addrange\" id=\"range-row-0\"> <div class=\"mb-3 pr-3\"> <input type=\"number\" id=\"min-value-0\" style=\"width: 80px;height: 35px;\" class=\"form-control\" placeholder=\"Min\"> </div> <div class=\"mb-3 pr-3\"> <span class=\"font-weight-bold\">-</span> </div> <div class=\"mb-3 pr-3\"> <input type=\"number\" id=\"max-value-0\" style=\"width: 80px;height: 35px;\" class=\"form-control\" placeholder=\"Max\"> </div> <div class=\"mb-3 pr-3\"> <input type=\"color\" id=\"set-color-0\" class=\"form-control p-0 border-0 rounded-circle selectcolor\" style=\"box-shadow: none !important;\"> </div> </div>';\n    document.getElementsByClassName(\"range-percent\")[0].innerHTML = str;\n    minrange = [];\n    maxrange = [];\n    color = [];\n  });\n\n  var processMessage = function processMessage(msg) {\n    var _JSON$parse = JSON.parse(msg.data),\n        type = _JSON$parse.type,\n        info = _JSON$parse.info;\n\n    if (type === 'forex') {\n      currentForexData = info;\n    }\n\n    if (type === 'crypto' || type === 'snapshot') {\n      if (!_globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.includes(info.uid) || !_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.includes(info.exchange)) {\n        return;\n      }\n\n      if (!_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyList.includes(info.base_currency)) {\n        return;\n      }\n\n      var idname = info.exchange.toLowerCase() + '_' + info.uid.toLowerCase();\n      var idnamep = idname + '_p';\n\n      if (info.base_currency !== _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[basecurrencyname]['sname'] && currentForexData) {\n        if (basecurrencyname === 'unitedstatesdollar') {\n          info.price = info.price / currentForexData.rates[info.base_currency];\n        } else {\n          var usdrate = currentForexData.rates[info.base_currency];\n          var otherrate = currentForexData.rates[_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[basecurrencyname]['sname']];\n          info.price = info.price * otherrate / usdrate;\n        }\n      }\n\n      if (info.exchange.toLowerCase() === baseexchangename.toLowerCase()) {\n        basevalues[info.uid] = info.price;\n\n        if (info.price !== 0) {\n          for (var i = 0; i < _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.length; i++) {\n            if (currentPrice[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]] !== 0) {\n              if (baseexchangename.toLowerCase() !== _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i].toLowerCase()) {\n                var pratio = (currentPrice[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]] / info.price - 1) * 100;\n                currentPratio[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]] = pratio;\n                var divname = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i].toLowerCase() + '_' + info.uid.toLowerCase();\n                var divnamep = divname + '_p';\n\n                if (pratio < 0) {\n                  if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n                    for (var _i = 0; _i < minrange.length; _i++) {\n                      if (minrange[_i] && maxrange[_i] && pratio > minrange[_i] && pratio < maxrange[_i]) {\n                        $('#' + divname).removeClass('text-green');\n                        $('#' + divname).css(\"color\", color[_i]);\n                      }\n                    }\n                  } else {\n                    $('#' + divname).css(\"color\", '');\n                    $('#' + divname).addClass('text-red');\n                    $('#' + divname).removeClass('text-green');\n                  }\n                } else {\n                  if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n                    for (var _i2 = 0; _i2 < minrange.length; _i2++) {\n                      if (minrange[_i2] && maxrange[_i2] && pratio > minrange[_i2] && pratio < maxrange[_i2]) {\n                        $('#' + divname).removeClass('text-red');\n                        $('#' + divname).css(\"color\", color[_i2]);\n                      }\n                    }\n                  } else {\n                    $('#' + divname).css(\"color\", '');\n                    $('#' + divname).addClass('text-green');\n                    $('#' + divname).removeClass('text-red');\n                  }\n                }\n\n                $('#' + divname).text(pratio.toFixed(0) + ' %');\n                $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(currentPrice[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]]));\n              }\n            }\n          }\n        }\n      } else if (basevalues[info.uid] !== 0 && baseexchangename !== info.exchange) {\n        var _pratio = (info.price / basevalues[info.uid] - 1) * 100;\n\n        currentPratio[info.uid.toUpperCase()][info.exchange] = _pratio; // if (pratio < 0) {\n        //   $('#' + idname).addClass('text-red');\n        //   $('#' + idname).removeClass('text-green');\n        // } else {\n        //   $('#' + idname).addClass('text-green');\n        //   $('#' + idname).removeClass('text-red');\n        // }\n\n        if (_pratio < 0) {\n          if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n            for (var _i3 = 0; _i3 < minrange.length; _i3++) {\n              if (minrange[_i3] && maxrange[_i3] && _pratio > minrange[_i3] && _pratio < maxrange[_i3]) {\n                $('#' + idname).removeClass('text-green');\n                $('#' + idname).css(\"color\", color[_i3]);\n              }\n            }\n          } else {\n            $('#' + idname).css(\"color\", '');\n            $('#' + idname).addClass('text-red');\n            $('#' + idname).removeClass('text-green');\n          }\n        } else {\n          if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n            for (var _i4 = 0; _i4 < minrange.length; _i4++) {\n              if (minrange[_i4] && maxrange[_i4] && _pratio > minrange[_i4] && _pratio < maxrange[_i4]) {\n                $('#' + idname).removeClass('text-red');\n                $('#' + idname).css(\"color\", color[_i4]);\n              }\n            }\n          } else {\n            $('#' + idname).css(\"color\", '');\n            $('#' + idname).addClass('text-green');\n            $('#' + idname).removeClass('text-red');\n          }\n        }\n\n        $('#' + idname).text(_pratio.toFixed(0) + ' %');\n      }\n\n      $('#' + idnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + dispCurrFormat(info.price)); // $('#'+idnamep).animate({backgroundColor: 'red'}, 'fast', () => {\n      //   $('#'+idnamep).animate({backgroundColor: 'white'}, 'fast');\n      // });\n      // const parentcell = $('#'+idnamep).parent();\n      // parentcell.addClass('updated');\n      // setTimeout(()=>{\n      //   parentcell.removeClass('updated');\n      // }, 1100);\n\n      currentPrice[info.uid][info.exchange] = info.price;\n      var getAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n      getAlerts.forEach(function (alert) {\n        var alertCoins = alert.alertCoins;\n        alertCoins.forEach(function (coin) {\n          if (info.uid === coin) {\n            var filtered = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.filter(function (exchange) {\n              var pr = currentPratio[coin][exchange];\n\n              if (pr === 0 || exchange === baseexchangename.toUpperCase()) {\n                return false;\n              } else {\n                if (alert.lowerThr < 0 && alert.upperThr > 0) {\n                  return pr <= alert.lowerThr || pr >= alert.upperThr;\n                }\n\n                if (alert.lowerThr > 0 && alert.upperThr > 0) {\n                  return pr >= alert.lowerThr && pr <= alert.upperThr;\n                }\n\n                if (alert.lowerThr < 0 && alert.upperThr < 0) {\n                  return pr >= alert.lowerThr && pr <= alert.upperThr;\n                }\n\n                if (alert.lowerThr > 0 && alert.upperThr < 0) {\n                  return pr <= alert.lowerThr || pr >= alert.upperThr;\n                }\n\n                return false;\n              }\n            });\n\n            if (filtered.length > 0) {\n              // console.log(coin, filtered);\n              var shouldChange = $('#' + alert.alertID).hasClass('active');\n              var fillist = $('#' + alert.alertID).data('filtered');\n              var differentList;\n\n              if (fillist) {\n                differentList = fillist.length !== filtered.length;\n              } else {\n                differentList = true;\n              }\n\n              if (!shouldChange || differentList) {\n                $('#' + alert.alertID).addClass('active');\n                $('#' + alert.alertID + ' p.elist').remove();\n                var elist = $('<p>', {\n                  \"class\": \"elist\",\n                  html: 'For ' + filtered.join(', ')\n                });\n                $('#' + alert.alertID).data('filtered', filtered);\n                $('#' + alert.alertID).append(elist);\n              }\n            } else {\n              var _shouldChange3 = $('#' + alert.alertID).hasClass('active');\n\n              if (_shouldChange3) {\n                $('#' + alert.alertID).removeClass('active');\n                $('#' + alert.alertID + ' p.elist').remove();\n                $('#' + alert.alertID).removeData();\n              }\n            }\n          }\n        });\n      });\n    }\n  };\n\n  $('.fav').click(function (e) {\n    var elem = e.currentTarget;\n    var stardiv = $(elem).children('i')[0];\n    $(stardiv).toggleClass('fa-star fa-star-o');\n    var rowdiv = $(elem).parent();\n    var rowid = $(rowdiv).attr('id');\n    var favList = localStorage.getItem('favList') ? JSON.parse(localStorage.getItem('favList')) : [];\n    var newList;\n\n    if (favList.includes(rowid)) {\n      newList = favList.filter(function (item) {\n        return item !== rowid;\n      });\n    } else {\n      newList = favList.concat([rowid]);\n    }\n\n    localStorage.setItem('favList', JSON.stringify(newList));\n    favListStore.dispatch({\n      type: 'UPDATE_FAV'\n    });\n  });\n  $('#toggleFav').click(function () {\n    var storedFavList = localStorage.getItem('favList') ? JSON.parse(localStorage.getItem('favList')) : [];\n\n    if (storedFavList.length === 0) {\n      return;\n    }\n\n    $('#toggleFav i').toggleClass('fa-star-o fa-star');\n    $('#toggleFav').toggleClass('btn-primary btn-outline-primary');\n    var favState = localStorage.getItem('favState');\n\n    if (favState === 'true') {\n      localStorage.setItem('favState', false);\n    } else if (favState === 'false') {\n      localStorage.setItem('favState', true);\n    }\n\n    var newfavState = localStorage.getItem('favState');\n    var tablerows = $('#currencytable_body tr');\n    tablerows.each(function (idx, elem) {\n      // const elemid = elem.id;\n      if (newfavState === 'false') {\n        $('#' + elem.id).show();\n      }\n\n      if (newfavState === 'true') {\n        if (storedFavList.includes(elem.id)) {\n          $('#' + elem.id).show();\n        } else {\n          $('#' + elem.id).hide();\n        }\n      }\n    });\n  });\n  var socket = new WebSocket(\"wss://ws.route-thai.com/ws\"); // const socket = new WebSocket(\"ws://127.0.0.1:9000/ws\");\n\n  socket.onmessage = function (msg) {\n    return processMessage(msg);\n  }; // const socket2 = new WebSocket(\"ws://127.0.0.1:9001\");\n\n\n  var socket2 = new WebSocket(\"wss://ws.route-thai.com/nodews/\");\n\n  socket2.onmessage = function (msg) {\n    return processMessage(msg);\n  };\n\n  var socket3 = new WebSocket(\"wss://ws2.route-thai.com/ws\");\n\n  socket3.onmessage = function (msg) {\n    return processMessage(msg);\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/displayCurr.js\n");

/***/ }),

/***/ "./resources/js/favListState.js":
/*!**************************************!*\
  !*** ./resources/js/favListState.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar initialState = JSON.parse(localStorage.getItem('favList'));\n\nvar favListState = function favListState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_FAV':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    case 'REMOVE_FAV':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    case 'UPDATE_FAV':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (favListState);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZmF2TGlzdFN0YXRlLmpzPzc4YzEiXSwibmFtZXMiOlsiaW5pdGlhbFN0YXRlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImZhdkxpc3RTdGF0ZSIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdDLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixTQUFyQixDQUFYLENBQXJCOztBQUNBLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQWtDO0FBQUEsTUFBakNDLEtBQWlDLHVFQUF6Qk4sWUFBeUI7QUFBQSxNQUFYTyxNQUFXOztBQUNyRCxVQUFPQSxNQUFNLENBQUNDLElBQWQ7QUFDRSxTQUFLLFNBQUw7QUFDQTtBQUNFRixhQUFLLEdBQUdMLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFSO0FBQ0EsZUFBT0UsS0FBUDtBQUNEOztBQUVELFNBQUssWUFBTDtBQUNBO0FBQ0VBLGFBQUssR0FBR0wsSUFBSSxDQUFDQyxLQUFMLENBQVdDLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixRQUFyQixDQUFYLENBQVI7QUFDQSxlQUFPRSxLQUFQO0FBQ0Q7O0FBRUQsU0FBSyxZQUFMO0FBQ0E7QUFDRUEsYUFBSyxHQUFHTCxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLENBQVgsQ0FBUjtBQUNBLGVBQU9FLEtBQVA7QUFDRDs7QUFFRDtBQUNFLGFBQU9BLEtBQVA7QUFwQko7QUFzQkQsQ0F2QkQ7O0FBd0JBLGlFQUFlRCxZQUFmIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2Zhdkxpc3RTdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaXRpYWxTdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Zhdkxpc3QnKSk7XG5jb25zdCBmYXZMaXN0U3RhdGUgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdBRERfRkFWJzpcbiAgICB7XG4gICAgICBzdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlICdSRU1PVkVfRkFWJzpcbiAgICB7XG4gICAgICBzdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlICdVUERBVEVfRkFWJzpcbiAgICB7XG4gICAgICBzdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZmF2TGlzdFN0YXRlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/favListState.js\n");

/***/ }),

/***/ "./resources/js/globals.js":
/*!*********************************!*\
  !*** ./resources/js/globals.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"coinsList\": () => (/* binding */ coinsList),\n/* harmony export */   \"exchangeList\": () => (/* binding */ exchangeList),\n/* harmony export */   \"exchangeDetails\": () => (/* binding */ exchangeDetails),\n/* harmony export */   \"currencySymbols\": () => (/* binding */ currencySymbols),\n/* harmony export */   \"currencyDetails\": () => (/* binding */ currencyDetails),\n/* harmony export */   \"currencyList\": () => (/* binding */ currencyList),\n/* harmony export */   \"quoteCoinsList\": () => (/* binding */ quoteCoinsList),\n/* harmony export */   \"coinsAlertsList\": () => (/* binding */ coinsAlertsList)\n/* harmony export */ });\nvar _coinsAlertsList;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar coinsList = ['BTC', 'ETH', 'BNB', 'XRP', 'USDT', 'ADA', 'DOT', 'UNI', 'LTC', 'LINK', 'DOGE', 'BCH', 'XLM', 'THETA', 'VET', 'FIL', 'USDC', 'TRX', 'WBTC', 'EOS', 'SOL', 'KLAY', 'BSV', 'CRO', // 'MIOTA',\n'IOST', 'LUNA', 'XMR', 'ATOM', 'AAVE', 'BUSD', 'FTT', 'BTT', 'XTZ', 'AVAX', 'NEO', 'ALGO', 'KSM', 'EGLD', 'XEM', 'HT', 'RUNE', 'CAKE', 'HOT', 'BTCB', 'DAI', 'DASH', 'HBAR', 'CHZ', 'MKR', // newly added\n'ZIL', 'MANA', 'OMG', 'CVC', 'ZRX', 'BAT', 'BAND', 'COMP', // no image data\n'ZEC', 'ZEN', 'ETC', 'WRX', 'LPT', 'DODO', 'ONT', 'SC', 'GNT', 'SUSHI', 'BAKE', 'BURGER', 'INJ', 'YFI', 'BAL']; // export const exchangeList = ['BINANCE', 'COINBASE', 'BITKUB', 'GEMINI', 'BITHUMB', 'UPBIT', 'HUOBI', 'KRAKEN'];\n\nvar exchangeList = ['OKEX', 'POLONIEX', 'HUOBIKR', 'BITSTAMP', 'KUCOIN', 'BITFINEX', 'SATANGPRO', 'BINANCE', 'COINBASE', 'BITKUB', 'GEMINI', 'BITHUMB', 'UPBIT', 'HUOBI', 'KRAKEN', 'LIQUID', 'KORBIT', 'GATEIO', 'CRYPTODOTCOM', 'FTX', 'ZAIF', 'ASCENDEX', 'COINLIST', 'BIGONE', 'PROBIT', 'PROBITKR', 'BITHUMBGLOBAL', 'COINDCX', // 'LUNO',\n'EXMO', // 'ETORO',\n'OKCOIN', // 'COINCHECK',\n'BITTREX', 'BITFLYER', 'XT', 'COINFLEX', 'PARIBU', 'BITBANK', 'COINBITKR', 'BTCTURK', 'CURRENCYDOTCOM', 'COINONEKR', 'BITVAVO', 'INDODAX', 'COINEX', 'HITBTC', // 'OKEXKR',\n'BITWELLEX', 'ALTERDICE', 'DIGIFINEX', 'CEXIO', 'WHITEBIT', 'COINSBIT', 'BTCMARKETS', 'MAXEXCHANGE', 'BITCOINEX', 'KICKEX', 'BITPANDAPRO', 'COINBENE', 'COINTIGER', 'BINANCEJEX', // 'DEXTRADE',\n'TIMEX', 'NOVADAX', 'INDEPENDENTRESERVE', 'COINMETRO', 'AAX', 'P2PB2B', 'CROSSTOWER', 'BHEX', // 'LATOKEN',\n// 'FINEXBOX',\n// 'BILAXY',\n'COINJAR', 'LBANK', 'DCOIN', // 'OCEANEX',\n'BTCALPHA'];\nvar exchangeDetails = {\n  \"BTCALPHA\": {\n    \"img\": \"front/arbitrageimg/228.png\",\n    \"name\": \"BTC-Alpha\"\n  },\n  \"OCEANEX\": {\n    \"img\": \"front/arbitrageimg/468.png\",\n    \"name\": \"OceanEx\"\n  },\n  \"DCOIN\": {\n    \"img\": \"front/arbitrageimg/479.png\",\n    \"name\": \"Dcoin\"\n  },\n  \"LBANK\": {\n    \"img\": \"front/arbitrageimg/333.png\",\n    \"name\": \"LBank\"\n  },\n  \"COINJAR\": {\n    \"img\": \"front/arbitrageimg/657.png\",\n    \"name\": \"CoinJar\"\n  },\n  \"BILAXY\": {\n    \"img\": \"front/arbitrageimg/415.png\",\n    \"name\": \"Bilaxy\"\n  },\n  \"FINEXBOX\": {\n    \"img\": \"front/arbitrageimg/514.png\",\n    \"name\": \"Finexbox\"\n  },\n  \"LATOKEN\": {\n    \"img\": \"front/arbitrageimg/380.png\",\n    \"name\": \"LATOKEN\"\n  },\n  \"BHEX\": {\n    \"img\": \"front/arbitrageimg/478.png\",\n    \"name\": \"HBTC\"\n  },\n  \"CROSSTOWER\": {\n    \"img\": \"front/arbitrageimg/1075.png\",\n    \"name\": \"CrossTower\"\n  },\n  \"P2PB2B\": {\n    \"img\": \"front/arbitrageimg/215.png\",\n    \"name\": \"P2PB2B\"\n  },\n  \"AAX\": {\n    \"img\": \"front/arbitrageimg/853.png\",\n    \"name\": \"AAX\"\n  },\n  \"COINMETRO\": {\n    \"img\": \"front/arbitrageimg/488.png\",\n    \"name\": \"CoinMetro\"\n  },\n  \"INDEPENDENTRESERVE\": {\n    \"img\": \"front/arbitrageimg/166.png\",\n    \"name\": \"Independent Reserve\"\n  },\n  \"NOVADAX\": {\n    \"img\": \"front/arbitrageimg/622.png\",\n    \"name\": \"NovaDAX\"\n  },\n  \"TIMEX\": {\n    \"img\": \"front/arbitrageimg/655.png\",\n    \"name\": \"TimeX\"\n  },\n  \"DEXTRADE\": {\n    \"img\": \"front/arbitrageimg/154.png\",\n    \"name\": \"Dex-Trade\"\n  },\n  \"BINANCEJEX\": {\n    \"img\": \"front/arbitrageimg/615.png\",\n    \"name\": \"Binance JEX\"\n  },\n  \"COINTIGER\": {\n    \"img\": \"front/arbitrageimg/391.png\",\n    \"name\": \"CoinTiger\"\n  },\n  \"COINBENE\": {\n    \"img\": \"front/arbitrageimg/343.png\",\n    \"name\": \"CoinBene\"\n  },\n  \"BITPANDAPRO\": {\n    \"img\": \"front/arbitrageimg/597.png\",\n    \"name\": \"Bitpanda Pro\"\n  },\n  'KICKEX': {\n    \"img\": \"front/arbitrageimg/1112.png\",\n    \"name\": \"KickEX\"\n  },\n  \"BITCOINEX\": {\n    \"img\": \"front/arbitrageimg/857.png\",\n    \"name\": \"Bitcoin.com Exchange\"\n  },\n  \"MAXEXCHANGE\": {\n    \"img\": \"front/arbitrageimg/868.png\",\n    \"name\": \"MAX Exchange\"\n  },\n  \"BTCMARKETS\": {\n    \"img\": \"front/arbitrageimg/224.png\",\n    \"name\": \"BTC Markets\"\n  },\n  \"COINSBIT\": {\n    \"img\": \"front/arbitrageimg/460.png\",\n    \"name\": \"Coinsbit\"\n  },\n  \"WHITEBIT\": {\n    \"img\": \"front/arbitrageimg/501.png\",\n    \"name\": \"WhiteBIT\"\n  },\n  \"CEXIO\": {\n    \"img\": \"front/arbitrageimg/36.png\",\n    \"name\": \"CEX.IO\"\n  },\n  \"DIGIFINEX\": {\n    \"img\": \"front/arbitrageimg/407.png\",\n    \"name\": \"DigiFinex\"\n  },\n  \"ALTERDICE\": {\n    \"img\": \"front/arbitrageimg/481.png\",\n    \"name\": \"Alterdice\"\n  },\n  \"BITWELLEX\": {\n    \"img\": \"front/arbitrageimg/1186.png\",\n    \"name\": \"BitWell\"\n  },\n  \"EXMARKETS\": {\n    \"img\": \"front/arbitrageimg/535.png\",\n    \"name\": \"ExMarkets\"\n  },\n  \"OKEXKR\": {\n    \"img\": \"front/arbitrageimg/490.png\",\n    \"name\": \"OKEx Korea\"\n  },\n  \"HITBTC\": {\n    \"img\": \"front/arbitrageimg/42.png\",\n    \"name\": \"HitBTC\"\n  },\n  \"COINEX\": {\n    \"img\": \"front/arbitrageimg/350.png\",\n    \"name\": \"CoinEx\"\n  },\n  \"INDODAX\": {\n    \"img\": \"front/arbitrageimg/68.png\",\n    \"name\": \"Indodax\"\n  },\n  \"BITVAVO\": {\n    \"img\": \"front/arbitrageimg/520.png\",\n    \"name\": \"Bitvavo\"\n  },\n  \"COINONEKR\": {\n    \"img\": \"front/arbitrageimg/174.png\",\n    \"name\": \"Coinone\"\n  },\n  \"BTCTURK\": {\n    \"img\": \"front/arbitrageimg/243.png\",\n    \"name\": \"BtcTurk Pro\"\n  },\n  \"COINBITKR\": {\n    \"img\": \"front/arbitrageimg/442.png\",\n    \"name\": \"Coinbit\"\n  },\n  \"ITBIT\": {\n    \"img\": \"front/arbitrageimg/72.png\",\n    \"name\": \"itBit\"\n  },\n  \"CURRENCYDOTCOM\": {\n    \"img\": \"front/arbitrageimg/699.png\",\n    \"name\": \"Currency.com\"\n  },\n  \"PARIBU\": {\n    \"img\": \"front/arbitrageimg/225.png\",\n    \"name\": \"Paribu\"\n  },\n  \"BITBANK\": {\n    \"img\": \"front/arbitrageimg/257.png\",\n    \"name\": \"Bitbank\"\n  },\n  \"BIGONE\": {\n    \"img\": \"front/arbitrageimg/330.png\",\n    \"name\": \"BigONE\"\n  },\n  \"ZAIF\": {\n    \"img\": \"front/arbitrageimg/73.png\",\n    \"name\": \"Zaif\"\n  },\n  \"COINFLEX\": {\n    \"img\": \"front/arbitrageimg/538.png\",\n    \"name\": \"CoinFLEX\"\n  },\n  \"XT\": {\n    \"img\": \"front/arbitrageimg/525.png\",\n    \"name\": \"XT\"\n  },\n  \"BITTREX\": {\n    \"img\": \"front/arbitrageimg/22.png\",\n    \"name\": \"Bittrex\"\n  },\n  \"BITFLYER\": {\n    \"img\": \"front/arbitrageimg/139.png\",\n    \"name\": \"bitFlyer\"\n  },\n  'OKEX': {\n    img: 'front/arbitrageimg/294.png',\n    name: 'Okex'\n  },\n  'POLONIEX': {\n    img: 'front/arbitrageimg/16.png',\n    name: 'Poloniex'\n  },\n  'HUOBIKR': {\n    img: 'front/arbitrageimg/huobi.svg',\n    name: 'Huobi KR'\n  },\n  'BITSTAMP': {\n    img: 'front/arbitrageimg/70.png',\n    name: 'Bitstamp'\n  },\n  'KUCOIN': {\n    img: 'front/arbitrageimg/kucoin.svg',\n    name: 'Kucoin'\n  },\n  'BITFINEX': {\n    img: 'front/arbitrageimg/bitfinex.svg',\n    name: 'Bitfinex'\n  },\n  'SATANGPRO': {\n    img: 'front/arbitrageimg/325.png',\n    name: 'Satang Pro'\n  },\n  'BINANCE': {\n    img: 'front/arbitrageimg/binance.svg',\n    name: 'Binance'\n  },\n  'COINBASE': {\n    img: 'front/arbitrageimg/coinbase.svg',\n    name: 'Coinbase'\n  },\n  'BITKUB': {\n    img: 'front/arbitrageimg/bitkub.svg',\n    name: 'Bitkub'\n  },\n  'GEMINI': {\n    img: 'front/arbitrageimg/151.png',\n    name: 'Gemini'\n  },\n  'BITHUMB': {\n    img: 'front/arbitrageimg/bithumb.svg',\n    name: 'Bithumb'\n  },\n  'UPBIT': {\n    img: 'front/arbitrageimg/351.png',\n    name: 'Upbit'\n  },\n  'HUOBI': {\n    img: 'front/arbitrageimg/huobi.svg',\n    name: 'Huobi'\n  },\n  'KRAKEN': {\n    img: 'front/arbitrageimg/kraken.svg',\n    name: 'Kraken'\n  },\n  'LIQUID': {\n    img: 'front/arbitrageimg/7650.png',\n    name: 'Liquid'\n  },\n  'KORBIT': {\n    img: 'front/arbitrageimg/194.png',\n    name: 'Korbit'\n  },\n  'GATEIO': {\n    \"img\": \"front/arbitrageimg/302.png\",\n    \"name\": \"Gate.io\"\n  },\n  'COINCHECK': {\n    \"img\": \"front/arbitrageimg/106.png\",\n    \"name\": \"Coincheck\"\n  },\n  'CRYPTODOTCOM': {\n    \"img\": \"front/arbitrageimg/1149.png\",\n    \"name\": \"Crypto.com\"\n  },\n  'FTX': {\n    \"img\": \"front/arbitrageimg/524.png\",\n    \"name\": \"FTX\"\n  },\n  // 'ZAIF',\n  'ASCENDEX': {\n    \"img\": \"front/arbitrageimg/453.png\",\n    \"name\": \"AscendEX\"\n  },\n  'COINLIST': {\n    \"img\": \"front/arbitrageimg/1011.png\",\n    \"name\": \"Coinlist Pro\"\n  },\n  'PROBIT': {\n    \"img\": \"front/arbitrageimg/477.png\",\n    \"name\": \"ProBit\"\n  },\n  'PROBITKR': {\n    \"img\": \"front/arbitrageimg/477.png\",\n    \"name\": \"ProBit Korea\"\n  },\n  'BITHUMBGLOBAL': {\n    \"img\": \"front/arbitrageimg/489.png\",\n    \"name\": \"Bithumb Global\"\n  },\n  'COINDCX': {\n    \"img\": \"front/arbitrageimg/949.png\",\n    \"name\": \"CoinDCX\"\n  },\n  // 'LUNO',\n  'EXMO': {\n    \"img\": \"front/arbitrageimg/50.png\",\n    \"name\": \"EXMO\"\n  },\n  // 'ETORO',\n  'OKCOIN': {\n    \"img\": \"front/arbitrageimg/61.png\",\n    \"name\": \"OKCoin\"\n  }\n};\nvar currencySymbols = {\n  'UNITEDSTATESDOLLAR': \"$ \",\n  'KOREANWON': \"\\u20A9 \",\n  'INDIANRUPEE': \"\\u20B9 \",\n  'THAIBAHT': \"\\u0E3F \",\n  'JAPANESEYEN': \"\\xA5 \",\n  'TRY': \"\\u20BA \",\n  'AUD': \"$ \"\n};\nvar currencyDetails = {\n  unitedstatesdollar: {\n    name: 'United States Dollar',\n    img: 'front/img/USD_Dollar.png',\n    sname: 'USD'\n  },\n  koreanwon: {\n    name: 'Korean Won',\n    img: 'front/img/Korean_Won.png',\n    sname: 'KRW'\n  },\n  indianrupee: {\n    name: 'Indian Rupee',\n    img: 'front/img/Indian_Rupee.png',\n    sname: 'INR'\n  },\n  thaibaht: {\n    name: 'Thai Baht',\n    img: 'front/img/Thai_Baht.png',\n    sname: 'THB'\n  },\n  japaneseyen: {\n    name: 'Japanese Yen',\n    img: 'front/img/Japanese_Yuan.svg',\n    sname: 'JPY'\n  },\n  \"try\": {\n    name: 'Turkish Lira',\n    img: 'front/arbitrageimg/jp.svg',\n    sname: 'TRY'\n  },\n  aud: {\n    name: 'Australian Dollar',\n    img: 'front/arbitrageimg/AUD.svg',\n    sname: 'AUD'\n  },\n  twd: {\n    name: 'Taiwan dollar',\n    img: 'front/arbitrageimg/twd.svg',\n    sname: 'TWD'\n  }\n};\nvar currencyList = ['USD', 'KRW', 'INR', 'THB', 'JPY', 'RUB', 'TRY', 'EUR', 'IDR', 'AUD', 'TWD', 'BRL'];\nvar quoteCoinsList = ['BTC', 'ETH'];\nvar coinsAlertsList = (_coinsAlertsList = {\n  'BAL': {\n    img: 'front/arbitrageimg/5728.png',\n    name: 'Balancer'\n  },\n  'YFI': {\n    img: 'front/arbitrageimg/5864.png',\n    name: 'Yearn Finance'\n  },\n  'INJ': {\n    img: 'front/arbitrageimg/7226.png',\n    name: 'Injective Protocol'\n  },\n  'BURGER': {\n    img: 'front/arbitrageimg/7158.png',\n    name: 'Burger swap'\n  },\n  'BAKE': {\n    img: 'front/arbitrageimg/7064.png',\n    name: 'Bakery token'\n  },\n  'GNT': {\n    img: 'front/arbitrageimg/9533.png',\n    name: 'GreenTrust'\n  },\n  'SC': {\n    img: 'front/arbitrageimg/1042.png',\n    name: 'Siacoin'\n  },\n  'ONT': {\n    img: 'front/arbitrageimg/2566.png',\n    name: 'Ontology'\n  },\n  'DODO': {\n    img: 'front/arbitrageimg/7224.png',\n    name: 'DODO'\n  },\n  'LPT': {\n    img: 'front/arbitrageimg/3640.png',\n    name: 'Livepeer'\n  },\n  'WRX': {\n    img: 'front/arbitrageimg/5161.png',\n    name: 'WazirX'\n  },\n  'ETC': {\n    img: 'front/arbitrageimg/1321.png',\n    name: 'Ethereum classic'\n  },\n  'ZEN': {\n    img: 'front/arbitrageimg/1698.png',\n    name: 'Horizen'\n  },\n  'MANA': {\n    img: 'front/arbitrageimg/coin_23.png',\n    name: 'Mana'\n  },\n  \"BTC\": {\n    \"img\": \"front/arbitrageimg/1.png\",\n    \"name\": \"Bitcoin\"\n  },\n  \"ETH\": {\n    \"img\": \"front/arbitrageimg/1027.png\",\n    \"name\": \"Ethereum\"\n  },\n  \"BNB\": {\n    \"img\": \"front/arbitrageimg/1839.png\",\n    \"name\": \"Binance Coin\"\n  },\n  \"XRP\": {\n    \"img\": \"front/arbitrageimg/52.png\",\n    \"name\": \"XRP\"\n  },\n  \"USDT\": {\n    \"img\": \"front/arbitrageimg/825.png\",\n    \"name\": \"Tether\"\n  },\n  \"ADA\": {\n    \"img\": \"front/arbitrageimg/2010.png\",\n    \"name\": \"Cardano\"\n  },\n  \"DOT\": {\n    \"img\": \"front/arbitrageimg/6636.png\",\n    \"name\": \"Polkadot\"\n  },\n  \"UNI\": {\n    \"img\": \"front/arbitrageimg/7083.png\",\n    \"name\": \"Uniswap\"\n  },\n  \"LTC\": {\n    \"img\": \"front/arbitrageimg/2.png\",\n    \"name\": \"Litecoin\"\n  },\n  \"LINK\": {\n    \"img\": \"front/arbitrageimg/1975.png\",\n    \"name\": \"Chainlink\"\n  },\n  \"DOGE\": {\n    \"img\": \"front/arbitrageimg/74.png\",\n    \"name\": \"Dogecoin\"\n  },\n  \"BCH\": {\n    \"img\": \"front/arbitrageimg/1831.png\",\n    \"name\": \"Bitcoin Cash\"\n  },\n  \"XLM\": {\n    \"img\": \"front/arbitrageimg/512.png\",\n    \"name\": \"Stellar\"\n  },\n  \"THETA\": {\n    \"img\": \"front/arbitrageimg/2416.png\",\n    \"name\": \"THETA\"\n  },\n  \"VET\": {\n    \"img\": \"front/arbitrageimg/3077.png\",\n    \"name\": \"VeChain\"\n  },\n  \"FIL\": {\n    \"img\": \"front/arbitrageimg/2280.png\",\n    \"name\": \"Filecoin\"\n  },\n  \"USDC\": {\n    \"img\": \"front/arbitrageimg/3408.png\",\n    \"name\": \"USD Coin\"\n  },\n  \"TRX\": {\n    \"img\": \"front/arbitrageimg/1958.png\",\n    \"name\": \"TRON\"\n  },\n  \"WBTC\": {\n    \"img\": \"front/arbitrageimg/3717.png\",\n    \"name\": \"Wrapped Bitcoin\"\n  },\n  \"SOL\": {\n    \"img\": \"front/arbitrageimg/5426.png\",\n    \"name\": \"Solana\"\n  },\n  \"EOS\": {\n    \"img\": \"front/arbitrageimg/1765.png\",\n    \"name\": \"EOS\"\n  },\n  \"KLAY\": {\n    \"img\": \"front/arbitrageimg/4256.png\",\n    \"name\": \"Klaytn\"\n  },\n  \"BSV\": {\n    \"img\": \"front/arbitrageimg/3602.png\",\n    \"name\": \"Bitcoin SV\"\n  },\n  \"LUNA\": {\n    \"img\": \"front/arbitrageimg/4172.png\",\n    \"name\": \"Terra\"\n  },\n  \"MIOTA\": {\n    \"img\": \"front/arbitrageimg/1720.png\",\n    \"name\": \"IOTA\"\n  },\n  \"CRO\": {\n    \"img\": \"front/arbitrageimg/3635.png\",\n    \"name\": \"Crypto.com Coin\"\n  },\n  \"XMR\": {\n    \"img\": \"front/arbitrageimg/monero.png\",\n    \"name\": \"Monero\"\n  },\n  \"ATOM\": {\n    \"img\": \"front/arbitrageimg/3794.png\",\n    \"name\": \"Cosmos\"\n  },\n  \"AAVE\": {\n    \"img\": \"front/arbitrageimg/7278.png\",\n    \"name\": \"Aave\"\n  },\n  \"BUSD\": {\n    \"img\": \"front/arbitrageimg/4687.png\",\n    \"name\": \"Binance USD\"\n  },\n  \"FTT\": {\n    \"img\": \"front/arbitrageimg/4195.png\",\n    \"name\": \"FTX Token\"\n  },\n  \"BTT\": {\n    \"img\": \"front/arbitrageimg/3718.png\",\n    \"name\": \"BitTorrent\"\n  },\n  \"XTZ\": {\n    \"img\": \"front/arbitrageimg/2011.png\",\n    \"name\": \"Tezos\"\n  },\n  \"AVAX\": {\n    \"img\": \"front/arbitrageimg/5805.png\",\n    \"name\": \"Avalanche\"\n  },\n  \"NEO\": {\n    \"img\": \"front/arbitrageimg/1376.png\",\n    \"name\": \"Neo\"\n  },\n  \"ALGO\": {\n    \"img\": \"front/arbitrageimg/4030.png\",\n    \"name\": \"Algorand\"\n  },\n  \"KSM\": {\n    \"img\": \"front/arbitrageimg/5034.png\",\n    \"name\": \"Kusama\"\n  },\n  \"EGLD\": {\n    \"img\": \"front/arbitrageimg/6892.png\",\n    \"name\": \"Elrond\"\n  },\n  \"XEM\": {\n    \"img\": \"front/arbitrageimg/873.png\",\n    \"name\": \"NEM\"\n  },\n  \"HT\": {\n    \"img\": \"front/arbitrageimg/2502.png\",\n    \"name\": \"Huobi Token\"\n  },\n  \"RUNE\": {\n    \"img\": \"front/arbitrageimg/4157.png\",\n    \"name\": \"THORChain\"\n  },\n  \"CAKE\": {\n    \"img\": \"front/arbitrageimg/7186.png\",\n    \"name\": \"PancakeSwap\"\n  },\n  \"BTCB\": {\n    \"img\": \"front/arbitrageimg/4023.png\",\n    \"name\": \"Bitcoin BEP2\"\n  },\n  \"DAI\": {\n    \"img\": \"front/arbitrageimg/4943.png\",\n    \"name\": \"Dai\"\n  },\n  \"HOT\": {\n    \"img\": \"front/arbitrageimg/2682.png\",\n    \"name\": \"Holo\"\n  },\n  \"DASH\": {\n    \"img\": \"front/arbitrageimg/131.png\",\n    \"name\": \"Dash\"\n  },\n  \"CHZ\": {\n    \"img\": \"front/arbitrageimg/4066.png\",\n    \"name\": \"Chiliz\"\n  },\n  \"MKR\": {\n    \"img\": \"front/arbitrageimg/1518.png\",\n    \"name\": \"Maker\"\n  },\n  \"HBAR\": {\n    \"img\": \"front/arbitrageimg/4642.png\",\n    \"name\": \"Hedera Hashgraph\"\n  },\n  \"ZEC\": {\n    \"img\": \"front/arbitrageimg/1437.png\",\n    \"name\": \"Zcash\"\n  },\n  \"STX\": {\n    \"img\": \"front/arbitrageimg/4847.png\",\n    \"name\": \"Stacks\"\n  },\n  \"COMP\": {\n    \"img\": \"front/arbitrageimg/5692.png\",\n    \"name\": \"Compound\"\n  },\n  \"DCR\": {\n    \"img\": \"front/arbitrageimg/1168.png\",\n    \"name\": \"Decred\"\n  }\n}, _defineProperty(_coinsAlertsList, \"ETC\", {\n  \"img\": \"front/arbitrageimg/1321.png\",\n  \"name\": \"Ethereum Classic\"\n}), _defineProperty(_coinsAlertsList, \"GRT\", {\n  \"img\": \"front/arbitrageimg/6719.png\",\n  \"name\": \"The Graph\"\n}), _defineProperty(_coinsAlertsList, \"ENJ\", {\n  \"img\": \"front/arbitrageimg/2130.png\",\n  \"name\": \"Enjin Coin\"\n}), _defineProperty(_coinsAlertsList, \"SNX\", {\n  \"img\": \"front/arbitrageimg/2586.png\",\n  \"name\": \"Synthetix\"\n}), _defineProperty(_coinsAlertsList, \"ZIL\", {\n  \"img\": \"front/arbitrageimg/2469.png\",\n  \"name\": \"Zilliqa\"\n}), _defineProperty(_coinsAlertsList, \"NEAR\", {\n  \"img\": \"front/arbitrageimg/6535.png\",\n  \"name\": \"NEAR Protocol\"\n}), _defineProperty(_coinsAlertsList, \"SUSHI\", {\n  \"img\": \"front/arbitrageimg/6758.png\",\n  \"name\": \"SushiSwap\"\n}), _defineProperty(_coinsAlertsList, \"BAT\", {\n  \"img\": \"front/arbitrageimg/1697.png\",\n  \"name\": \"Basic Attention Token\"\n}), _defineProperty(_coinsAlertsList, \"LEO\", {\n  \"img\": \"front/arbitrageimg/3957.png\",\n  \"name\": \"UNUS SED LEO\"\n}), _defineProperty(_coinsAlertsList, \"MATIC\", {\n  \"img\": \"front/arbitrageimg/3890.png\",\n  \"name\": \"Polygon\"\n}), _defineProperty(_coinsAlertsList, \"NEXO\", {\n  \"img\": \"front/arbitrageimg/2694.png\",\n  \"name\": \"Nexo\"\n}), _defineProperty(_coinsAlertsList, \"BTG\", {\n  \"img\": \"front/arbitrageimg/2083.png\",\n  \"name\": \"Bitcoin Gold\"\n}), _defineProperty(_coinsAlertsList, \"RVN\", {\n  \"img\": \"front/arbitrageimg/2577.png\",\n  \"name\": \"Ravencoin\"\n}), _defineProperty(_coinsAlertsList, 'IOST', {\n  'img': 'front/arbitrageimg/coin_17.png',\n  'name': 'IOST'\n}), _defineProperty(_coinsAlertsList, 'OMG', {\n  img: 'front/arbitrageimg/coin_25.png',\n  name: 'OMG'\n}), _defineProperty(_coinsAlertsList, 'CVC', {\n  img: 'front/arbitrageimg/coin_9.png',\n  name: 'Civic'\n}), _defineProperty(_coinsAlertsList, 'ZRX', {\n  img: 'front/arbitrageimg/coin_37.png',\n  name: 'ZRX'\n}), _defineProperty(_coinsAlertsList, 'BAND', {\n  img: 'front/arbitrageimg/coin_4.png',\n  name: 'BAND'\n}), _coinsAlertsList);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/globals.js\n");

/***/ }),

/***/ "./resources/js/index.js":
/*!*******************************!*\
  !*** ./resources/js/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _displayCurr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./displayCurr.js */ \"./resources/js/displayCurr.js\");\n/* harmony import */ var _alertsManagement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alertsManagement.js */ \"./resources/js/alertsManagement.js\");\n/* harmony import */ var _makeTable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./makeTable.js */ \"./resources/js/makeTable.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n// import '../styles/index.scss';\n// import './darkmode.js';\n\n\n\n // import '../js/offcanvas.js';\n// if (process.env.NODE_ENV === 'development') {\n//   require('../index.html');\n// }\n\n$(function () {\n  $('.bxslider').bxSlider({\n    auto: false,\n    controls: true,\n    pager: false,\n    slideWidth: 280,\n    minSlides: 1,\n    maxSlides: 4,\n    moveSlides: 1,\n    slideMargin: 0,\n    speed: 300,\n    touchEnabled: true\n  });\n  $(\"#hide\").click(function () {\n    $(\".alertbox\").hide();\n  });\n  $(\"#show\").click(function () {\n    $(\".alertbox\").toggle();\n  });\n  $(document).mouseup(function (e) {\n    var container = $(\".alertbox\"); // if the target of the click isn't the container nor a descendant of the container\n\n    if (!container.is(e.target) && container.has(e.target).length === 0) {\n      container.hide();\n    }\n  }); // $(\"#hide_div\").click(function(){\n  //   $(\".alert_create\").hide();\n  // });\n  // $(\"#show_div\").click(function(){\n  //   $(\".alert_create\").show();\n  // });\n\n  $(\"#plus_show_div\").click(function () {\n    $(\".alert_create\").show();\n    $(\".tab-content\").hide();\n  });\n  $(\".hide_div\").click(function () {\n    $(\".alert_create\").hide();\n  });\n  $(\".show_tab\").click(function () {\n    $(\".tab-content\").show();\n  });\n  $('#tablesearchinput').on('keyup change', function () {\n    var searchterm = $('#tablesearchinput').val().replace(/[^\\w\\s]/gi, '');\n\n    if (searchterm.length > 0) {\n      $('.features select').prop('disabled', true);\n      _globals_js__WEBPACK_IMPORTED_MODULE_3__.coinsList.forEach(function (coin) {\n        if (!coin.toLowerCase().includes(searchterm.toLowerCase())) {\n          $('#' + coin.toLowerCase() + '_row').hide();\n        } else {\n          $('#' + coin.toLowerCase() + '_row').show();\n        }\n      });\n    } else {\n      $('.features select').prop('disabled', false);\n      _globals_js__WEBPACK_IMPORTED_MODULE_3__.coinsList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').show();\n      });\n    }\n  });\n  $('#exchangeCenter input').on('keyup change', function () {\n    var searchterm = $('#exchangeCenter input').val().replace(/[^\\w\\s]/gi, '');\n\n    if (searchterm.length > 0) {\n      var items = $('#exchangeCenter .ex-select').toArray();\n      items.forEach(function (item) {\n        if ($(item).html().includes(searchterm.toLowerCase())) {\n          $(item).show();\n        } else {\n          $(item).hide();\n        }\n      });\n    } else {\n      $('#exchangeCenter .ex-select').show();\n    }\n  });\n  $('#exchangeSelectCenter input').on('keyup change', function () {\n    var searchterm = $('#exchangeSelectCenter input').val().replace(/[^\\w\\s]/gi, '');\n\n    if (searchterm.length > 0) {\n      var items = $('#exchangeSelectCenter .ex-select').toArray();\n      items.forEach(function (item) {\n        if ($(item).html().includes(searchterm.toLowerCase())) {\n          $(item).show();\n        } else {\n          $(item).hide();\n        }\n      });\n    } else {\n      $('#exchangeSelectCenter .ex-select').show();\n    }\n  });\n  $('#coinSelectCenter input').on('keyup change', function () {\n    var searchterm = $('#coinSelectCenter input').val().replace(/[^\\w\\s]/gi, '');\n\n    if (searchterm.length > 0) {\n      var items = $('#coinSelectCenter .ex-select').toArray();\n      items.forEach(function (item) {\n        if ($(item).html().includes(searchterm.toLowerCase())) {\n          $(item).show();\n        } else {\n          $(item).hide();\n        }\n      });\n    } else {\n      $('#coinSelectCenter .ex-select').show();\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/index.js\n");

/***/ }),

/***/ "./resources/js/makeTable.js":
/*!***********************************!*\
  !*** ./resources/js/makeTable.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n\n$(function () {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbWFrZVRhYmxlLmpzPzVhOGYiXSwibmFtZXMiOlsiJCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUVBQSxDQUFDLENBQUMsWUFBVyxDQUVaLENBRkEsQ0FBRCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9tYWtlVGFibGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2luc0xpc3QsIGV4Y2hhbmdlTGlzdCwgY3VycmVuY3lTeW1ib2xzLCBjb2luc0FsZXJ0c0xpc3QsIGN1cnJlbmN5TGlzdCB9IGZyb20gJy4vZ2xvYmFscy5qcyc7XG5cbiQoZnVuY3Rpb24oKSB7XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/makeTable.js\n");

/***/ }),

/***/ "./node_modules/redux/es/redux.js":
/*!****************************************!*\
  !*** ./node_modules/redux/es/redux.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__DO_NOT_USE__ActionTypes\": () => (/* binding */ ActionTypes),\n/* harmony export */   \"applyMiddleware\": () => (/* binding */ applyMiddleware),\n/* harmony export */   \"bindActionCreators\": () => (/* binding */ bindActionCreators),\n/* harmony export */   \"combineReducers\": () => (/* binding */ combineReducers),\n/* harmony export */   \"compose\": () => (/* binding */ compose),\n/* harmony export */   \"createStore\": () => (/* binding */ createStore)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n\n\n/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux error #\" + code + \"; visit https://redux.js.org/Errors?code=\" + code + \" for the full message or \" + 'use the non-minified dev environment for full errors. ';\n}\n\n// Inlined version of the `symbol-observable` polyfill\nvar $$observable = (function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n})();\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\nfunction kindOf(val) {\n  var typeOfVal = typeof val;\n\n  if (true) {\n    // Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\n    function miniKindOf(val) {\n      if (val === void 0) return 'undefined';\n      if (val === null) return 'null';\n      var type = typeof val;\n\n      switch (type) {\n        case 'boolean':\n        case 'string':\n        case 'number':\n        case 'symbol':\n        case 'function':\n          {\n            return type;\n          }\n      }\n\n      if (Array.isArray(val)) return 'array';\n      if (isDate(val)) return 'date';\n      if (isError(val)) return 'error';\n      var constructorName = ctorName(val);\n\n      switch (constructorName) {\n        case 'Symbol':\n        case 'Promise':\n        case 'WeakMap':\n        case 'WeakSet':\n        case 'Map':\n        case 'Set':\n          return constructorName;\n      } // other\n\n\n      return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n    }\n\n    function ctorName(val) {\n      return typeof val.constructor === 'function' ? val.constructor.name : null;\n    }\n\n    function isError(val) {\n      return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n    }\n\n    function isDate(val) {\n      if (val instanceof Date) return true;\n      return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n    }\n\n    typeOfVal = miniKindOf(val);\n  }\n\n  return typeOfVal;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error( false ? 0 : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error( false ? 0 : \"Expected the enhancer to be a function. Instead, received: '\" + kindOf(enhancer) + \"'\");\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error( false ? 0 : \"Expected the root reducer to be a function. Instead, received: '\" + kindOf(reducer) + \"'\");\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error( false ? 0 : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error( false ? 0 : \"Expected the listener to be a function. Instead, received: '\" + kindOf(listener) + \"'\");\n    }\n\n    if (isDispatching) {\n      throw new Error( false ? 0 : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error( false ? 0 : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error( false ? 0 : \"Actions must be plain objects. Instead, the actual type was: '\" + kindOf(action) + \"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\");\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error( false ? 0 : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n\n    if (isDispatching) {\n      throw new Error( false ? 0 : 'Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error( false ? 0 : \"Expected the nextReducer to be a function. Instead, received: '\" + kindOf(nextReducer));\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error( false ? 0 : \"Expected the observer to be an object. Instead, received: '\" + kindOf(observer) + \"'\");\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + kindOf(inputState) + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error( false ? 0 : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error( false ? 0 : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle '\" + ActionTypes.INIT + \"' or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (true) {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (true) {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (true) {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var actionType = action && action.type;\n        throw new Error( false ? 0 : \"When called with an action of type \" + (actionType ? \"\\\"\" + String(actionType) + \"\\\"\" : '(unknown type)') + \", the slice reducer for key \\\"\" + _key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\");\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error( false ? 0 : \"bindActionCreators expected an object or a function, but instead received: '\" + kindOf(actionCreators) + \"'. \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error( false ? 0 : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.default)({}, store), {}, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif ( true && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/redux/es/redux.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/index.js");
/******/ 	
/******/ })()
;