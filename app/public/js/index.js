/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/YWRlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectSpread2.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _objectSpread2)\n/* harmony export */ });\n/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defineProperty.js */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcz81NTMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEOztBQUVqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFZTtBQUNmLGlCQUFpQixzQkFBc0I7QUFDdkM7O0FBRUE7QUFDQTtBQUNBLFFBQVEsMkRBQWM7QUFDdEIsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\n");

/***/ }),

/***/ "./resources/js/alertsManagement.js":
/*!******************************************!*\
  !*** ./resources/js/alertsManagement.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux */ \"./node_modules/redux/es/redux.js\");\n/* harmony import */ var _alertsState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alertsState.js */ \"./resources/js/alertsState.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n\n\n // <div class=\"live\">\n//   <a href=\"#\" class=\"intro-banner-vdo-play-btn pinkBg\" target=\"_blank\">\t<i class=\"glyphicon glyphicon-play whiteText\" aria-hidden=\"true\"></i>\n//     <span class=\"ripple pinkBg\"></span>\n//     <span class=\"ripple pinkBg\"></span>\n//     <span class=\"ripple pinkBg\"></span>\n//   </a>\n// </div>\n\nvar regex = new RegExp('^\\-?[0-9]+\\.?\\[0-9]*$');\n$(function () {\n  var alertsStore = (0,redux__WEBPACK_IMPORTED_MODULE_2__.createStore)(_alertsState_js__WEBPACK_IMPORTED_MODULE_0__.default);\n  var storedAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n  _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsList.forEach(function (coin) {\n    var optitem = $('<option>', {\n      value: coin,\n      text: _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin]['name']\n    });\n    $('#alertCoins').append(optitem);\n  });\n  $('#home').empty();\n\n  if (storedAlerts.length > 0) {\n    storedAlerts.forEach(function (alert) {\n      var card = $('<div>', {\n        id: alert.alertID,\n        \"class\": 'noti_card alert alert-dismissible fade show'\n      });\n      var desc = $('<h6>', {\n        html: alert.alertDescription\n      });\n      var closebutton = $('<button>', {\n        type: 'button',\n        \"class\": 'close',\n        'aria-label': 'Close'\n      });\n      closebutton.html('<span aria-hidden=\"true\">&times;</span>');\n      card.append(desc);\n      card.append(closebutton);\n      var clist = $('<ul>');\n      alert.alertCoins.forEach(function (coin) {\n        var cdisplay;\n\n        if (coin == '0') {\n          cdisplay = $('<p>', {\n            html: 'All coins'\n          });\n        } else {\n          var imgsrc = _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin] ? _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin]['img'] : _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList.default.img;\n          var imgdiv = $('<img>', {\n            src: imgsrc\n          });\n          cdisplay = $('<li>');\n          cdisplay.append(imgdiv);\n        }\n\n        clist.append(cdisplay);\n      });\n      card.append(clist);\n      var thr = $('<p>', {\n        html: '<span>' + alert.lowerThr + ' %</span> | <span>' + alert.upperThr + ' %</span>'\n      });\n      card.append(thr);\n      $('#home').append(card);\n    });\n    $('.noti_card button').click(function (e) {\n      var elem = e.currentTarget;\n      var alertDiv = $(elem).parent();\n      var alertID = alertDiv.attr('id');\n      var ll = JSON.parse(localStorage.getItem('alerts'));\n      var newList = ll.filter(function (val) {\n        return val.alertID !== alertID;\n      });\n      localStorage.setItem('alerts', JSON.stringify(newList));\n      alertsStore.dispatch({\n        type: 'REMOVE_ALERT'\n      });\n    });\n  } else {\n    // console.log('no stored alerts found');\n    var noalert = $('<p>');\n    noalert.html('<span>No alerts found! Create by clicking on </span><img src=\"front/arbitrageimg/plus.svg\" alt=\"\">');\n    $('#home').append(noalert);\n  }\n\n  alertsStore.subscribe(function () {\n    var alerts = alertsStore.getState(); // console.log(alerts);\n\n    if (alerts.length === 0) $('#home').empty();\n\n    if (alerts.length > 0) {\n      $('#home').empty();\n      alerts.forEach(function (alert) {\n        var card = $('<div>', {\n          id: alert.alertID,\n          \"class\": 'noti_card alert alert-dismissible fade show'\n        });\n        var desc = $('<h6>', {\n          html: alert.alertDescription\n        });\n        var closebutton = $('<button>', {\n          type: 'button',\n          \"class\": 'close',\n          'aria-label': 'Close'\n        });\n        closebutton.html('<span aria-hidden=\"true\">&times;</span>');\n        card.append(desc);\n        card.append(closebutton);\n        var clist = $('<ul>');\n        alert.alertCoins.forEach(function (coin) {\n          var cdisplay;\n\n          if (coin == '0') {\n            cdisplay = $('<p>', {\n              html: 'All coins'\n            });\n          } else {\n            var imgsrc = _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin] ? _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList[coin]['img'] : _globals_js__WEBPACK_IMPORTED_MODULE_1__.coinsAlertsList.default.img;\n            var imgdiv = $('<img>', {\n              src: imgsrc\n            });\n            cdisplay = $('<li>');\n            cdisplay.append(imgdiv);\n          }\n\n          clist.append(cdisplay);\n        });\n        card.append(clist);\n        var thr = $('<p>', {\n          html: '<span>' + alert.lowerThr + ' %</span> | <span>' + alert.upperThr + ' %</span>'\n        });\n        card.append(thr);\n        $('#home').append(card);\n      });\n      $('.alertbox').show();\n      $(\".tab-content\").show();\n      $('#myTabContent').show();\n      $('.noti_card button').click(function (e) {\n        var elem = e.currentTarget;\n        var alertDiv = $(elem).parent();\n        var alertID = alertDiv.attr('id');\n        var ll = JSON.parse(localStorage.getItem('alerts'));\n        var newList = ll.filter(function (val) {\n          return val.alertID !== alertID;\n        });\n        localStorage.setItem('alerts', JSON.stringify(newList));\n        alertsStore.dispatch({\n          type: 'REMOVE_ALERT'\n        });\n      });\n    }\n  });\n  $('#box-1').click(function (e) {\n    var elem = e.currentTarget;\n\n    if ($(elem).val() === \"1\") {\n      $(elem).val(\"0\");\n    } else {\n      $(elem).val(\"1\");\n    }\n  });\n  $('#alertCoins').on('change', function () {\n    var val = $('#alertCoins').val(); // console.log(val);\n\n    if (val && val.includes('0')) {\n      $('#alertCoins').val(['0']);\n      $('#alertCoins').parent().dropdown('toggle');\n    }\n\n    ;\n  });\n  $('#show_div').click(function () {\n    var alertDescription = $('#alertDescription').val();\n\n    if (alertDescription.length < 1) {\n      console.log({\n        'error': 'Description is mandatory'\n      });\n      return;\n    }\n\n    var alertCoins = $('#alertCoins').val();\n\n    if (alertCoins === null) {\n      console.log({\n        'error': 'Select atleast one coin'\n      });\n      return;\n    }\n\n    if (alertCoins.length < 1) {\n      console.log({\n        'error': 'Select atleast one coin'\n      });\n      return;\n    }\n\n    var lowerThrval = $('#txtChar1').val();\n    var upperThrval = $('#txtChar2').val();\n\n    if (!regex.test(lowerThrval)) {\n      console.log({\n        'error': 'enter a positive or negative number'\n      });\n      return;\n    }\n\n    if (!regex.test(upperThrval)) {\n      console.log({\n        'error': 'enter a positive or negative number'\n      });\n      return;\n    }\n\n    var lowerThr = parseFloat(lowerThrval.match(regex)[0]);\n    var upperThr = parseFloat(upperThrval.match(regex)[0]);\n\n    if (lowerThr > upperThr) {\n      console.log({\n        'error': 'lower threshold should be less than upper threshold'\n      });\n      return;\n    }\n\n    var alertSound = $('#box-1').val() === \"1\" ? true : false;\n    var alertsList;\n    var alertID = '_' + Math.random().toString(36).substr(2, 9);\n\n    if (localStorage.getItem('alerts') === null) {\n      alertsList = [{\n        alertID: alertID,\n        alertDescription: alertDescription,\n        alertCoins: alertCoins,\n        lowerThr: lowerThr,\n        upperThr: upperThr,\n        alertSound: alertSound\n      }];\n    } else {\n      alertsList = JSON.parse(localStorage.getItem('alerts'));\n      alertsList.push({\n        alertID: alertID,\n        alertDescription: alertDescription,\n        alertCoins: alertCoins,\n        lowerThr: lowerThr,\n        upperThr: upperThr,\n        alertSound: alertSound\n      });\n    }\n\n    localStorage.setItem('alerts', JSON.stringify(alertsList));\n    alertsStore.dispatch({\n      type: 'ADD_ALERT'\n    }); // $('#alertCoins').parent().dropdown('toggle');\n\n    $(\".alertbox\").hide();\n    $('.alert_create').hide();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/alertsManagement.js\n");

/***/ }),

/***/ "./resources/js/alertsState.js":
/*!*************************************!*\
  !*** ./resources/js/alertsState.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar initialState = JSON.parse(localStorage.getItem('alerts'));\n\nvar alertsState = function alertsState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_ALERT':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    case 'REMOVE_ALERT':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (alertsState);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYWxlcnRzU3RhdGUuanM/OTc2YyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiYWxlcnRzU3RhdGUiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNQSxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFyQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUFrQztBQUFBLE1BQWpDQyxLQUFpQyx1RUFBekJOLFlBQXlCO0FBQUEsTUFBWE8sTUFBVzs7QUFDcEQsVUFBT0EsTUFBTSxDQUFDQyxJQUFkO0FBQ0UsU0FBSyxXQUFMO0FBQ0E7QUFDRUYsYUFBSyxHQUFHTCxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLENBQVgsQ0FBUjtBQUNBLGVBQU9FLEtBQVA7QUFDRDs7QUFFRCxTQUFLLGNBQUw7QUFDQTtBQUNFQSxhQUFLLEdBQUdMLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFSO0FBQ0EsZUFBT0UsS0FBUDtBQUNEOztBQUVEO0FBQ0UsYUFBT0EsS0FBUDtBQWRKO0FBZ0JELENBakJEOztBQWtCQSxpRUFBZUQsV0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9hbGVydHNTdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaXRpYWxTdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcclxuY29uc3QgYWxlcnRzU3RhdGUgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSAnQUREX0FMRVJUJzpcclxuICAgIHtcclxuICAgICAgc3RhdGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbGVydHMnKSk7XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdSRU1PVkVfQUxFUlQnOlxyXG4gICAge1xyXG4gICAgICBzdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKTtcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGFsZXJ0c1N0YXRlO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/alertsState.js\n");

/***/ }),

/***/ "./resources/js/darkmode.js":
/*!**********************************!*\
  !*** ./resources/js/darkmode.js ***!
  \**********************************/
/***/ (() => {

eval("var toggleButton = document.querySelector('li .dark-light');\nvar theme = localStorage.getItem('theme');\n\nif (theme == null) {\n  localStorage.setItem('theme', 'light');\n} else if (theme == 'dark') {\n  $('body').addClass('dark-mode');\n  $('a.navbar-brand').addClass('light-logo');\n  $('a.navbar-brand').removeClass('dark-logo');\n} else if (theme == 'light') {\n  $('body').removeClass('dark-mode');\n  $('a.navbar-brand').addClass('dark-logo');\n  $('a.navbar-brand').removeClass('light-logo');\n}\n\ntoggleButton.addEventListener('click', function () {\n  if ($('body').hasClass('dark-mode')) {\n    localStorage.setItem('theme', 'light');\n    $('body').removeClass('dark-mode');\n    $('a.navbar-brand').addClass('dark-logo');\n    $('a.navbar-brand').removeClass('light-logo');\n  } else {\n    localStorage.setItem('theme', 'dark');\n    $('body').addClass('dark-mode');\n    $('a.navbar-brand').addClass('light-logo');\n    $('a.navbar-brand').removeClass('dark-logo');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZGFya21vZGUuanM/MWJjNCJdLCJuYW1lcyI6WyJ0b2dnbGVCdXR0b24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0aGVtZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiJCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFzQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFFLElBQU1BLFlBQVksR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLGdCQUF2QixDQUFyQjtBQUNBLElBQUlDLEtBQUssR0FBR0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCLE9BQXJCLENBQVo7O0FBQ0EsSUFBSUYsS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDakJDLEVBQUFBLFlBQVksQ0FBQ0UsT0FBYixDQUFxQixPQUFyQixFQUE4QixPQUE5QjtBQUNELENBRkQsTUFFTyxJQUFHSCxLQUFLLElBQUksTUFBWixFQUFvQjtBQUN6QkksRUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVQyxRQUFWLENBQW1CLFdBQW5CO0FBQ0VELEVBQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CQyxRQUFwQixDQUE2QixZQUE3QjtBQUNBRCxFQUFBQSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkUsV0FBcEIsQ0FBZ0MsV0FBaEM7QUFDSCxDQUpNLE1BSUEsSUFBR04sS0FBSyxJQUFJLE9BQVosRUFBcUI7QUFDMUJJLEVBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUUsV0FBVixDQUFzQixXQUF0QjtBQUNFRixFQUFBQSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkMsUUFBcEIsQ0FBNkIsV0FBN0I7QUFDQUQsRUFBQUEsQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JFLFdBQXBCLENBQWdDLFlBQWhDO0FBQ0g7O0FBRURULFlBQVksQ0FBQ1UsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsWUFBTTtBQUMzQyxNQUFHSCxDQUFDLENBQUMsTUFBRCxDQUFELENBQVVJLFFBQVYsQ0FBbUIsV0FBbkIsQ0FBSCxFQUFvQztBQUNsQ1AsSUFBQUEsWUFBWSxDQUFDRSxPQUFiLENBQXFCLE9BQXJCLEVBQThCLE9BQTlCO0FBQ0FDLElBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUUsV0FBVixDQUFzQixXQUF0QjtBQUNBRixJQUFBQSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkMsUUFBcEIsQ0FBNkIsV0FBN0I7QUFDQUQsSUFBQUEsQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JFLFdBQXBCLENBQWdDLFlBQWhDO0FBQ0QsR0FMRCxNQUtPO0FBQ0xMLElBQUFBLFlBQVksQ0FBQ0UsT0FBYixDQUFxQixPQUFyQixFQUE4QixNQUE5QjtBQUNBQyxJQUFBQSxDQUFDLENBQUMsTUFBRCxDQUFELENBQVVDLFFBQVYsQ0FBbUIsV0FBbkI7QUFDQUQsSUFBQUEsQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JDLFFBQXBCLENBQTZCLFlBQTdCO0FBQ0FELElBQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CRSxXQUFwQixDQUFnQyxXQUFoQztBQUNEO0FBQ0YsQ0FaRCIsInNvdXJjZXNDb250ZW50IjpbIiAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGkgLmRhcmstbGlnaHQnKTtcclxuICBsZXQgdGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKTtcclxuICBpZiAodGhlbWUgPT0gbnVsbCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgJ2xpZ2h0Jyk7XHJcbiAgfSBlbHNlIGlmKHRoZW1lID09ICdkYXJrJykge1xyXG4gICAgJCgnYm9keScpLmFkZENsYXNzKCdkYXJrLW1vZGUnKTtcclxuICAgICAgJCgnYS5uYXZiYXItYnJhbmQnKS5hZGRDbGFzcygnbGlnaHQtbG9nbycpO1xyXG4gICAgICAkKCdhLm5hdmJhci1icmFuZCcpLnJlbW92ZUNsYXNzKCdkYXJrLWxvZ28nKTtcclxuICB9IGVsc2UgaWYodGhlbWUgPT0gJ2xpZ2h0Jykge1xyXG4gICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdkYXJrLW1vZGUnKTtcclxuICAgICAgJCgnYS5uYXZiYXItYnJhbmQnKS5hZGRDbGFzcygnZGFyay1sb2dvJyk7XHJcbiAgICAgICQoJ2EubmF2YmFyLWJyYW5kJykucmVtb3ZlQ2xhc3MoJ2xpZ2h0LWxvZ28nKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGlmKCQoJ2JvZHknKS5oYXNDbGFzcygnZGFyay1tb2RlJykpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgJ2xpZ2h0Jyk7XHJcbiAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnZGFyay1tb2RlJyk7XHJcbiAgICAgICQoJ2EubmF2YmFyLWJyYW5kJykuYWRkQ2xhc3MoJ2RhcmstbG9nbycpO1xyXG4gICAgICAkKCdhLm5hdmJhci1icmFuZCcpLnJlbW92ZUNsYXNzKCdsaWdodC1sb2dvJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCAnZGFyaycpO1xyXG4gICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2RhcmstbW9kZScpO1xyXG4gICAgICAkKCdhLm5hdmJhci1icmFuZCcpLmFkZENsYXNzKCdsaWdodC1sb2dvJyk7XHJcbiAgICAgICQoJ2EubmF2YmFyLWJyYW5kJykucmVtb3ZlQ2xhc3MoJ2RhcmstbG9nbycpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4iXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2Rhcmttb2RlLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/darkmode.js\n");

/***/ }),

/***/ "./resources/js/displayCurr.js":
/*!*************************************!*\
  !*** ./resources/js/displayCurr.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux */ \"./node_modules/redux/es/redux.js\");\n/* harmony import */ var _alertsState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alertsState.js */ \"./resources/js/alertsState.js\");\n/* harmony import */ var _favListState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./favListState.js */ \"./resources/js/favListState.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n$(function () {\n  var alertsStore = (0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)(_alertsState_js__WEBPACK_IMPORTED_MODULE_1__.default);\n  var favListStore = (0,redux__WEBPACK_IMPORTED_MODULE_3__.createStore)(_favListState_js__WEBPACK_IMPORTED_MODULE_2__.default);\n  localStorage.setItem('favState', false);\n  var base_exchange_button = $('#dropdownBaseExchange');\n  var base_currency_button = $('#dropdownBaseCurrency');\n  var localbasecurrency = localStorage.getItem('localbasecurrency');\n\n  if (localbasecurrency === null) {\n    localStorage.setItem('localbasecurrency', 'unitedstatesdollar');\n    localbasecurrency = 'unitedstatesdollar';\n  }\n\n  base_currency_button.empty();\n  base_currency_button.val(localbasecurrency);\n  var buttoncontent = $('<img>', {\n    src: _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[localbasecurrency]['img']\n  });\n  base_currency_button.append(buttoncontent);\n  base_currency_button.append('<span>' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[localbasecurrency]['name'] + '</span>');\n  base_currency_button.append(' ' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[localbasecurrency]['sname']);\n  $('#tablesearchinput').prop('disabled', false); // const maxrows = $('.features select').val();\n\n  var baseexchangename = base_exchange_button.val().toLowerCase();\n  var basecurrencyname = base_currency_button.val().toLowerCase();\n  var currentForexData; // console.log($('.features select'));\n\n  $('.features select').on('change', function () {\n    var maxrow = $('.features select').val();\n    console.log(maxrow);\n\n    if (maxrow === 'all') {\n      $('#tablesearchinput').prop('disabled', false);\n      _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').show();\n      });\n    }\n\n    if (maxrow !== 'all') {\n      $('#tablesearchinput').prop('disabled', true);\n      var maxrownum = parseInt(maxrow);\n      var hideList = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.slice(maxrownum);\n      hideList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').hide();\n      });\n      var showList = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.slice(0, maxrownum);\n      showList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').show();\n      });\n    }\n  });\n  var tableBody = $('#currencytable_body');\n  var tableHeader = $('#currency_header_row');\n  _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n    var headercol = $('<th>', {\n      scope: 'col',\n      id: exchange + '_col'\n    });\n    var eximgpath = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['img'];\n    var headimg = $('<img>', {\n      src: eximgpath,\n      alt: exchange.toLowerCase()\n    });\n    headercol.append(headimg);\n    headercol.append(' ' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['name']);\n    tableHeader.append(headercol);\n\n    if (exchange.toLowerCase() === baseexchangename) {\n      headercol.addClass('highlight-top');\n    }\n\n    var ddlink = $('<a>', {\n      \"class\": 'dropdown-item'\n    });\n    var ddimage = $('<img>', {\n      src: eximgpath,\n      alt: exchange.toLowerCase()\n    });\n    ddlink.append(ddimage);\n    ddlink.append(' ' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeDetails[exchange]['name']);\n    $('#exchange .dropdown-menu').append(ddlink);\n  });\n  _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin, idc) {\n    var coinrow = $('<tr>', {\n      id: coin.toLowerCase() + '_row'\n    });\n    var firstcol = $('<td>', {\n      \"class\": 'fav',\n      html: '<i class=\"fa fa-star-o\" aria-hidden=\"true\"></i>'\n    });\n    coinrow.append(firstcol);\n    var imgpath = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsAlertsList[coin]['img'];\n    var imgtext = ' <span class=\"d-none d-sm-none d-md-block\">' + _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsAlertsList[coin]['name'] + '</span> <span class=\"d-sm-block\">' + coin + '</span>';\n    var imgdiv = $('<img>', {\n      src: imgpath,\n      alt: coin\n    });\n    var headcol = $('<th>', {\n      \"class\": 'first'\n    });\n    headcol.append(imgdiv);\n    headcol.append(imgtext);\n    coinrow.append(headcol);\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n      var divname1 = exchange.toLowerCase() + '_' + coin.toLowerCase();\n      var divname2 = divname1 + '_p';\n      var span2 = $('<span>', {\n        id: divname2,\n        text: '--'\n      });\n      var span1 = $('<span>', {\n        id: divname1,\n        \"class\": 'text-green',\n        text: '--'\n      });\n      var coincol = $('<td>');\n      var lb = $('<br>');\n      coincol.append(span2);\n      coincol.append(lb);\n      coincol.append(span1);\n\n      if (exchange.toLowerCase() === baseexchangename) {\n        coincol.addClass('highlight');\n      }\n\n      coinrow.append(coincol);\n    });\n    tableBody.append(coinrow);\n  });\n  $('#main_data_table').addClass('table-striped');\n  var storedFavList = localStorage.getItem('favList') ? JSON.parse(localStorage.getItem('favList')) : [];\n  storedFavList.forEach(function (item) {\n    var favdiv = $('#' + item + ' td').first();\n    var stardiv = $(favdiv).children()[0];\n    $(stardiv).toggleClass('fa-star-o fa-star');\n  });\n  var storedAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n  alertsStore.subscribe(function () {\n    storedAlerts = alertsStore.getState();\n    storedAlerts.forEach(function (alert) {\n      var alertCoins = alert.alertCoins;\n      alertCoins.forEach(function (coin) {\n        var filtered = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.filter(function (exchange) {\n          var pr = currentPratio[coin][exchange];\n\n          if (pr === 0 || exchange === baseexchangename.toUpperCase()) {\n            return false;\n          } else {\n            if (alert.lowerThr < 0 && alert.upperThr > 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr > 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr < 0 && alert.upperThr < 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr < 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            return false;\n          }\n        });\n\n        if (filtered.length > 0) {\n          var shouldChange = $('#' + alert.alertID).hasClass('active');\n          var fillist = $('#' + alert.alertID).data('filtered');\n          var differentList;\n\n          if (fillist) {\n            differentList = fillist.length !== filtered.length;\n          } else {\n            differentList = true;\n          }\n\n          if (!shouldChange || differentList) {\n            $('#' + alert.alertID).addClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            var elist = $('<p>', {\n              \"class\": \"elist\",\n              html: 'For ' + filtered.join(', ')\n            });\n            $('#' + alert.alertID).data('filtered', filtered);\n            $('#' + alert.alertID).append(elist);\n          }\n        } else {\n          var _shouldChange = $('#' + alert.alertID).hasClass('active');\n\n          if (_shouldChange) {\n            $('#' + alert.alertID).removeClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            $('#' + alert.alertID).removeData();\n          }\n        }\n      });\n    });\n  });\n  var basevalues = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.reduce(function (accu, item) {\n    return Object.assign(accu, _defineProperty({}, item, 0));\n  }, {});\n  var currentPrice = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.reduce(function (accu1, coin) {\n    var obj1 = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.reduce(function (accu2, exchange) {\n      return Object.assign(accu2, _defineProperty({}, exchange, 0));\n    }, {});\n    return Object.assign(accu1, _defineProperty({}, coin, obj1));\n  }, {});\n  var currentPratio = _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.reduce(function (accu1, coin) {\n    var obj1 = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.reduce(function (accu2, exchange) {\n      return Object.assign(accu2, _defineProperty({}, exchange, 0));\n    }, {});\n    return Object.assign(accu1, _defineProperty({}, coin, obj1));\n  }, {});\n  $('#exchange a').click(function (e) {\n    e.preventDefault();\n    var elem = $(e.currentTarget);\n    var imgelem = elem.html();\n    var exchangeVAL = $(imgelem).attr('alt');\n    var oldexchangename = baseexchangename;\n\n    if (_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.includes(exchangeVAL.toUpperCase()) === false) {\n      return;\n    }\n\n    ;\n    base_exchange_button.html(elem.html());\n    base_exchange_button.val(exchangeVAL.toUpperCase());\n    baseexchangename = exchangeVAL.toUpperCase();\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      basevalues[coin] = currentPrice[coin][baseexchangename];\n    });\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      var baseprice = basevalues[coin];\n      _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n        var price = currentPrice[coin][exchange];\n        var divname = exchange.toLowerCase() + '_' + coin.toLowerCase();\n        var divnamep = divname + '_p';\n        var parentcell = $('#' + divnamep).parent();\n\n        if (oldexchangename.toLowerCase() === exchange.toLowerCase()) {\n          var _parentcell = $('#' + divnamep).parent();\n\n          _parentcell.removeClass('highlight');\n\n          $('#' + oldexchangename.toUpperCase() + '_col').removeClass('highlight-top');\n        }\n\n        if (baseexchangename === exchange) {\n          var _parentcell2 = $('#' + divnamep).parent();\n\n          _parentcell2.addClass('highlight');\n\n          $('#' + exchange + '_col').addClass('highlight-top');\n        }\n\n        if (baseprice !== 0 && price !== 0) {\n          $('#' + divname).empty();\n          $('#' + divnamep).empty();\n\n          if (exchange.toLowerCase() !== baseexchangename.toLowerCase()) {\n            var pratio = (price / baseprice - 1) * 100;\n            currentPratio[coin.toUpperCase()][exchange] = pratio;\n\n            if (pratio < 0) {\n              $('#' + divname).addClass('text-red');\n              $('#' + divname).removeClass('text-green');\n            } else {\n              $('#' + divname).addClass('text-green');\n              $('#' + divname).removeClass('text-red');\n            }\n\n            $('#' + divname).text(pratio.toFixed(2) + ' %');\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + price.toFixed(2));\n          } else {\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + price.toFixed(2));\n          }\n        } else if (price !== 0 && baseprice === 0) {\n          $('#' + divname).text('--');\n          $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + price.toFixed(2));\n        } else {\n          $('#' + divname).text('--');\n          $('#' + divnamep).text('--');\n        }\n      });\n    });\n    var getAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n    getAlerts.forEach(function (alert) {\n      var alertCoins = alert.alertCoins;\n      alertCoins.forEach(function (coin) {\n        var filtered = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.filter(function (exchange) {\n          var pr = currentPratio[coin][exchange];\n\n          if (pr === 0 || exchange === baseexchangename.toUpperCase()) {\n            return false;\n          } else {\n            if (alert.lowerThr < 0 && alert.upperThr > 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr > 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr < 0 && alert.upperThr < 0) {\n              return pr >= alert.lowerThr && pr <= alert.upperThr;\n            }\n\n            if (alert.lowerThr > 0 && alert.upperThr < 0) {\n              return pr <= alert.lowerThr || pr >= alert.upperThr;\n            }\n\n            return false;\n          }\n        });\n\n        if (filtered.length > 0) {\n          var shouldChange = $('#' + alert.alertID).hasClass('active');\n          var fillist = $('#' + alert.alertID).data('filtered');\n          var differentList;\n\n          if (fillist) {\n            differentList = fillist.length !== filtered.length;\n          } else {\n            differentList = true;\n          }\n\n          if (!shouldChange || differentList) {\n            $('#' + alert.alertID).addClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            var elist = $('<p>', {\n              \"class\": \"elist\",\n              html: 'For ' + filtered.join(', ')\n            });\n            $('#' + alert.alertID).data('filtered', filtered);\n            $('#' + alert.alertID).append(elist);\n          }\n        } else {\n          var _shouldChange2 = $('#' + alert.alertID).hasClass('active');\n\n          if (_shouldChange2) {\n            $('#' + alert.alertID).removeClass('active');\n            $('#' + alert.alertID + ' p.elist').remove();\n            $('#' + alert.alertID).removeData();\n          }\n        }\n      });\n    });\n  });\n  $('#currency a').click(function (e) {\n    e.preventDefault();\n    var excname = baseexchangename.toUpperCase();\n\n    if (_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.includes(excname) === false) {\n      return;\n    }\n\n    ;\n    var oldbasecurrencyname = basecurrencyname;\n    var elem = $(e.currentTarget);\n    $('#dropdownBaseCurrency').dropdown('toggle');\n    var imgelem = elem.html();\n    var currencyVAL = $(imgelem).attr('alt');\n    base_currency_button.html(elem.html());\n    base_currency_button.val(currencyVAL.toLowerCase());\n    localStorage.setItem('localbasecurrency', currencyVAL.toLowerCase());\n    basecurrencyname = currencyVAL.toLowerCase();\n    var oldrate = currentForexData.rates[_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[oldbasecurrencyname]['sname']];\n    var newrate = currentForexData.rates[_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[basecurrencyname]['sname']];\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      basevalues[coin] = currentPrice[coin][excname] * newrate / oldrate;\n    });\n    _globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.forEach(function (coin) {\n      var baseprice = basevalues[coin];\n      _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.forEach(function (exchange) {\n        var oldprice = currentPrice[coin][exchange];\n        var newprice = oldprice * newrate / oldrate;\n        currentPrice[coin][exchange] = newprice;\n        var divname = exchange.toLowerCase() + '_' + coin.toLowerCase();\n        var divnamep = divname + '_p';\n\n        if (baseprice !== 0 && newprice !== 0) {\n          $('#' + divname).empty();\n          $('#' + divnamep).empty();\n\n          if (exchange.toLowerCase() !== baseexchangename.toLowerCase()) {\n            var pratio = (newprice / baseprice - 1) * 100;\n            currentPratio[coin.toUpperCase()][exchange] = pratio;\n\n            if (pratio < 0) {\n              $('#' + divname).addClass('text-red');\n              $('#' + divname).removeClass('text-green');\n            } else {\n              $('#' + divname).addClass('text-green');\n              $('#' + divname).removeClass('text-red');\n            }\n\n            $('#' + divname).text(pratio.toFixed(2) + ' %');\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + newprice.toFixed(2));\n          } else {\n            $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + newprice.toFixed(2));\n          }\n        } else if (newprice !== 0 && baseprice === 0) {\n          $('#divname').text('--');\n          $('#divnamep').text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + newprice.toFixed(2));\n        } else {\n          $('#' + divname).text('--');\n          $('#' + divnamep).text('--');\n        }\n      });\n    });\n  });\n  var addCount = 1;\n  var str1 = '';\n  $('.add-more-range').click(function (e) {\n    e.preventDefault();\n    str1 = \"<div class=\\\"d-flex align-items-center addrange\\\" id=\\\"range-row-\" + addCount + \"\\\"> <div class=\\\"mb-3 pr-3\\\"> <label class=\\\"d-flex justify-content-start\\\">Min (%):</label> <input type=\\\"number\\\" id=\\\"min-value-\" + addCount + \"\\\" style=\\\"width: 80px;height: 35px;\\\" class=\\\"form-control\\\"> </div> <div class=\\\"pr-3\\\"> <span>TO</span> </div> <div class=\\\"mb-3 pr-3\\\"> <label class=\\\"d-flex justify-content-start\\\">Max (%) :</label> <input type=\\\"number\\\"  id=\\\"max-value-\" + addCount + \"\\\" style=\\\"width: 80px;height: 35px;\\\" class=\\\"form-control\\\"> </div> <div class=\\\"mb-3 pr-3\\\"> <!-- <label class=\\\"d-flex justify-content-start\\\">Choose color :</label> --> <input type=\\\"color\\\" id=\\\"set-color-\" + addCount + \"\\\" class=\\\"form-control p-0 mt-4 border-0 rounded-circle selectcolor\\\" style=\\\"box-shadow: none !important;\\\"> </div></div>\"; //  <div> <button style=\"font-size: 22px;\" class=\"btn mt-2 bg-transparent p-0 delete-more-range-`+addCount+`\"><i class=\"text-red fa fa-trash\"></i></button> </div> </div>`;\n\n    var finalDiv = document.createElement('div'); // is the node\n\n    finalDiv.innerHTML = str1;\n    addCount++;\n    document.getElementsByClassName(\"range-percent\")[0].appendChild(finalDiv); // $('#dropdownMenuLink').trigger('click');\n  });\n  var minrange = [];\n  var maxrange = [];\n  var color = [];\n  $('#change-color').click(function (e) {\n    e.preventDefault();\n    var clist = document.getElementsByClassName('addrange');\n\n    for (var i = 0; i < clist.length; i++) {\n      minrange.push(document.getElementById(\"min-value-\" + i + \"\").value);\n      maxrange.push(document.getElementById(\"max-value-\" + i + \"\").value);\n      color.push(document.getElementById(\"set-color-\" + i + \"\").value);\n    }\n  });\n  $('#cancel-color').click(function (e) {\n    e.preventDefault();\n    var str = '';\n    str = '<div class=\"d-flex align-items-center addrange\" id=\"range-row-0\"> <div class=\"mb-3 pr-3\"> <label class=\"d-flex justify-content-start\">Min (%):</label> <input type=\"number\" id=\"min-value-0\" style=\"width: 80px;height: 35px;\" class=\"form-control\"> </div> <div class=\"pr-3\"> <span>TO</span> </div> <div class=\"mb-3 pr-3\"> <label class=\"d-flex justify-content-start\">Max (%) :</label> <input type=\"number\" id=\"max-value-0\" style=\"width: 80px;height: 35px;\" class=\"form-control\"> </div> <div class=\"mb-3 pr-3\"> <input type=\"color\" id=\"set-color-0\" class=\"form-control p-0 mt-4 border-0 rounded-circle selectcolor\" style=\"box-shadow: none !important;\"> </div> </div>';\n    document.getElementsByClassName(\"range-percent\")[0].innerHTML = str;\n    minrange = [];\n    maxrange = [];\n    color = [];\n  });\n\n  var processMessage = function processMessage(msg) {\n    var _JSON$parse = JSON.parse(msg.data),\n        type = _JSON$parse.type,\n        info = _JSON$parse.info;\n\n    if (type === 'forex') {\n      currentForexData = info;\n    }\n\n    if (type === 'crypto' || type === 'snapshot') {\n      if (!_globals_js__WEBPACK_IMPORTED_MODULE_0__.coinsList.includes(info.uid) || !_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.includes(info.exchange)) {\n        return;\n      }\n\n      if (!_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyList.includes(info.base_currency)) {\n        return;\n      }\n\n      var idname = info.exchange.toLowerCase() + '_' + info.uid.toLowerCase();\n      var idnamep = idname + '_p';\n\n      if (info.base_currency !== _globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[basecurrencyname]['sname'] && currentForexData) {\n        if (basecurrencyname === 'unitedstatesdollar') {\n          info.price = info.price / currentForexData.rates[info.base_currency];\n        } else {\n          var usdrate = currentForexData.rates[info.base_currency];\n          var otherrate = currentForexData.rates[_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencyDetails[basecurrencyname]['sname']];\n          info.price = info.price * otherrate / usdrate;\n        }\n      }\n\n      if (info.exchange.toLowerCase() === baseexchangename.toLowerCase()) {\n        basevalues[info.uid] = info.price;\n\n        if (info.price !== 0) {\n          for (var i = 0; i < _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.length; i++) {\n            if (currentPrice[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]] !== 0) {\n              if (baseexchangename.toLowerCase() !== _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i].toLowerCase()) {\n                var pratio = (currentPrice[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]] / info.price - 1) * 100;\n                currentPratio[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]] = pratio;\n                var divname = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i].toLowerCase() + '_' + info.uid.toLowerCase();\n                var divnamep = divname + '_p';\n\n                if (pratio < 0) {\n                  if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n                    for (var _i = 0; _i < minrange.length; _i++) {\n                      if (minrange[_i] && maxrange[_i] && pratio > minrange[_i] && pratio < maxrange[_i]) {\n                        $('#' + divname).removeClass('text-green');\n                        $('#' + divname).css(\"color\", color[_i]);\n                      }\n                    }\n                  } else {\n                    $('#' + divname).css(\"color\", '');\n                    $('#' + divname).addClass('text-red');\n                    $('#' + divname).removeClass('text-green');\n                  }\n                } else {\n                  if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n                    for (var _i2 = 0; _i2 < minrange.length; _i2++) {\n                      if (minrange[_i2] && maxrange[_i2] && pratio > minrange[_i2] && pratio < maxrange[_i2]) {\n                        $('#' + divname).removeClass('text-red');\n                        $('#' + divname).css(\"color\", color[_i2]);\n                      }\n                    }\n                  } else {\n                    $('#' + divname).css(\"color\", '');\n                    $('#' + divname).addClass('text-green');\n                    $('#' + divname).removeClass('text-red');\n                  }\n                }\n\n                $('#' + divname).text(pratio.toFixed(2) + ' %');\n                $('#' + divnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + currentPrice[info.uid][_globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList[i]].toFixed(2));\n              }\n            }\n          }\n        }\n      } else if (basevalues[info.uid] !== 0 && baseexchangename !== info.exchange) {\n        var _pratio = (info.price / basevalues[info.uid] - 1) * 100;\n\n        currentPratio[info.uid.toUpperCase()][info.exchange] = _pratio; // if (pratio < 0) {\n        //   $('#' + idname).addClass('text-red');\n        //   $('#' + idname).removeClass('text-green');\n        // } else {\n        //   $('#' + idname).addClass('text-green');\n        //   $('#' + idname).removeClass('text-red');\n        // }\n\n        if (_pratio < 0) {\n          if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n            for (var _i3 = 0; _i3 < minrange.length; _i3++) {\n              if (minrange[_i3] && maxrange[_i3] && _pratio > minrange[_i3] && _pratio < maxrange[_i3]) {\n                $('#' + idname).removeClass('text-green');\n                $('#' + idname).css(\"color\", color[_i3]);\n              }\n            }\n          } else {\n            $('#' + idname).css(\"color\", '');\n            $('#' + idname).addClass('text-red');\n            $('#' + idname).removeClass('text-green');\n          }\n        } else {\n          if (minrange.length > 0 && maxrange.length > 0 && color.length > 0) {\n            for (var _i4 = 0; _i4 < minrange.length; _i4++) {\n              if (minrange[_i4] && maxrange[_i4] && _pratio > minrange[_i4] && _pratio < maxrange[_i4]) {\n                $('#' + idname).removeClass('text-red');\n                $('#' + idname).css(\"color\", color[_i4]);\n              }\n            }\n          } else {\n            $('#' + idname).css(\"color\", '');\n            $('#' + idname).addClass('text-green');\n            $('#' + idname).removeClass('text-red');\n          }\n        }\n\n        $('#' + idname).text(_pratio.toFixed(2) + ' %');\n      }\n\n      $('#' + idnamep).text(_globals_js__WEBPACK_IMPORTED_MODULE_0__.currencySymbols[basecurrencyname.toUpperCase()] + info.price.toFixed(2)); // $('#'+idnamep).animate({backgroundColor: 'red'}, 'fast', () => {\n      //   $('#'+idnamep).animate({backgroundColor: 'white'}, 'fast');\n      // });\n      // const parentcell = $('#'+idnamep).parent();\n      // parentcell.addClass('updated');\n      // setTimeout(()=>{\n      //   parentcell.removeClass('updated');\n      // }, 1100);\n\n      currentPrice[info.uid][info.exchange] = info.price;\n      var getAlerts = localStorage.getItem('alerts') ? JSON.parse(localStorage.getItem('alerts')) : [];\n      getAlerts.forEach(function (alert) {\n        var alertCoins = alert.alertCoins;\n        alertCoins.forEach(function (coin) {\n          if (info.uid === coin) {\n            var filtered = _globals_js__WEBPACK_IMPORTED_MODULE_0__.exchangeList.filter(function (exchange) {\n              var pr = currentPratio[coin][exchange];\n\n              if (pr === 0 || exchange === baseexchangename.toUpperCase()) {\n                return false;\n              } else {\n                if (alert.lowerThr < 0 && alert.upperThr > 0) {\n                  return pr <= alert.lowerThr || pr >= alert.upperThr;\n                }\n\n                if (alert.lowerThr > 0 && alert.upperThr > 0) {\n                  return pr >= alert.lowerThr && pr <= alert.upperThr;\n                }\n\n                if (alert.lowerThr < 0 && alert.upperThr < 0) {\n                  return pr >= alert.lowerThr && pr <= alert.upperThr;\n                }\n\n                if (alert.lowerThr > 0 && alert.upperThr < 0) {\n                  return pr <= alert.lowerThr || pr >= alert.upperThr;\n                }\n\n                return false;\n              }\n            });\n\n            if (filtered.length > 0) {\n              // console.log(coin, filtered);\n              var shouldChange = $('#' + alert.alertID).hasClass('active');\n              var fillist = $('#' + alert.alertID).data('filtered');\n              var differentList;\n\n              if (fillist) {\n                differentList = fillist.length !== filtered.length;\n              } else {\n                differentList = true;\n              }\n\n              if (!shouldChange || differentList) {\n                $('#' + alert.alertID).addClass('active');\n                $('#' + alert.alertID + ' p.elist').remove();\n                var elist = $('<p>', {\n                  \"class\": \"elist\",\n                  html: 'For ' + filtered.join(', ')\n                });\n                $('#' + alert.alertID).data('filtered', filtered);\n                $('#' + alert.alertID).append(elist);\n              }\n            } else {\n              var _shouldChange3 = $('#' + alert.alertID).hasClass('active');\n\n              if (_shouldChange3) {\n                $('#' + alert.alertID).removeClass('active');\n                $('#' + alert.alertID + ' p.elist').remove();\n                $('#' + alert.alertID).removeData();\n              }\n            }\n          }\n        });\n      });\n    }\n  };\n\n  $('.fav').click(function (e) {\n    var elem = e.currentTarget;\n    var stardiv = $(elem).children('i')[0];\n    $(stardiv).toggleClass('fa-star fa-star-o');\n    var rowdiv = $(elem).parent();\n    var rowid = $(rowdiv).attr('id');\n    var favList = localStorage.getItem('favList') ? JSON.parse(localStorage.getItem('favList')) : [];\n    var newList;\n\n    if (favList.includes(rowid)) {\n      newList = favList.filter(function (item) {\n        return item !== rowid;\n      });\n    } else {\n      newList = favList.concat([rowid]);\n    }\n\n    localStorage.setItem('favList', JSON.stringify(newList));\n    favListStore.dispatch({\n      type: 'UPDATE_FAV'\n    });\n  });\n  $('#toggleFav').click(function () {\n    var storedFavList = localStorage.getItem('favList') ? JSON.parse(localStorage.getItem('favList')) : [];\n\n    if (storedFavList.length === 0) {\n      return;\n    }\n\n    $('#toggleFav i').toggleClass('fa-star-o fa-star');\n    $('#toggleFav').toggleClass('btn-primary btn-outline-primary');\n    var favState = localStorage.getItem('favState');\n\n    if (favState === 'true') {\n      localStorage.setItem('favState', false);\n    } else if (favState === 'false') {\n      localStorage.setItem('favState', true);\n    }\n\n    var newfavState = localStorage.getItem('favState');\n    var tablerows = $('#currencytable_body tr');\n    tablerows.each(function (idx, elem) {\n      // const elemid = elem.id;\n      if (newfavState === 'false') {\n        $('#' + elem.id).show();\n      }\n\n      if (newfavState === 'true') {\n        if (storedFavList.includes(elem.id)) {\n          $('#' + elem.id).show();\n        } else {\n          $('#' + elem.id).hide();\n        }\n      }\n    });\n  });\n  var socket = new WebSocket(\"wss://ws.route-thai.com/ws\"); // const socket = new WebSocket(\"ws://127.0.0.1:9000/ws\");\n\n  socket.onmessage = function (msg) {\n    return processMessage(msg);\n  }; // const socket2 = new WebSocket(\"ws://127.0.0.1:9001\");\n\n\n  var socket2 = new WebSocket(\"wss://ws.route-thai.com/nodews/\");\n\n  socket2.onmessage = function (msg) {\n    return processMessage(msg);\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZGlzcGxheUN1cnIuanM/ZTg4NSJdLCJuYW1lcyI6WyIkIiwiYWxlcnRzU3RvcmUiLCJjcmVhdGVTdG9yZSIsImFsZXJ0c1N0YXRlIiwiZmF2TGlzdFN0b3JlIiwiZmF2TGlzdFN0YXRlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImJhc2VfZXhjaGFuZ2VfYnV0dG9uIiwiYmFzZV9jdXJyZW5jeV9idXR0b24iLCJsb2NhbGJhc2VjdXJyZW5jeSIsImdldEl0ZW0iLCJlbXB0eSIsInZhbCIsImJ1dHRvbmNvbnRlbnQiLCJzcmMiLCJjdXJyZW5jeURldGFpbHMiLCJhcHBlbmQiLCJwcm9wIiwiYmFzZWV4Y2hhbmdlbmFtZSIsInRvTG93ZXJDYXNlIiwiYmFzZWN1cnJlbmN5bmFtZSIsImN1cnJlbnRGb3JleERhdGEiLCJvbiIsIm1heHJvdyIsImNvbnNvbGUiLCJsb2ciLCJjb2luc0xpc3QiLCJjb2luIiwic2hvdyIsIm1heHJvd251bSIsInBhcnNlSW50IiwiaGlkZUxpc3QiLCJmb3JFYWNoIiwiaGlkZSIsInNob3dMaXN0IiwidGFibGVCb2R5IiwidGFibGVIZWFkZXIiLCJleGNoYW5nZUxpc3QiLCJleGNoYW5nZSIsImhlYWRlcmNvbCIsInNjb3BlIiwiaWQiLCJleGltZ3BhdGgiLCJleGNoYW5nZURldGFpbHMiLCJoZWFkaW1nIiwiYWx0IiwiYWRkQ2xhc3MiLCJkZGxpbmsiLCJkZGltYWdlIiwiaWRjIiwiY29pbnJvdyIsImZpcnN0Y29sIiwiaHRtbCIsImltZ3BhdGgiLCJjb2luc0FsZXJ0c0xpc3QiLCJpbWd0ZXh0IiwiaW1nZGl2IiwiaGVhZGNvbCIsImRpdm5hbWUxIiwiZGl2bmFtZTIiLCJzcGFuMiIsInRleHQiLCJzcGFuMSIsImNvaW5jb2wiLCJsYiIsInN0b3JlZEZhdkxpc3QiLCJKU09OIiwicGFyc2UiLCJpdGVtIiwiZmF2ZGl2IiwiZmlyc3QiLCJzdGFyZGl2IiwiY2hpbGRyZW4iLCJ0b2dnbGVDbGFzcyIsInN0b3JlZEFsZXJ0cyIsInN1YnNjcmliZSIsImdldFN0YXRlIiwiYWxlcnQiLCJhbGVydENvaW5zIiwiZmlsdGVyZWQiLCJwciIsImN1cnJlbnRQcmF0aW8iLCJ0b1VwcGVyQ2FzZSIsImxvd2VyVGhyIiwidXBwZXJUaHIiLCJsZW5ndGgiLCJzaG91bGRDaGFuZ2UiLCJhbGVydElEIiwiaGFzQ2xhc3MiLCJmaWxsaXN0IiwiZGF0YSIsImRpZmZlcmVudExpc3QiLCJyZW1vdmUiLCJlbGlzdCIsImpvaW4iLCJyZW1vdmVDbGFzcyIsInJlbW92ZURhdGEiLCJiYXNldmFsdWVzIiwiYWNjdSIsIk9iamVjdCIsImFzc2lnbiIsImN1cnJlbnRQcmljZSIsImFjY3UxIiwib2JqMSIsImFjY3UyIiwiY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJlbGVtIiwiY3VycmVudFRhcmdldCIsImltZ2VsZW0iLCJleGNoYW5nZVZBTCIsImF0dHIiLCJvbGRleGNoYW5nZW5hbWUiLCJiYXNlcHJpY2UiLCJwcmljZSIsImRpdm5hbWUiLCJkaXZuYW1lcCIsInBhcmVudGNlbGwiLCJwYXJlbnQiLCJwcmF0aW8iLCJ0b0ZpeGVkIiwiY3VycmVuY3lTeW1ib2xzIiwiZ2V0QWxlcnRzIiwiZXhjbmFtZSIsIm9sZGJhc2VjdXJyZW5jeW5hbWUiLCJkcm9wZG93biIsImN1cnJlbmN5VkFMIiwib2xkcmF0ZSIsInJhdGVzIiwibmV3cmF0ZSIsIm9sZHByaWNlIiwibmV3cHJpY2UiLCJhZGRDb3VudCIsInN0cjEiLCJmaW5hbERpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhcHBlbmRDaGlsZCIsIm1pbnJhbmdlIiwibWF4cmFuZ2UiLCJjb2xvciIsImNsaXN0IiwiaSIsInB1c2giLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwic3RyIiwicHJvY2Vzc01lc3NhZ2UiLCJtc2ciLCJ0eXBlIiwiaW5mbyIsInVpZCIsImN1cnJlbmN5TGlzdCIsImJhc2VfY3VycmVuY3kiLCJpZG5hbWUiLCJpZG5hbWVwIiwidXNkcmF0ZSIsIm90aGVycmF0ZSIsImNzcyIsInJvd2RpdiIsInJvd2lkIiwiZmF2TGlzdCIsIm5ld0xpc3QiLCJpbmNsdWRlcyIsImZpbHRlciIsImNvbmNhdCIsInN0cmluZ2lmeSIsImRpc3BhdGNoIiwiZmF2U3RhdGUiLCJuZXdmYXZTdGF0ZSIsInRhYmxlcm93cyIsImVhY2giLCJpZHgiLCJzb2NrZXQiLCJXZWJTb2NrZXQiLCJvbm1lc3NhZ2UiLCJzb2NrZXQyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFFQUEsQ0FBQyxDQUFDLFlBQVk7QUFDWixNQUFNQyxXQUFXLEdBQUdDLGtEQUFXLENBQUNDLG9EQUFELENBQS9CO0FBQ0EsTUFBTUMsWUFBWSxHQUFHRixrREFBVyxDQUFDRyxxREFBRCxDQUFoQztBQUNBQyxjQUFZLENBQUNDLE9BQWIsQ0FBcUIsVUFBckIsRUFBaUMsS0FBakM7QUFFQSxNQUFNQyxvQkFBb0IsR0FBR1IsQ0FBQyxDQUFDLHVCQUFELENBQTlCO0FBQ0EsTUFBTVMsb0JBQW9CLEdBQUdULENBQUMsQ0FBQyx1QkFBRCxDQUE5QjtBQUVBLE1BQUlVLGlCQUFpQixHQUFHSixZQUFZLENBQUNLLE9BQWIsQ0FBcUIsbUJBQXJCLENBQXhCOztBQUNBLE1BQUlELGlCQUFpQixLQUFLLElBQTFCLEVBQWdDO0FBQzlCSixnQkFBWSxDQUFDQyxPQUFiLENBQXFCLG1CQUFyQixFQUEwQyxvQkFBMUM7QUFDQUcscUJBQWlCLEdBQUcsb0JBQXBCO0FBQ0Q7O0FBQ0RELHNCQUFvQixDQUFDRyxLQUFyQjtBQUNBSCxzQkFBb0IsQ0FBQ0ksR0FBckIsQ0FBeUJILGlCQUF6QjtBQUNBLE1BQU1JLGFBQWEsR0FBR2QsQ0FBQyxDQUFDLE9BQUQsRUFBVTtBQUFFZSxPQUFHLEVBQUVDLHdEQUFlLENBQUNOLGlCQUFELENBQWYsQ0FBbUMsS0FBbkM7QUFBUCxHQUFWLENBQXZCO0FBQ0FE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RDtBQUNGO0FBQ0YsS0FiRDtBQWVELEdBaENEO0FBa0NBLE1BQU0rSSxNQUFNLEdBQUcsSUFBSUMsU0FBSixDQUFjLDRCQUFkLENBQWYsQ0E1bkJZLENBNm5CWjs7QUFDQUQsUUFBTSxDQUFDRSxTQUFQLEdBQW1CLFVBQUMzQixHQUFEO0FBQUEsV0FBU0QsY0FBYyxDQUFDQyxHQUFELENBQXZCO0FBQUEsR0FBbkIsQ0E5bkJZLENBZ29CWjs7O0FBQ0EsTUFBTTRCLE9BQU8sR0FBRyxJQUFJRixTQUFKLENBQWMsaUNBQWQsQ0FBaEI7O0FBQ0FFLFNBQU8sQ0FBQ0QsU0FBUixHQUFvQixVQUFDM0IsR0FBRDtBQUFBLFdBQVNELGNBQWMsQ0FBQ0MsR0FBRCxDQUF2QjtBQUFBLEdBQXBCO0FBRUQsQ0Fwb0JBLENBQUQiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZGlzcGxheUN1cnIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGNvaW5zTGlzdCwgZXhjaGFuZ2VMaXN0LFxyXG4gIGN1cnJlbmN5U3ltYm9scywgY3VycmVuY3lEZXRhaWxzLFxyXG4gIGNvaW5zQWxlcnRzTGlzdCwgZXhjaGFuZ2VEZXRhaWxzLFxyXG4gIGN1cnJlbmN5TGlzdFxyXG59IGZyb20gJy4vZ2xvYmFscy5qcyc7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQgYWxlcnRzU3RhdGUgZnJvbSAnLi9hbGVydHNTdGF0ZS5qcyc7XHJcbmltcG9ydCBmYXZMaXN0U3RhdGUgZnJvbSAnLi9mYXZMaXN0U3RhdGUuanMnO1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3QgYWxlcnRzU3RvcmUgPSBjcmVhdGVTdG9yZShhbGVydHNTdGF0ZSk7XHJcbiAgY29uc3QgZmF2TGlzdFN0b3JlID0gY3JlYXRlU3RvcmUoZmF2TGlzdFN0YXRlKTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZmF2U3RhdGUnLCBmYWxzZSk7XHJcblxyXG4gIGNvbnN0IGJhc2VfZXhjaGFuZ2VfYnV0dG9uID0gJCgnI2Ryb3Bkb3duQmFzZUV4Y2hhbmdlJyk7XHJcbiAgY29uc3QgYmFzZV9jdXJyZW5jeV9idXR0b24gPSAkKCcjZHJvcGRvd25CYXNlQ3VycmVuY3knKTtcclxuXHJcbiAgbGV0IGxvY2FsYmFzZWN1cnJlbmN5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsYmFzZWN1cnJlbmN5Jyk7XHJcbiAgaWYgKGxvY2FsYmFzZWN1cnJlbmN5ID09PSBudWxsKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbG9jYWxiYXNlY3VycmVuY3knLCAndW5pdGVkc3RhdGVzZG9sbGFyJyk7XHJcbiAgICBsb2NhbGJhc2VjdXJyZW5jeSA9ICd1bml0ZWRzdGF0ZXNkb2xsYXInO1xyXG4gIH1cclxuICBiYXNlX2N1cnJlbmN5X2J1dHRvbi5lbXB0eSgpO1xyXG4gIGJhc2VfY3VycmVuY3lfYnV0dG9uLnZhbChsb2NhbGJhc2VjdXJyZW5jeSk7XHJcbiAgY29uc3QgYnV0dG9uY29udGVudCA9ICQoJzxpbWc+JywgeyBzcmM6IGN1cnJlbmN5RGV0YWlsc1tsb2NhbGJhc2VjdXJyZW5jeV1bJ2ltZyddIH0pO1xyXG4gIGJhc2VfY3VycmVuY3lfYnV0dG9uLmFwcGVuZChidXR0b25jb250ZW50KTtcclxuICBiYXNlX2N1cnJlbmN5X2J1dHRvbi5hcHBlbmQoJzxzcGFuPicgKyBjdXJyZW5jeURldGFpbHNbbG9jYWxiYXNlY3VycmVuY3ldWyduYW1lJ10gKyAnPC9zcGFuPicpO1xyXG4gIGJhc2VfY3VycmVuY3lfYnV0dG9uLmFwcGVuZCgnICcgKyBjdXJyZW5jeURldGFpbHNbbG9jYWxiYXNlY3VycmVuY3ldWydzbmFtZSddKTtcclxuXHJcbiAgJCgnI3RhYmxlc2VhcmNoaW5wdXQnKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAvLyBjb25zdCBtYXhyb3dzID0gJCgnLmZlYXR1cmVzIHNlbGVjdCcpLnZhbCgpO1xyXG5cclxuICBsZXQgYmFzZWV4Y2hhbmdlbmFtZSA9IGJhc2VfZXhjaGFuZ2VfYnV0dG9uLnZhbCgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgbGV0IGJhc2VjdXJyZW5jeW5hbWUgPSBiYXNlX2N1cnJlbmN5X2J1dHRvbi52YWwoKS50b0xvd2VyQ2FzZSgpO1xyXG4gIGxldCBjdXJyZW50Rm9yZXhEYXRhO1xyXG4gIC8vIGNvbnNvbGUubG9nKCQoJy5mZWF0dXJlcyBzZWxlY3QnKSk7XHJcbiAgJCgnLmZlYXR1cmVzIHNlbGVjdCcpLm9uKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBtYXhyb3cgPSAkKCcuZmVhdHVyZXMgc2VsZWN0JykudmFsKCk7XHJcbiAgICBjb25zb2xlLmxvZyhtYXhyb3cpXHJcbiAgICBpZiAobWF4cm93ID09PSAnYWxsJykge1xyXG4gICAgICAkKCcjdGFibGVzZWFyY2hpbnB1dCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG4gICAgICBjb2luc0xpc3QuZm9yRWFjaCgoY29pbikgPT4ge1xyXG4gICAgICAgICQoJyMnICsgY29pbi50b0xvd2VyQ2FzZSgpICsgJ19yb3cnKS5zaG93KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKG1heHJvdyAhPT0gJ2FsbCcpIHtcclxuICAgICAgJCgnI3RhYmxlc2VhcmNoaW5wdXQnKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICBjb25zdCBtYXhyb3dudW0gPSBwYXJzZUludChtYXhyb3cpO1xyXG4gICAgICBjb25zdCBoaWRlTGlzdCA9IGNvaW5zTGlzdC5zbGljZShtYXhyb3dudW0pO1xyXG4gICAgICBoaWRlTGlzdC5mb3JFYWNoKChjb2luKSA9PiB7XHJcbiAgICAgICAgJCgnIycgKyBjb2luLnRvTG93ZXJDYXNlKCkgKyAnX3JvdycpLmhpZGUoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHNob3dMaXN0ID0gY29pbnNMaXN0LnNsaWNlKDAsIG1heHJvd251bSk7XHJcbiAgICAgIHNob3dMaXN0LmZvckVhY2goKGNvaW4pID0+IHtcclxuICAgICAgICAkKCcjJyArIGNvaW4udG9Mb3dlckNhc2UoKSArICdfcm93Jykuc2hvdygpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3QgdGFibGVCb2R5ID0gJCgnI2N1cnJlbmN5dGFibGVfYm9keScpO1xyXG4gIGNvbnN0IHRhYmxlSGVhZGVyID0gJCgnI2N1cnJlbmN5X2hlYWRlcl9yb3cnKTtcclxuICBleGNoYW5nZUxpc3QuZm9yRWFjaCgoZXhjaGFuZ2UpID0+IHtcclxuICAgIGNvbnN0IGhlYWRlcmNvbCA9ICQoJzx0aD4nLCB7IHNjb3BlOiAnY29sJywgaWQ6IGV4Y2hhbmdlICsgJ19jb2wnIH0pO1xyXG4gICAgY29uc3QgZXhpbWdwYXRoID0gZXhjaGFuZ2VEZXRhaWxzW2V4Y2hhbmdlXVsnaW1nJ107XHJcbiAgICBjb25zdCBoZWFkaW1nID0gJCgnPGltZz4nLCB7IHNyYzogZXhpbWdwYXRoLCBhbHQ6IGV4Y2hhbmdlLnRvTG93ZXJDYXNlKCkgfSk7XHJcbiAgICBoZWFkZXJjb2wuYXBwZW5kKGhlYWRpbWcpO1xyXG4gICAgaGVhZGVyY29sLmFwcGVuZCgnICcgKyBleGNoYW5nZURldGFpbHNbZXhjaGFuZ2VdWyduYW1lJ10pO1xyXG4gICAgdGFibGVIZWFkZXIuYXBwZW5kKGhlYWRlcmNvbCk7XHJcbiAgICBpZiAoZXhjaGFuZ2UudG9Mb3dlckNhc2UoKSA9PT0gYmFzZWV4Y2hhbmdlbmFtZSkge1xyXG4gICAgICBoZWFkZXJjb2wuYWRkQ2xhc3MoJ2hpZ2hsaWdodC10b3AnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRkbGluayA9ICQoJzxhPicsIHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJyB9KTtcclxuICAgIGNvbnN0IGRkaW1hZ2UgPSAkKCc8aW1nPicsIHsgc3JjOiBleGltZ3BhdGgsIGFsdDogZXhjaGFuZ2UudG9Mb3dlckNhc2UoKSB9KTtcclxuICAgIGRkbGluay5hcHBlbmQoZGRpbWFnZSk7XHJcbiAgICBkZGxpbmsuYXBwZW5kKCcgJyArIGV4Y2hhbmdlRGV0YWlsc1tleGNoYW5nZV1bJ25hbWUnXSk7XHJcbiAgICAkKCcjZXhjaGFuZ2UgLmRyb3Bkb3duLW1lbnUnKS5hcHBlbmQoZGRsaW5rKTtcclxuICB9KTtcclxuXHJcbiAgY29pbnNMaXN0LmZvckVhY2goKGNvaW4sIGlkYykgPT4ge1xyXG4gICAgY29uc3QgY29pbnJvdyA9ICQoJzx0cj4nLCB7IGlkOiBjb2luLnRvTG93ZXJDYXNlKCkgKyAnX3JvdycgfSk7XHJcbiAgICBjb25zdCBmaXJzdGNvbCA9ICQoJzx0ZD4nLCB7IGNsYXNzOiAnZmF2JywgaHRtbDogJzxpIGNsYXNzPVwiZmEgZmEtc3Rhci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicgfSk7XHJcbiAgICBjb2lucm93LmFwcGVuZChmaXJzdGNvbCk7XHJcbiAgICBjb25zdCBpbWdwYXRoID0gY29pbnNBbGVydHNMaXN0W2NvaW5dWydpbWcnXTtcclxuICAgIGNvbnN0IGltZ3RleHQgPSAnIDxzcGFuIGNsYXNzPVwiZC1ub25lIGQtc20tbm9uZSBkLW1kLWJsb2NrXCI+JyArIGNvaW5zQWxlcnRzTGlzdFtjb2luXVsnbmFtZSddICsgJzwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJkLXNtLWJsb2NrXCI+JyArIGNvaW4gKyAnPC9zcGFuPic7XHJcbiAgICBjb25zdCBpbWdkaXYgPSAkKCc8aW1nPicsIHsgc3JjOiBpbWdwYXRoLCBhbHQ6IGNvaW4gfSk7XHJcbiAgICBjb25zdCBoZWFkY29sID0gJCgnPHRoPicsIHsgY2xhc3M6ICdmaXJzdCcgfSk7XHJcbiAgICBoZWFkY29sLmFwcGVuZChpbWdkaXYpO1xyXG4gICAgaGVhZGNvbC5hcHBlbmQoaW1ndGV4dCk7XHJcbiAgICBjb2lucm93LmFwcGVuZChoZWFkY29sKTtcclxuICAgIGV4Y2hhbmdlTGlzdC5mb3JFYWNoKChleGNoYW5nZSkgPT4ge1xyXG4gICAgICBjb25zdCBkaXZuYW1lMSA9IGV4Y2hhbmdlLnRvTG93ZXJDYXNlKCkgKyAnXycgKyBjb2luLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGNvbnN0IGRpdm5hbWUyID0gZGl2bmFtZTEgKyAnX3AnO1xyXG4gICAgICBjb25zdCBzcGFuMiA9ICQoJzxzcGFuPicsIHsgaWQ6IGRpdm5hbWUyLCB0ZXh0OiAnLS0nIH0pO1xyXG4gICAgICBjb25zdCBzcGFuMSA9ICQoJzxzcGFuPicsIHsgaWQ6IGRpdm5hbWUxLCBjbGFzczogJ3RleHQtZ3JlZW4nLCB0ZXh0OiAnLS0nIH0pO1xyXG4gICAgICBjb25zdCBjb2luY29sID0gJCgnPHRkPicpO1xyXG4gICAgICBjb25zdCBsYiA9ICQoJzxicj4nKTtcclxuICAgICAgY29pbmNvbC5hcHBlbmQoc3BhbjIpO1xyXG4gICAgICBjb2luY29sLmFwcGVuZChsYik7XHJcbiAgICAgIGNvaW5jb2wuYXBwZW5kKHNwYW4xKTtcclxuICAgICAgaWYgKGV4Y2hhbmdlLnRvTG93ZXJDYXNlKCkgPT09IGJhc2VleGNoYW5nZW5hbWUpIHtcclxuICAgICAgICBjb2luY29sLmFkZENsYXNzKCdoaWdobGlnaHQnKTtcclxuICAgICAgfVxyXG4gICAgICBjb2lucm93LmFwcGVuZChjb2luY29sKTtcclxuICAgIH0pO1xyXG4gICAgdGFibGVCb2R5LmFwcGVuZChjb2lucm93KTtcclxuICB9KTtcclxuICAkKCcjbWFpbl9kYXRhX3RhYmxlJykuYWRkQ2xhc3MoJ3RhYmxlLXN0cmlwZWQnKTtcclxuXHJcbiAgY29uc3Qgc3RvcmVkRmF2TGlzdCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmYXZMaXN0JykgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmYXZMaXN0JykpIDogW107XHJcbiAgc3RvcmVkRmF2TGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICBjb25zdCBmYXZkaXYgPSAkKCcjJyArIGl0ZW0gKyAnIHRkJykuZmlyc3QoKTtcclxuICAgIGNvbnN0IHN0YXJkaXYgPSAkKGZhdmRpdikuY2hpbGRyZW4oKVswXTtcclxuICAgICQoc3RhcmRpdikudG9nZ2xlQ2xhc3MoJ2ZhLXN0YXItbyBmYS1zdGFyJyk7XHJcbiAgfSk7XHJcblxyXG5cclxuICBsZXQgc3RvcmVkQWxlcnRzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWxlcnRzJykpIDogW107XHJcbiAgYWxlcnRzU3RvcmUuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgIHN0b3JlZEFsZXJ0cyA9IGFsZXJ0c1N0b3JlLmdldFN0YXRlKCk7XHJcbiAgICBzdG9yZWRBbGVydHMuZm9yRWFjaCgoYWxlcnQpID0+IHtcclxuICAgICAgY29uc3QgYWxlcnRDb2lucyA9IGFsZXJ0LmFsZXJ0Q29pbnM7XHJcbiAgICAgIGFsZXJ0Q29pbnMuZm9yRWFjaCgoY29pbikgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGV4Y2hhbmdlTGlzdC5maWx0ZXIoKGV4Y2hhbmdlKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBwciA9IGN1cnJlbnRQcmF0aW9bY29pbl1bZXhjaGFuZ2VdO1xyXG4gICAgICAgICAgaWYgKHByID09PSAwIHx8IGV4Y2hhbmdlID09PSBiYXNlZXhjaGFuZ2VuYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGFsZXJ0Lmxvd2VyVGhyIDwgMCAmJiBhbGVydC51cHBlclRociA+IDApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKHByIDw9IGFsZXJ0Lmxvd2VyVGhyIHx8IHByID49IGFsZXJ0LnVwcGVyVGhyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxlcnQubG93ZXJUaHIgPiAwICYmIGFsZXJ0LnVwcGVyVGhyID4gMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAocHIgPj0gYWxlcnQubG93ZXJUaHIgJiYgcHIgPD0gYWxlcnQudXBwZXJUaHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbGVydC5sb3dlclRociA8IDAgJiYgYWxlcnQudXBwZXJUaHIgPCAwKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChwciA+PSBhbGVydC5sb3dlclRociAmJiBwciA8PSBhbGVydC51cHBlclRocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFsZXJ0Lmxvd2VyVGhyID4gMCAmJiBhbGVydC51cHBlclRociA8IDApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKHByIDw9IGFsZXJ0Lmxvd2VyVGhyIHx8IHByID49IGFsZXJ0LnVwcGVyVGhyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IHNob3VsZENoYW5nZSA9ICQoJyMnICsgYWxlcnQuYWxlcnRJRCkuaGFzQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgY29uc3QgZmlsbGlzdCA9ICQoJyMnICsgYWxlcnQuYWxlcnRJRCkuZGF0YSgnZmlsdGVyZWQnKTtcclxuICAgICAgICAgIGxldCBkaWZmZXJlbnRMaXN0O1xyXG4gICAgICAgICAgaWYgKGZpbGxpc3QpIHtcclxuICAgICAgICAgICAgZGlmZmVyZW50TGlzdCA9IGZpbGxpc3QubGVuZ3RoICE9PSBmaWx0ZXJlZC5sZW5ndGg7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkaWZmZXJlbnRMaXN0ID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICghc2hvdWxkQ2hhbmdlIHx8IGRpZmZlcmVudExpc3QpIHtcclxuICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICQoJyMnICsgYWxlcnQuYWxlcnRJRCArICcgcC5lbGlzdCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBlbGlzdCA9ICQoJzxwPicsIHsgY2xhc3M6IFwiZWxpc3RcIiwgaHRtbDogJ0ZvciAnICsgZmlsdGVyZWQuam9pbignLCAnKSB9KTtcclxuICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEKS5kYXRhKCdmaWx0ZXJlZCcsIGZpbHRlcmVkKTtcclxuICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEKS5hcHBlbmQoZWxpc3QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBzaG91bGRDaGFuZ2UgPSAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmhhc0NsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgIGlmIChzaG91bGRDaGFuZ2UpIHtcclxuICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICQoJyMnICsgYWxlcnQuYWxlcnRJRCArICcgcC5lbGlzdCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLnJlbW92ZURhdGEoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBsZXQgYmFzZXZhbHVlcyA9IGNvaW5zTGlzdC5yZWR1Y2UoKGFjY3UsIGl0ZW0pID0+IHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjY3UsIHsgW2l0ZW1dOiAwIH0pO1xyXG4gIH0sIHt9KTtcclxuICBsZXQgY3VycmVudFByaWNlID0gY29pbnNMaXN0LnJlZHVjZSgoYWNjdTEsIGNvaW4pID0+IHtcclxuICAgIGNvbnN0IG9iajEgPSBleGNoYW5nZUxpc3QucmVkdWNlKChhY2N1MiwgZXhjaGFuZ2UpID0+IHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjdTIsIHsgW2V4Y2hhbmdlXTogMCB9KTtcclxuICAgIH0sIHt9KTtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjY3UxLCB7IFtjb2luXTogb2JqMSB9KTtcclxuICB9LCB7fSk7XHJcbiAgbGV0IGN1cnJlbnRQcmF0aW8gPSBjb2luc0xpc3QucmVkdWNlKChhY2N1MSwgY29pbikgPT4ge1xyXG4gICAgY29uc3Qgb2JqMSA9IGV4Y2hhbmdlTGlzdC5yZWR1Y2UoKGFjY3UyLCBleGNoYW5nZSkgPT4ge1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2N1MiwgeyBbZXhjaGFuZ2VdOiAwIH0pO1xyXG4gICAgfSwge30pO1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjdTEsIHsgW2NvaW5dOiBvYmoxIH0pO1xyXG4gIH0sIHt9KTtcclxuXHJcbiAgJCgnI2V4Y2hhbmdlIGEnKS5jbGljaygoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZWxlbSA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IGltZ2VsZW0gPSBlbGVtLmh0bWwoKTtcclxuICAgIGNvbnN0IGV4Y2hhbmdlVkFMID0gJChpbWdlbGVtKS5hdHRyKCdhbHQnKTtcclxuICAgIGNvbnN0IG9sZGV4Y2hhbmdlbmFtZSA9IGJhc2VleGNoYW5nZW5hbWU7XHJcbiAgICBpZiAoZXhjaGFuZ2VMaXN0LmluY2x1ZGVzKGV4Y2hhbmdlVkFMLnRvVXBwZXJDYXNlKCkpID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9O1xyXG4gICAgYmFzZV9leGNoYW5nZV9idXR0b24uaHRtbChlbGVtLmh0bWwoKSk7XHJcbiAgICBiYXNlX2V4Y2hhbmdlX2J1dHRvbi52YWwoZXhjaGFuZ2VWQUwudG9VcHBlckNhc2UoKSk7XHJcbiAgICBiYXNlZXhjaGFuZ2VuYW1lID0gZXhjaGFuZ2VWQUwudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICBjb2luc0xpc3QuZm9yRWFjaCgoY29pbikgPT4ge1xyXG4gICAgICBiYXNldmFsdWVzW2NvaW5dID0gY3VycmVudFByaWNlW2NvaW5dW2Jhc2VleGNoYW5nZW5hbWVdO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvaW5zTGlzdC5mb3JFYWNoKChjb2luKSA9PiB7XHJcbiAgICAgIGNvbnN0IGJhc2VwcmljZSA9IGJhc2V2YWx1ZXNbY29pbl07XHJcblxyXG4gICAgICBleGNoYW5nZUxpc3QuZm9yRWFjaCgoZXhjaGFuZ2UpID0+IHtcclxuICAgICAgICBjb25zdCBwcmljZSA9IGN1cnJlbnRQcmljZVtjb2luXVtleGNoYW5nZV07XHJcbiAgICAgICAgY29uc3QgZGl2bmFtZSA9IGV4Y2hhbmdlLnRvTG93ZXJDYXNlKCkgKyAnXycgKyBjb2luLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgY29uc3QgZGl2bmFtZXAgPSBkaXZuYW1lICsgJ19wJztcclxuICAgICAgICBjb25zdCBwYXJlbnRjZWxsID0gJCgnIycgKyBkaXZuYW1lcCkucGFyZW50KCk7XHJcbiAgICAgICAgaWYgKG9sZGV4Y2hhbmdlbmFtZS50b0xvd2VyQ2FzZSgpID09PSBleGNoYW5nZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICBjb25zdCBwYXJlbnRjZWxsID0gJCgnIycgKyBkaXZuYW1lcCkucGFyZW50KCk7XHJcbiAgICAgICAgICBwYXJlbnRjZWxsLnJlbW92ZUNsYXNzKCdoaWdobGlnaHQnKTtcclxuICAgICAgICAgICQoJyMnICsgb2xkZXhjaGFuZ2VuYW1lLnRvVXBwZXJDYXNlKCkgKyAnX2NvbCcpLnJlbW92ZUNsYXNzKCdoaWdobGlnaHQtdG9wJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiYXNlZXhjaGFuZ2VuYW1lID09PSBleGNoYW5nZSkge1xyXG4gICAgICAgICAgY29uc3QgcGFyZW50Y2VsbCA9ICQoJyMnICsgZGl2bmFtZXApLnBhcmVudCgpO1xyXG4gICAgICAgICAgcGFyZW50Y2VsbC5hZGRDbGFzcygnaGlnaGxpZ2h0Jyk7XHJcbiAgICAgICAgICAkKCcjJyArIGV4Y2hhbmdlICsgJ19jb2wnKS5hZGRDbGFzcygnaGlnaGxpZ2h0LXRvcCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJhc2VwcmljZSAhPT0gMCAmJiBwcmljZSAhPT0gMCkge1xyXG4gICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5lbXB0eSgpO1xyXG4gICAgICAgICAgJCgnIycgKyBkaXZuYW1lcCkuZW1wdHkoKTtcclxuICAgICAgICAgIGlmIChleGNoYW5nZS50b0xvd2VyQ2FzZSgpICE9PSBiYXNlZXhjaGFuZ2VuYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJhdGlvID0gKChwcmljZSAvIGJhc2VwcmljZSkgLSAxKSAqIDEwMDtcclxuICAgICAgICAgICAgY3VycmVudFByYXRpb1tjb2luLnRvVXBwZXJDYXNlKCldW2V4Y2hhbmdlXSA9IHByYXRpbztcclxuICAgICAgICAgICAgaWYgKHByYXRpbyA8IDApIHtcclxuICAgICAgICAgICAgICAkKCcjJyArIGRpdm5hbWUpLmFkZENsYXNzKCd0ZXh0LXJlZCcpO1xyXG4gICAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkucmVtb3ZlQ2xhc3MoJ3RleHQtZ3JlZW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkKCcjJyArIGRpdm5hbWUpLmFkZENsYXNzKCd0ZXh0LWdyZWVuJyk7XHJcbiAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5yZW1vdmVDbGFzcygndGV4dC1yZWQnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS50ZXh0KHByYXRpby50b0ZpeGVkKDIpICsgJyAlJyk7XHJcbiAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZXApLnRleHQoY3VycmVuY3lTeW1ib2xzW2Jhc2VjdXJyZW5jeW5hbWUudG9VcHBlckNhc2UoKV0gKyBwcmljZS50b0ZpeGVkKDIpKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZXApLnRleHQoY3VycmVuY3lTeW1ib2xzW2Jhc2VjdXJyZW5jeW5hbWUudG9VcHBlckNhc2UoKV0gKyBwcmljZS50b0ZpeGVkKDIpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHByaWNlICE9PSAwICYmIGJhc2VwcmljZSA9PT0gMCkge1xyXG4gICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS50ZXh0KCctLScpO1xyXG4gICAgICAgICAgJCgnIycgKyBkaXZuYW1lcCkudGV4dChjdXJyZW5jeVN5bWJvbHNbYmFzZWN1cnJlbmN5bmFtZS50b1VwcGVyQ2FzZSgpXSArIHByaWNlLnRvRml4ZWQoMikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkudGV4dCgnLS0nKTtcclxuICAgICAgICAgICQoJyMnICsgZGl2bmFtZXApLnRleHQoJy0tJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGdldEFsZXJ0cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbGVydHMnKSA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKSA6IFtdO1xyXG5cclxuICAgIGdldEFsZXJ0cy5mb3JFYWNoKChhbGVydCkgPT4ge1xyXG4gICAgICBjb25zdCBhbGVydENvaW5zID0gYWxlcnQuYWxlcnRDb2lucztcclxuICAgICAgYWxlcnRDb2lucy5mb3JFYWNoKChjb2luKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gZXhjaGFuZ2VMaXN0LmZpbHRlcigoZXhjaGFuZ2UpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHByID0gY3VycmVudFByYXRpb1tjb2luXVtleGNoYW5nZV07XHJcbiAgICAgICAgICBpZiAocHIgPT09IDAgfHwgZXhjaGFuZ2UgPT09IGJhc2VleGNoYW5nZW5hbWUudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYWxlcnQubG93ZXJUaHIgPCAwICYmIGFsZXJ0LnVwcGVyVGhyID4gMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAocHIgPD0gYWxlcnQubG93ZXJUaHIgfHwgcHIgPj0gYWxlcnQudXBwZXJUaHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbGVydC5sb3dlclRociA+IDAgJiYgYWxlcnQudXBwZXJUaHIgPiAwKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChwciA+PSBhbGVydC5sb3dlclRociAmJiBwciA8PSBhbGVydC51cHBlclRocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFsZXJ0Lmxvd2VyVGhyIDwgMCAmJiBhbGVydC51cHBlclRociA8IDApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKHByID49IGFsZXJ0Lmxvd2VyVGhyICYmIHByIDw9IGFsZXJ0LnVwcGVyVGhyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxlcnQubG93ZXJUaHIgPiAwICYmIGFsZXJ0LnVwcGVyVGhyIDwgMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAocHIgPD0gYWxlcnQubG93ZXJUaHIgfHwgcHIgPj0gYWxlcnQudXBwZXJUaHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZmlsdGVyZWQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY29uc3Qgc2hvdWxkQ2hhbmdlID0gJCgnIycgKyBhbGVydC5hbGVydElEKS5oYXNDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICBjb25zdCBmaWxsaXN0ID0gJCgnIycgKyBhbGVydC5hbGVydElEKS5kYXRhKCdmaWx0ZXJlZCcpO1xyXG4gICAgICAgICAgbGV0IGRpZmZlcmVudExpc3Q7XHJcbiAgICAgICAgICBpZiAoZmlsbGlzdCkge1xyXG4gICAgICAgICAgICBkaWZmZXJlbnRMaXN0ID0gZmlsbGlzdC5sZW5ndGggIT09IGZpbHRlcmVkLmxlbmd0aDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRpZmZlcmVudExpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCFzaG91bGRDaGFuZ2UgfHwgZGlmZmVyZW50TGlzdCkge1xyXG4gICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEICsgJyBwLmVsaXN0JykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsaXN0ID0gJCgnPHA+JywgeyBjbGFzczogXCJlbGlzdFwiLCBodG1sOiAnRm9yICcgKyBmaWx0ZXJlZC5qb2luKCcsICcpIH0pO1xyXG4gICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmRhdGEoJ2ZpbHRlcmVkJywgZmlsdGVyZWQpO1xyXG4gICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmFwcGVuZChlbGlzdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHNob3VsZENoYW5nZSA9ICQoJyMnICsgYWxlcnQuYWxlcnRJRCkuaGFzQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgaWYgKHNob3VsZENoYW5nZSkge1xyXG4gICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEICsgJyBwLmVsaXN0JykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICQoJyMnICsgYWxlcnQuYWxlcnRJRCkucmVtb3ZlRGF0YSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG5cclxuICAkKCcjY3VycmVuY3kgYScpLmNsaWNrKChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBleGNuYW1lID0gYmFzZWV4Y2hhbmdlbmFtZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgaWYgKGV4Y2hhbmdlTGlzdC5pbmNsdWRlcyhleGNuYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG9sZGJhc2VjdXJyZW5jeW5hbWUgPSBiYXNlY3VycmVuY3luYW1lO1xyXG4gICAgY29uc3QgZWxlbSA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICQoJyNkcm9wZG93bkJhc2VDdXJyZW5jeScpLmRyb3Bkb3duKCd0b2dnbGUnKTtcclxuICAgIGNvbnN0IGltZ2VsZW0gPSBlbGVtLmh0bWwoKTtcclxuICAgIGNvbnN0IGN1cnJlbmN5VkFMID0gJChpbWdlbGVtKS5hdHRyKCdhbHQnKTtcclxuICAgIGJhc2VfY3VycmVuY3lfYnV0dG9uLmh0bWwoZWxlbS5odG1sKCkpO1xyXG4gICAgYmFzZV9jdXJyZW5jeV9idXR0b24udmFsKGN1cnJlbmN5VkFMLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xvY2FsYmFzZWN1cnJlbmN5JywgY3VycmVuY3lWQUwudG9Mb3dlckNhc2UoKSk7XHJcbiAgICBiYXNlY3VycmVuY3luYW1lID0gY3VycmVuY3lWQUwudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IG9sZHJhdGUgPSBjdXJyZW50Rm9yZXhEYXRhLnJhdGVzW2N1cnJlbmN5RGV0YWlsc1tvbGRiYXNlY3VycmVuY3luYW1lXVsnc25hbWUnXV07XHJcbiAgICBjb25zdCBuZXdyYXRlID0gY3VycmVudEZvcmV4RGF0YS5yYXRlc1tjdXJyZW5jeURldGFpbHNbYmFzZWN1cnJlbmN5bmFtZV1bJ3NuYW1lJ11dO1xyXG5cclxuICAgIGNvaW5zTGlzdC5mb3JFYWNoKChjb2luKSA9PiB7XHJcbiAgICAgIGJhc2V2YWx1ZXNbY29pbl0gPSBjdXJyZW50UHJpY2VbY29pbl1bZXhjbmFtZV0gKiBuZXdyYXRlIC8gb2xkcmF0ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvaW5zTGlzdC5mb3JFYWNoKChjb2luKSA9PiB7XHJcbiAgICAgIGNvbnN0IGJhc2VwcmljZSA9IGJhc2V2YWx1ZXNbY29pbl07XHJcbiAgICAgIGV4Y2hhbmdlTGlzdC5mb3JFYWNoKChleGNoYW5nZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9sZHByaWNlID0gY3VycmVudFByaWNlW2NvaW5dW2V4Y2hhbmdlXTtcclxuICAgICAgICBjb25zdCBuZXdwcmljZSA9IG9sZHByaWNlICogbmV3cmF0ZSAvIG9sZHJhdGU7XHJcbiAgICAgICAgY3VycmVudFByaWNlW2NvaW5dW2V4Y2hhbmdlXSA9IG5ld3ByaWNlO1xyXG4gICAgICAgIGNvbnN0IGRpdm5hbWUgPSBleGNoYW5nZS50b0xvd2VyQ2FzZSgpICsgJ18nICsgY29pbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IGRpdm5hbWVwID0gZGl2bmFtZSArICdfcCc7XHJcblxyXG4gICAgICAgIGlmIChiYXNlcHJpY2UgIT09IDAgJiYgbmV3cHJpY2UgIT09IDApIHtcclxuICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkuZW1wdHkoKTtcclxuICAgICAgICAgICQoJyMnICsgZGl2bmFtZXApLmVtcHR5KCk7XHJcbiAgICAgICAgICBpZiAoZXhjaGFuZ2UudG9Mb3dlckNhc2UoKSAhPT0gYmFzZWV4Y2hhbmdlbmFtZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByYXRpbyA9ICgobmV3cHJpY2UgLyBiYXNlcHJpY2UpIC0gMSkgKiAxMDA7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQcmF0aW9bY29pbi50b1VwcGVyQ2FzZSgpXVtleGNoYW5nZV0gPSBwcmF0aW87XHJcbiAgICAgICAgICAgIGlmIChwcmF0aW8gPCAwKSB7XHJcbiAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5hZGRDbGFzcygndGV4dC1yZWQnKTtcclxuICAgICAgICAgICAgICAkKCcjJyArIGRpdm5hbWUpLnJlbW92ZUNsYXNzKCd0ZXh0LWdyZWVuJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5hZGRDbGFzcygndGV4dC1ncmVlbicpO1xyXG4gICAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkucmVtb3ZlQ2xhc3MoJ3RleHQtcmVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkudGV4dChwcmF0aW8udG9GaXhlZCgyKSArICcgJScpO1xyXG4gICAgICAgICAgICAkKCcjJyArIGRpdm5hbWVwKS50ZXh0KGN1cnJlbmN5U3ltYm9sc1tiYXNlY3VycmVuY3luYW1lLnRvVXBwZXJDYXNlKCldICsgbmV3cHJpY2UudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjJyArIGRpdm5hbWVwKS50ZXh0KGN1cnJlbmN5U3ltYm9sc1tiYXNlY3VycmVuY3luYW1lLnRvVXBwZXJDYXNlKCldICsgbmV3cHJpY2UudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZXdwcmljZSAhPT0gMCAmJiBiYXNlcHJpY2UgPT09IDApIHtcclxuICAgICAgICAgICQoJyNkaXZuYW1lJykudGV4dCgnLS0nKTtcclxuICAgICAgICAgICQoJyNkaXZuYW1lcCcpLnRleHQoY3VycmVuY3lTeW1ib2xzW2Jhc2VjdXJyZW5jeW5hbWUudG9VcHBlckNhc2UoKV0gKyBuZXdwcmljZS50b0ZpeGVkKDIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAkKCcjJyArIGRpdm5hbWUpLnRleHQoJy0tJyk7XHJcbiAgICAgICAgICAkKCcjJyArIGRpdm5hbWVwKS50ZXh0KCctLScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgdmFyIGFkZENvdW50ID0gMTtcclxuICB2YXIgc3RyMT0nJztcclxuICAkKCcuYWRkLW1vcmUtcmFuZ2UnKS5jbGljaygoZSkgPT4gIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHN0cjEgPSBgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgYWRkcmFuZ2VcIiBpZD1cInJhbmdlLXJvdy1gKyBhZGRDb3VudCArYFwiPiA8ZGl2IGNsYXNzPVwibWItMyBwci0zXCI+IDxsYWJlbCBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnRcIj5NaW4gKCUpOjwvbGFiZWw+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJtaW4tdmFsdWUtYCsgYWRkQ291bnQgK2BcIiBzdHlsZT1cIndpZHRoOiA4MHB4O2hlaWdodDogMzVweDtcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cInByLTNcIj4gPHNwYW4+VE88L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVwibWItMyBwci0zXCI+IDxsYWJlbCBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnRcIj5NYXggKCUpIDo8L2xhYmVsPiA8aW5wdXQgdHlwZT1cIm51bWJlclwiICBpZD1cIm1heC12YWx1ZS1gKyBhZGRDb3VudCArYFwiIHN0eWxlPVwid2lkdGg6IDgwcHg7aGVpZ2h0OiAzNXB4O1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVwibWItMyBwci0zXCI+IDwhLS0gPGxhYmVsIGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1zdGFydFwiPkNob29zZSBjb2xvciA6PC9sYWJlbD4gLS0+IDxpbnB1dCB0eXBlPVwiY29sb3JcIiBpZD1cInNldC1jb2xvci1gKyBhZGRDb3VudCArYFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHAtMCBtdC00IGJvcmRlci0wIHJvdW5kZWQtY2lyY2xlIHNlbGVjdGNvbG9yXCIgc3R5bGU9XCJib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XCI+IDwvZGl2PjwvZGl2PmA7XHJcbiAgICAvLyAgPGRpdj4gPGJ1dHRvbiBzdHlsZT1cImZvbnQtc2l6ZTogMjJweDtcIiBjbGFzcz1cImJ0biBtdC0yIGJnLXRyYW5zcGFyZW50IHAtMCBkZWxldGUtbW9yZS1yYW5nZS1gK2FkZENvdW50K2BcIj48aSBjbGFzcz1cInRleHQtcmVkIGZhIGZhLXRyYXNoXCI+PC9pPjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+YDtcclxuICAgIHZhciBmaW5hbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOyAvLyBpcyB0aGUgbm9kZVxyXG4gICAgZmluYWxEaXYuaW5uZXJIVE1MID0gc3RyMTtcclxuICAgIGFkZENvdW50Kys7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJhbmdlLXBlcmNlbnRcIilbMF0uYXBwZW5kQ2hpbGQoZmluYWxEaXYpO1xyXG4gICAgLy8gJCgnI2Ryb3Bkb3duTWVudUxpbmsnKS50cmlnZ2VyKCdjbGljaycpO1xyXG5cclxufSk7XHJcblxyXG4gIHZhciBtaW5yYW5nZSA9IFtdO1xyXG4gIHZhciBtYXhyYW5nZSA9IFtdO1xyXG4gIHZhciBjb2xvciA9IFtdO1xyXG5cclxuICAkKCcjY2hhbmdlLWNvbG9yJykuY2xpY2soKGUpPT57XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB2YXIgY2xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhZGRyYW5nZScpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG1pbnJhbmdlLnB1c2goZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG1pbi12YWx1ZS1gKyBpICtgYCkudmFsdWUpO1xyXG4gICAgICAgIG1heHJhbmdlLnB1c2goZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG1heC12YWx1ZS1gKyBpICtgYCkudmFsdWUpO1xyXG4gICAgICAgIGNvbG9yLnB1c2goZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNldC1jb2xvci1gKyBpICtgYCkudmFsdWUpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKCcjY2FuY2VsLWNvbG9yJykuY2xpY2soKGUpPT57XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB2YXIgc3RyPSAnJztcclxuICAgIHN0ciA9ICc8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBhZGRyYW5nZVwiIGlkPVwicmFuZ2Utcm93LTBcIj4gPGRpdiBjbGFzcz1cIm1iLTMgcHItM1wiPiA8bGFiZWwgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0XCI+TWluICglKTo8L2xhYmVsPiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPVwibWluLXZhbHVlLTBcIiBzdHlsZT1cIndpZHRoOiA4MHB4O2hlaWdodDogMzVweDtcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cInByLTNcIj4gPHNwYW4+VE88L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVwibWItMyBwci0zXCI+IDxsYWJlbCBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnRcIj5NYXggKCUpIDo8L2xhYmVsPiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPVwibWF4LXZhbHVlLTBcIiBzdHlsZT1cIndpZHRoOiA4MHB4O2hlaWdodDogMzVweDtcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cIm1iLTMgcHItM1wiPiA8aW5wdXQgdHlwZT1cImNvbG9yXCIgaWQ9XCJzZXQtY29sb3ItMFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHAtMCBtdC00IGJvcmRlci0wIHJvdW5kZWQtY2lyY2xlIHNlbGVjdGNvbG9yXCIgc3R5bGU9XCJib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XCI+IDwvZGl2PiA8L2Rpdj4nO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJhbmdlLXBlcmNlbnRcIilbMF0uaW5uZXJIVE1MID0gc3RyO1xyXG4gICAgbWlucmFuZ2UgPSBbXTtcclxuICAgIG1heHJhbmdlID0gW107XHJcbiAgICBjb2xvciA9IFtdO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBwcm9jZXNzTWVzc2FnZSA9IChtc2cpID0+IHtcclxuICAgIGNvbnN0IHsgdHlwZSwgaW5mbyB9ID0gSlNPTi5wYXJzZShtc2cuZGF0YSk7XHJcbiAgICBpZiAodHlwZSA9PT0gJ2ZvcmV4Jykge1xyXG4gICAgICBjdXJyZW50Rm9yZXhEYXRhID0gaW5mbztcclxuICAgIH1cclxuICAgIGlmICh0eXBlID09PSAnY3J5cHRvJyB8fCB0eXBlID09PSAnc25hcHNob3QnKSB7XHJcblxyXG4gICAgICBpZiAoIWNvaW5zTGlzdC5pbmNsdWRlcyhpbmZvLnVpZCkgfHwgIWV4Y2hhbmdlTGlzdC5pbmNsdWRlcyhpbmZvLmV4Y2hhbmdlKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWN1cnJlbmN5TGlzdC5pbmNsdWRlcyhpbmZvLmJhc2VfY3VycmVuY3kpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpZG5hbWUgPSBpbmZvLmV4Y2hhbmdlLnRvTG93ZXJDYXNlKCkgKyAnXycgKyBpbmZvLnVpZC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBjb25zdCBpZG5hbWVwID0gaWRuYW1lICsgJ19wJztcclxuICAgICAgaWYgKGluZm8uYmFzZV9jdXJyZW5jeSAhPT0gY3VycmVuY3lEZXRhaWxzW2Jhc2VjdXJyZW5jeW5hbWVdWydzbmFtZSddICYmIGN1cnJlbnRGb3JleERhdGEpIHtcclxuICAgICAgICBpZiAoYmFzZWN1cnJlbmN5bmFtZSA9PT0gJ3VuaXRlZHN0YXRlc2RvbGxhcicpIHtcclxuICAgICAgICAgIGluZm8ucHJpY2UgPSBpbmZvLnByaWNlIC8gY3VycmVudEZvcmV4RGF0YS5yYXRlc1tpbmZvLmJhc2VfY3VycmVuY3ldO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCB1c2RyYXRlID0gY3VycmVudEZvcmV4RGF0YS5yYXRlc1tpbmZvLmJhc2VfY3VycmVuY3ldO1xyXG4gICAgICAgICAgY29uc3Qgb3RoZXJyYXRlID0gY3VycmVudEZvcmV4RGF0YS5yYXRlc1tjdXJyZW5jeURldGFpbHNbYmFzZWN1cnJlbmN5bmFtZV1bJ3NuYW1lJ11dO1xyXG4gICAgICAgICAgaW5mby5wcmljZSA9IGluZm8ucHJpY2UgKiBvdGhlcnJhdGUgLyB1c2RyYXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoaW5mby5leGNoYW5nZS50b0xvd2VyQ2FzZSgpID09PSBiYXNlZXhjaGFuZ2VuYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICBiYXNldmFsdWVzW2luZm8udWlkXSA9IGluZm8ucHJpY2U7XHJcbiAgICAgICAgaWYgKGluZm8ucHJpY2UgIT09IDApIHtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhjaGFuZ2VMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJpY2VbaW5mby51aWRdW2V4Y2hhbmdlTGlzdFtpXV0gIT09IDApIHtcclxuICAgICAgICAgICAgICBpZiAoYmFzZWV4Y2hhbmdlbmFtZS50b0xvd2VyQ2FzZSgpICE9PSBleGNoYW5nZUxpc3RbaV0udG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJhdGlvID0gKChjdXJyZW50UHJpY2VbaW5mby51aWRdW2V4Y2hhbmdlTGlzdFtpXV0gLyBpbmZvLnByaWNlKSAtIDEpICogMTAwO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFByYXRpb1tpbmZvLnVpZF1bZXhjaGFuZ2VMaXN0W2ldXSA9IHByYXRpbztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpdm5hbWUgPSBleGNoYW5nZUxpc3RbaV0udG9Mb3dlckNhc2UoKSArICdfJyArIGluZm8udWlkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXZuYW1lcCA9IGRpdm5hbWUgKyAnX3AnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwcmF0aW8gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmKG1pbnJhbmdlLmxlbmd0aCA+IDAgJiYgbWF4cmFuZ2UubGVuZ3RoID4gMCAmJiBjb2xvci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW5yYW5nZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbnJhbmdlW2ldICYmIG1heHJhbmdlW2ldICYmIHByYXRpbyA+IG1pbnJhbmdlW2ldICYmIHByYXRpbyA8IG1heHJhbmdlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkucmVtb3ZlQ2xhc3MoJ3RleHQtZ3JlZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5jc3MoXCJjb2xvclwiLGNvbG9yW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5jc3MoXCJjb2xvclwiLCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGRpdm5hbWUpLmFkZENsYXNzKCd0ZXh0LXJlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyMnICsgZGl2bmFtZSkucmVtb3ZlQ2xhc3MoJ3RleHQtZ3JlZW4nKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgaWYobWlucmFuZ2UubGVuZ3RoID4gMCAmJiBtYXhyYW5nZS5sZW5ndGggPiAwICYmIGNvbG9yLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pbnJhbmdlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobWlucmFuZ2VbaV0gJiYgbWF4cmFuZ2VbaV0gJiYgcHJhdGlvID4gbWlucmFuZ2VbaV0gJiYgcHJhdGlvIDwgbWF4cmFuZ2VbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5yZW1vdmVDbGFzcygndGV4dC1yZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5jc3MoXCJjb2xvclwiLGNvbG9yW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5jc3MoXCJjb2xvclwiLCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGRpdm5hbWUpLmFkZENsYXNzKCd0ZXh0LWdyZWVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS5yZW1vdmVDbGFzcygndGV4dC1yZWQnKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJCgnIycgKyBkaXZuYW1lKS50ZXh0KHByYXRpby50b0ZpeGVkKDIpICsgJyAlJyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGRpdm5hbWVwKS50ZXh0KGN1cnJlbmN5U3ltYm9sc1tiYXNlY3VycmVuY3luYW1lLnRvVXBwZXJDYXNlKCldICsgY3VycmVudFByaWNlW2luZm8udWlkXVtleGNoYW5nZUxpc3RbaV1dLnRvRml4ZWQoMikpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChiYXNldmFsdWVzW2luZm8udWlkXSAhPT0gMCAmJiBiYXNlZXhjaGFuZ2VuYW1lICE9PSBpbmZvLmV4Y2hhbmdlKSB7XHJcbiAgICAgICAgY29uc3QgcHJhdGlvID0gKChpbmZvLnByaWNlIC8gYmFzZXZhbHVlc1tpbmZvLnVpZF0pIC0gMSkgKiAxMDA7XHJcbiAgICAgICAgY3VycmVudFByYXRpb1tpbmZvLnVpZC50b1VwcGVyQ2FzZSgpXVtpbmZvLmV4Y2hhbmdlXSA9IHByYXRpbztcclxuICAgICAgICAvLyBpZiAocHJhdGlvIDwgMCkge1xyXG4gICAgICAgIC8vICAgJCgnIycgKyBpZG5hbWUpLmFkZENsYXNzKCd0ZXh0LXJlZCcpO1xyXG4gICAgICAgIC8vICAgJCgnIycgKyBpZG5hbWUpLnJlbW92ZUNsYXNzKCd0ZXh0LWdyZWVuJyk7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICQoJyMnICsgaWRuYW1lKS5hZGRDbGFzcygndGV4dC1ncmVlbicpO1xyXG4gICAgICAgIC8vICAgJCgnIycgKyBpZG5hbWUpLnJlbW92ZUNsYXNzKCd0ZXh0LXJlZCcpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBpZiAocHJhdGlvIDwgMCkge1xyXG4gICAgICAgICAgaWYobWlucmFuZ2UubGVuZ3RoID4gMCAmJiBtYXhyYW5nZS5sZW5ndGggPiAwICYmIGNvbG9yLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW5yYW5nZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGlmIChtaW5yYW5nZVtpXSAmJiBtYXhyYW5nZVtpXSAmJiBwcmF0aW8gPiBtaW5yYW5nZVtpXSAmJiBwcmF0aW8gPCBtYXhyYW5nZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgJCgnIycgKyBpZG5hbWUpLnJlbW92ZUNsYXNzKCd0ZXh0LWdyZWVuJyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGlkbmFtZSkuY3NzKFwiY29sb3JcIixjb2xvcltpXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJCgnIycgKyBpZG5hbWUpLmNzcyhcImNvbG9yXCIsJycpO1xyXG4gICAgICAgICAgICAkKCcjJyArIGlkbmFtZSkuYWRkQ2xhc3MoJ3RleHQtcmVkJyk7XHJcbiAgICAgICAgICAgICQoJyMnICsgaWRuYW1lKS5yZW1vdmVDbGFzcygndGV4dC1ncmVlbicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZihtaW5yYW5nZS5sZW5ndGggPiAwICYmIG1heHJhbmdlLmxlbmd0aCA+IDAgJiYgY29sb3IubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pbnJhbmdlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgaWYgKG1pbnJhbmdlW2ldICYmIG1heHJhbmdlW2ldICYmIHByYXRpbyA+IG1pbnJhbmdlW2ldICYmIHByYXRpbyA8IG1heHJhbmdlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGlkbmFtZSkucmVtb3ZlQ2xhc3MoJ3RleHQtcmVkJyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGlkbmFtZSkuY3NzKFwiY29sb3JcIixjb2xvcltpXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJCgnIycgKyBpZG5hbWUpLmNzcyhcImNvbG9yXCIsJycpO1xyXG4gICAgICAgICAgICAkKCcjJyArIGlkbmFtZSkuYWRkQ2xhc3MoJ3RleHQtZ3JlZW4nKTtcclxuICAgICAgICAgICAgJCgnIycgKyBpZG5hbWUpLnJlbW92ZUNsYXNzKCd0ZXh0LXJlZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAkKCcjJyArIGlkbmFtZSkudGV4dChwcmF0aW8udG9GaXhlZCgyKSArICcgJScpO1xyXG4gICAgICB9XHJcbiAgICAgICQoJyMnICsgaWRuYW1lcCkudGV4dChjdXJyZW5jeVN5bWJvbHNbYmFzZWN1cnJlbmN5bmFtZS50b1VwcGVyQ2FzZSgpXSArIGluZm8ucHJpY2UudG9GaXhlZCgyKSk7XHJcbiAgICAgIC8vICQoJyMnK2lkbmFtZXApLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjogJ3JlZCd9LCAnZmFzdCcsICgpID0+IHtcclxuICAgICAgLy8gICAkKCcjJytpZG5hbWVwKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZSd9LCAnZmFzdCcpO1xyXG4gICAgICAvLyB9KTtcclxuICAgICAgLy8gY29uc3QgcGFyZW50Y2VsbCA9ICQoJyMnK2lkbmFtZXApLnBhcmVudCgpO1xyXG4gICAgICAvLyBwYXJlbnRjZWxsLmFkZENsYXNzKCd1cGRhdGVkJyk7XHJcbiAgICAgIC8vIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgLy8gICBwYXJlbnRjZWxsLnJlbW92ZUNsYXNzKCd1cGRhdGVkJyk7XHJcbiAgICAgIC8vIH0sIDExMDApO1xyXG4gICAgICBjdXJyZW50UHJpY2VbaW5mby51aWRdW2luZm8uZXhjaGFuZ2VdID0gaW5mby5wcmljZTtcclxuXHJcbiAgICAgIGNvbnN0IGdldEFsZXJ0cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbGVydHMnKSA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FsZXJ0cycpKSA6IFtdO1xyXG5cclxuICAgICAgZ2V0QWxlcnRzLmZvckVhY2goKGFsZXJ0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWxlcnRDb2lucyA9IGFsZXJ0LmFsZXJ0Q29pbnM7XHJcbiAgICAgICAgYWxlcnRDb2lucy5mb3JFYWNoKChjb2luKSA9PiB7XHJcbiAgICAgICAgICBpZiAoaW5mby51aWQgPT09IGNvaW4pIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBleGNoYW5nZUxpc3QuZmlsdGVyKChleGNoYW5nZSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHByID0gY3VycmVudFByYXRpb1tjb2luXVtleGNoYW5nZV07XHJcbiAgICAgICAgICAgICAgaWYgKHByID09PSAwIHx8IGV4Y2hhbmdlID09PSBiYXNlZXhjaGFuZ2VuYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsZXJ0Lmxvd2VyVGhyIDwgMCAmJiBhbGVydC51cHBlclRociA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChwciA8PSBhbGVydC5sb3dlclRociB8fCBwciA+PSBhbGVydC51cHBlclRocik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxlcnQubG93ZXJUaHIgPiAwICYmIGFsZXJ0LnVwcGVyVGhyID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKHByID49IGFsZXJ0Lmxvd2VyVGhyICYmIHByIDw9IGFsZXJ0LnVwcGVyVGhyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbGVydC5sb3dlclRociA8IDAgJiYgYWxlcnQudXBwZXJUaHIgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiAocHIgPj0gYWxlcnQubG93ZXJUaHIgJiYgcHIgPD0gYWxlcnQudXBwZXJUaHIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFsZXJ0Lmxvd2VyVGhyID4gMCAmJiBhbGVydC51cHBlclRociA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChwciA8PSBhbGVydC5sb3dlclRociB8fCBwciA+PSBhbGVydC51cHBlclRocik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb2luLCBmaWx0ZXJlZCk7XHJcbiAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkQ2hhbmdlID0gJCgnIycgKyBhbGVydC5hbGVydElEKS5oYXNDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgY29uc3QgZmlsbGlzdCA9ICQoJyMnICsgYWxlcnQuYWxlcnRJRCkuZGF0YSgnZmlsdGVyZWQnKTtcclxuICAgICAgICAgICAgICBsZXQgZGlmZmVyZW50TGlzdDtcclxuICAgICAgICAgICAgICBpZiAoZmlsbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgZGlmZmVyZW50TGlzdCA9IGZpbGxpc3QubGVuZ3RoICE9PSBmaWx0ZXJlZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRpZmZlcmVudExpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoIXNob3VsZENoYW5nZSB8fCBkaWZmZXJlbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICQoJyMnICsgYWxlcnQuYWxlcnRJRCArICcgcC5lbGlzdCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxpc3QgPSAkKCc8cD4nLCB7IGNsYXNzOiBcImVsaXN0XCIsIGh0bWw6ICdGb3IgJyArIGZpbHRlcmVkLmpvaW4oJywgJykgfSk7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmRhdGEoJ2ZpbHRlcmVkJywgZmlsdGVyZWQpO1xyXG4gICAgICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEKS5hcHBlbmQoZWxpc3QpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjb25zdCBzaG91bGRDaGFuZ2UgPSAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLmhhc0NsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICBpZiAoc2hvdWxkQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjJyArIGFsZXJ0LmFsZXJ0SUQpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICQoJyMnICsgYWxlcnQuYWxlcnRJRCArICcgcC5lbGlzdCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnIycgKyBhbGVydC5hbGVydElEKS5yZW1vdmVEYXRhKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgfTtcclxuXHJcbiAgJCgnLmZhdicpLmNsaWNrKChlKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtID0gZS5jdXJyZW50VGFyZ2V0O1xyXG4gICAgY29uc3Qgc3RhcmRpdiA9ICQoZWxlbSkuY2hpbGRyZW4oJ2knKVswXTtcclxuICAgICQoc3RhcmRpdikudG9nZ2xlQ2xhc3MoJ2ZhLXN0YXIgZmEtc3Rhci1vJyk7XHJcbiAgICBjb25zdCByb3dkaXYgPSAkKGVsZW0pLnBhcmVudCgpO1xyXG4gICAgY29uc3Qgcm93aWQgPSAkKHJvd2RpdikuYXR0cignaWQnKTtcclxuICAgIGNvbnN0IGZhdkxpc3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2TGlzdCcpID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2TGlzdCcpKSA6IFtdO1xyXG4gICAgbGV0IG5ld0xpc3Q7XHJcbiAgICBpZiAoZmF2TGlzdC5pbmNsdWRlcyhyb3dpZCkpIHtcclxuICAgICAgbmV3TGlzdCA9IGZhdkxpc3QuZmlsdGVyKChpdGVtKSA9PiB7IHJldHVybiBpdGVtICE9PSByb3dpZDsgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXdMaXN0ID0gZmF2TGlzdC5jb25jYXQoW3Jvd2lkXSk7XHJcbiAgICB9XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZmF2TGlzdCcsIEpTT04uc3RyaW5naWZ5KG5ld0xpc3QpKTtcclxuICAgIGZhdkxpc3RTdG9yZS5kaXNwYXRjaCh7IHR5cGU6ICdVUERBVEVfRkFWJyB9KTtcclxuICB9KTtcclxuXHJcbiAgJCgnI3RvZ2dsZUZhdicpLmNsaWNrKCgpID0+IHtcclxuICAgIGNvbnN0IHN0b3JlZEZhdkxpc3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2TGlzdCcpID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2TGlzdCcpKSA6IFtdO1xyXG4gICAgaWYgKHN0b3JlZEZhdkxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAkKCcjdG9nZ2xlRmF2IGknKS50b2dnbGVDbGFzcygnZmEtc3Rhci1vIGZhLXN0YXInKTtcclxuICAgICQoJyN0b2dnbGVGYXYnKS50b2dnbGVDbGFzcygnYnRuLXByaW1hcnkgYnRuLW91dGxpbmUtcHJpbWFyeScpO1xyXG4gICAgY29uc3QgZmF2U3RhdGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2U3RhdGUnKTtcclxuICAgIGlmIChmYXZTdGF0ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmYXZTdGF0ZScsIGZhbHNlKTtcclxuICAgIH0gZWxzZSBpZiAoZmF2U3RhdGUgPT09ICdmYWxzZScpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2ZhdlN0YXRlJywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBuZXdmYXZTdGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmYXZTdGF0ZScpO1xyXG5cclxuICAgIGNvbnN0IHRhYmxlcm93cyA9ICQoJyNjdXJyZW5jeXRhYmxlX2JvZHkgdHInKTtcclxuICAgIHRhYmxlcm93cy5lYWNoKChpZHgsIGVsZW0pID0+IHtcclxuXHJcbiAgICAgIC8vIGNvbnN0IGVsZW1pZCA9IGVsZW0uaWQ7XHJcbiAgICAgIGlmIChuZXdmYXZTdGF0ZSA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICQoJyMnICsgZWxlbS5pZCkuc2hvdygpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChuZXdmYXZTdGF0ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgaWYgKHN0b3JlZEZhdkxpc3QuaW5jbHVkZXMoZWxlbS5pZCkpIHtcclxuICAgICAgICAgICQoJyMnICsgZWxlbS5pZCkuc2hvdygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkKCcjJyArIGVsZW0uaWQpLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICB9KTtcclxuXHJcbiAgY29uc3Qgc29ja2V0ID0gbmV3IFdlYlNvY2tldChcIndzczovL3dzLnJvdXRlLXRoYWkuY29tL3dzXCIpO1xyXG4gIC8vIGNvbnN0IHNvY2tldCA9IG5ldyBXZWJTb2NrZXQoXCJ3czovLzEyNy4wLjAuMTo5MDAwL3dzXCIpO1xyXG4gIHNvY2tldC5vbm1lc3NhZ2UgPSAobXNnKSA9PiBwcm9jZXNzTWVzc2FnZShtc2cpO1xyXG5cclxuICAvLyBjb25zdCBzb2NrZXQyID0gbmV3IFdlYlNvY2tldChcIndzOi8vMTI3LjAuMC4xOjkwMDFcIik7XHJcbiAgY29uc3Qgc29ja2V0MiA9IG5ldyBXZWJTb2NrZXQoXCJ3c3M6Ly93cy5yb3V0ZS10aGFpLmNvbS9ub2Rld3MvXCIpO1xyXG4gIHNvY2tldDIub25tZXNzYWdlID0gKG1zZykgPT4gcHJvY2Vzc01lc3NhZ2UobXNnKTtcclxuXHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/displayCurr.js\n");

/***/ }),

/***/ "./resources/js/favListState.js":
/*!**************************************!*\
  !*** ./resources/js/favListState.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar initialState = JSON.parse(localStorage.getItem('favList'));\n\nvar favListState = function favListState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_FAV':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    case 'REMOVE_FAV':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    case 'UPDATE_FAV':\n      {\n        state = JSON.parse(localStorage.getItem('alerts'));\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (favListState);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZmF2TGlzdFN0YXRlLmpzPzc4YzEiXSwibmFtZXMiOlsiaW5pdGlhbFN0YXRlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImZhdkxpc3RTdGF0ZSIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdDLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixTQUFyQixDQUFYLENBQXJCOztBQUNBLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQWtDO0FBQUEsTUFBakNDLEtBQWlDLHVFQUF6Qk4sWUFBeUI7QUFBQSxNQUFYTyxNQUFXOztBQUNyRCxVQUFPQSxNQUFNLENBQUNDLElBQWQ7QUFDRSxTQUFLLFNBQUw7QUFDQTtBQUNFRixhQUFLLEdBQUdMLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FBWCxDQUFSO0FBQ0EsZUFBT0UsS0FBUDtBQUNEOztBQUVELFNBQUssWUFBTDtBQUNBO0FBQ0VBLGFBQUssR0FBR0wsSUFBSSxDQUFDQyxLQUFMLENBQVdDLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixRQUFyQixDQUFYLENBQVI7QUFDQSxlQUFPRSxLQUFQO0FBQ0Q7O0FBRUQsU0FBSyxZQUFMO0FBQ0E7QUFDRUEsYUFBSyxHQUFHTCxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLENBQVgsQ0FBUjtBQUNBLGVBQU9FLEtBQVA7QUFDRDs7QUFFRDtBQUNFLGFBQU9BLEtBQVA7QUFwQko7QUFzQkQsQ0F2QkQ7O0FBd0JBLGlFQUFlRCxZQUFmIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2Zhdkxpc3RTdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaXRpYWxTdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Zhdkxpc3QnKSk7XHJcbmNvbnN0IGZhdkxpc3RTdGF0ZSA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlICdBRERfRkFWJzpcclxuICAgIHtcclxuICAgICAgc3RhdGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbGVydHMnKSk7XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdSRU1PVkVfRkFWJzpcclxuICAgIHtcclxuICAgICAgc3RhdGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbGVydHMnKSk7XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBjYXNlICdVUERBVEVfRkFWJzpcclxuICAgIHtcclxuICAgICAgc3RhdGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbGVydHMnKSk7XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBmYXZMaXN0U3RhdGU7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/favListState.js\n");

/***/ }),

/***/ "./resources/js/globals.js":
/*!*********************************!*\
  !*** ./resources/js/globals.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"coinsList\": () => (/* binding */ coinsList),\n/* harmony export */   \"exchangeList\": () => (/* binding */ exchangeList),\n/* harmony export */   \"exchangeDetails\": () => (/* binding */ exchangeDetails),\n/* harmony export */   \"currencySymbols\": () => (/* binding */ currencySymbols),\n/* harmony export */   \"currencyDetails\": () => (/* binding */ currencyDetails),\n/* harmony export */   \"currencyList\": () => (/* binding */ currencyList),\n/* harmony export */   \"quoteCoinsList\": () => (/* binding */ quoteCoinsList),\n/* harmony export */   \"coinsAlertsList\": () => (/* binding */ coinsAlertsList)\n/* harmony export */ });\nvar coinsList = ['BTC', 'ETH', 'BNB', 'XRP', 'USDT', 'ADA', 'DOT', 'UNI', 'LTC', 'LINK', 'DOGE', 'BCH', 'XLM', 'THETA', 'VET', 'FIL', 'USDC', 'TRX', 'WBTC', 'EOS', 'SOL', 'KLAY', 'BSV', 'CRO', // 'MIOTA',\n'IOST', 'LUNA', 'XMR', 'ATOM', 'AAVE', 'BUSD', 'FTT', 'BTT', 'XTZ', 'AVAX', 'NEO', 'ALGO', 'KSM', 'EGLD', 'XEM', 'HT', 'RUNE', 'CAKE', 'HOT', 'BTCB', 'DAI', 'DASH', 'HBAR', 'CHZ', 'MKR', 'ZEC']; // export const exchangeList = ['BINANCE', 'COINBASE', 'BITKUB', 'GEMINI', 'BITHUMB', 'UPBIT', 'HUOBI', 'KRAKEN'];\n\nvar exchangeList = ['OKEX', 'POLONIEX', 'HUOBIKR', 'BITSTAMP', 'KUCOIN', 'BITFINEX', 'SATANGPRO', 'BINANCE', 'COINBASE', 'BITKUB', 'GEMINI', 'BITHUMB', 'UPBIT', 'HUOBI', 'KRAKEN', 'LIQUID', 'KORBIT', 'GATEIO', 'CRYPTODOTCOM', 'FTX', 'ZAIF', 'ASCENDEX', 'COINLIST', 'BIGONE', 'PROBIT', 'PROBITKR', 'BITHUMBGLOBAL', 'COINDCX', // 'LUNO',\n'EXMO', // 'ETORO',\n'OKCOIN', // 'COINCHECK',\n'BITTREX', 'BITFLYER', 'XT', 'COINFLEX', 'PARIBU', 'BITBANK', 'COINBITKR', 'BTCTURK', 'CURRENCYDOTCOM', 'COINONEKR', 'BITVAVO', 'INDODAX', 'COINEX', 'HITBTC', // 'OKEXKR',\n'BITWELLEX', 'ALTERDICE', 'DIGIFINEX', 'CEXIO', 'WHITEBIT', 'COINSBIT', 'BTCMARKETS', 'MAXEXCHANGE', 'BITCOINEX', 'KICKEX', 'BITPANDAPRO', 'COINBENE', 'COINTIGER', 'BINANCEJEX', // 'DEXTRADE',\n'TIMEX', 'NOVADAX', 'INDEPENDENTRESERVE', 'COINMETRO', 'AAX', 'P2PB2B', 'CROSSTOWER', 'BHEX'];\nvar exchangeDetails = {\n  \"BHEX\": {\n    \"img\": \"front/arbitrageimg/478.png\",\n    \"name\": \"HBTC\"\n  },\n  \"CROSSTOWER\": {\n    \"img\": \"front/arbitrageimg/1075.png\",\n    \"name\": \"CrossTower\"\n  },\n  \"P2PB2B\": {\n    \"img\": \"front/arbitrageimg/215.png\",\n    \"name\": \"P2PB2B\"\n  },\n  \"AAX\": {\n    \"img\": \"front/arbitrageimg/853.png\",\n    \"name\": \"AAX\"\n  },\n  \"COINMETRO\": {\n    \"img\": \"front/arbitrageimg/488.png\",\n    \"name\": \"CoinMetro\"\n  },\n  \"INDEPENDENTRESERVE\": {\n    \"img\": \"front/arbitrageimg/166.png\",\n    \"name\": \"Independent Reserve\"\n  },\n  \"NOVADAX\": {\n    \"img\": \"front/arbitrageimg/622.png\",\n    \"name\": \"NovaDAX\"\n  },\n  \"TIMEX\": {\n    \"img\": \"front/arbitrageimg/655.png\",\n    \"name\": \"TimeX\"\n  },\n  \"DEXTRADE\": {\n    \"img\": \"front/arbitrageimg/154.png\",\n    \"name\": \"Dex-Trade\"\n  },\n  \"BINANCEJEX\": {\n    \"img\": \"front/arbitrageimg/615.png\",\n    \"name\": \"Binance JEX\"\n  },\n  \"COINTIGER\": {\n    \"img\": \"front/arbitrageimg/391.png\",\n    \"name\": \"CoinTiger\"\n  },\n  \"COINBENE\": {\n    \"img\": \"front/arbitrageimg/343.png\",\n    \"name\": \"CoinBene\"\n  },\n  \"BITPANDAPRO\": {\n    \"img\": \"front/arbitrageimg/597.png\",\n    \"name\": \"Bitpanda Pro\"\n  },\n  'KICKEX': {\n    \"img\": \"front/arbitrageimg/1112.png\",\n    \"name\": \"KickEX\"\n  },\n  \"BITCOINEX\": {\n    \"img\": \"front/arbitrageimg/857.png\",\n    \"name\": \"Bitcoin.com Exchange\"\n  },\n  \"MAXEXCHANGE\": {\n    \"img\": \"front/arbitrageimg/868.png\",\n    \"name\": \"MAX Exchange\"\n  },\n  \"BTCMARKETS\": {\n    \"img\": \"front/arbitrageimg/224.png\",\n    \"name\": \"BTC Markets\"\n  },\n  \"COINSBIT\": {\n    \"img\": \"front/arbitrageimg/460.png\",\n    \"name\": \"Coinsbit\"\n  },\n  \"WHITEBIT\": {\n    \"img\": \"front/arbitrageimg/501.png\",\n    \"name\": \"WhiteBIT\"\n  },\n  \"CEXIO\": {\n    \"img\": \"front/arbitrageimg/36.png\",\n    \"name\": \"CEX.IO\"\n  },\n  \"DIGIFINEX\": {\n    \"img\": \"front/arbitrageimg/407.png\",\n    \"name\": \"DigiFinex\"\n  },\n  \"ALTERDICE\": {\n    \"img\": \"front/arbitrageimg/481.png\",\n    \"name\": \"Alterdice\"\n  },\n  \"BITWELLEX\": {\n    \"img\": \"front/arbitrageimg/1186.png\",\n    \"name\": \"BitWell\"\n  },\n  \"EXMARKETS\": {\n    \"img\": \"front/arbitrageimg/535.png\",\n    \"name\": \"ExMarkets\"\n  },\n  \"OKEXKR\": {\n    \"img\": \"front/arbitrageimg/490.png\",\n    \"name\": \"OKEx Korea\"\n  },\n  \"HITBTC\": {\n    \"img\": \"front/arbitrageimg/42.png\",\n    \"name\": \"HitBTC\"\n  },\n  \"COINEX\": {\n    \"img\": \"front/arbitrageimg/350.png\",\n    \"name\": \"CoinEx\"\n  },\n  \"INDODAX\": {\n    \"img\": \"front/arbitrageimg/68.png\",\n    \"name\": \"Indodax\"\n  },\n  \"BITVAVO\": {\n    \"img\": \"front/arbitrageimg/520.png\",\n    \"name\": \"Bitvavo\"\n  },\n  \"COINONEKR\": {\n    \"img\": \"front/arbitrageimg/174.png\",\n    \"name\": \"Coinone\"\n  },\n  \"BTCTURK\": {\n    \"img\": \"front/arbitrageimg/243.png\",\n    \"name\": \"BtcTurk Pro\"\n  },\n  \"COINBITKR\": {\n    \"img\": \"front/arbitrageimg/442.png\",\n    \"name\": \"Coinbit\"\n  },\n  \"ITBIT\": {\n    \"img\": \"front/arbitrageimg/72.png\",\n    \"name\": \"itBit\"\n  },\n  \"CURRENCYDOTCOM\": {\n    \"img\": \"front/arbitrageimg/699.png\",\n    \"name\": \"Currency.com\"\n  },\n  \"PARIBU\": {\n    \"img\": \"front/arbitrageimg/225.png\",\n    \"name\": \"Paribu\"\n  },\n  \"BITBANK\": {\n    \"img\": \"front/arbitrageimg/257.png\",\n    \"name\": \"Bitbank\"\n  },\n  \"BIGONE\": {\n    \"img\": \"front/arbitrageimg/330.png\",\n    \"name\": \"BigONE\"\n  },\n  \"ZAIF\": {\n    \"img\": \"front/arbitrageimg/73.png\",\n    \"name\": \"Zaif\"\n  },\n  \"COINFLEX\": {\n    \"img\": \"front/arbitrageimg/538.png\",\n    \"name\": \"CoinFLEX\"\n  },\n  \"XT\": {\n    \"img\": \"front/arbitrageimg/525.png\",\n    \"name\": \"XT\"\n  },\n  \"BITTREX\": {\n    \"img\": \"front/arbitrageimg/22.png\",\n    \"name\": \"Bittrex\"\n  },\n  \"BITFLYER\": {\n    \"img\": \"front/arbitrageimg/139.png\",\n    \"name\": \"bitFlyer\"\n  },\n  'OKEX': {\n    img: 'front/arbitrageimg/294.png',\n    name: 'Okex'\n  },\n  'POLONIEX': {\n    img: 'front/arbitrageimg/16.png',\n    name: 'Poloniex'\n  },\n  'HUOBIKR': {\n    img: 'front/arbitrageimg/huobi.svg',\n    name: 'Huobi KR'\n  },\n  'BITSTAMP': {\n    img: 'front/arbitrageimg/70.png',\n    name: 'Bitstamp'\n  },\n  'KUCOIN': {\n    img: 'front/arbitrageimg/kucoin.svg',\n    name: 'Kucoin'\n  },\n  'BITFINEX': {\n    img: 'front/arbitrageimg/bitfinex.svg',\n    name: 'Bitfinex'\n  },\n  'SATANGPRO': {\n    img: 'front/arbitrageimg/325.png',\n    name: 'Satang Pro'\n  },\n  'BINANCE': {\n    img: 'front/arbitrageimg/binance.svg',\n    name: 'Binance'\n  },\n  'COINBASE': {\n    img: 'front/arbitrageimg/coinbase.svg',\n    name: 'Coinbase'\n  },\n  'BITKUB': {\n    img: 'front/arbitrageimg/bitkub.svg',\n    name: 'Bitkub'\n  },\n  'GEMINI': {\n    img: 'front/arbitrageimg/151.png',\n    name: 'Gemini'\n  },\n  'BITHUMB': {\n    img: 'front/arbitrageimg/bithumb.svg',\n    name: 'Bithumb'\n  },\n  'UPBIT': {\n    img: 'front/arbitrageimg/351.png',\n    name: 'Upbit'\n  },\n  'HUOBI': {\n    img: 'front/arbitrageimg/huobi.svg',\n    name: 'Huobi'\n  },\n  'KRAKEN': {\n    img: 'front/arbitrageimg/kraken.svg',\n    name: 'Kraken'\n  },\n  'LIQUID': {\n    img: 'front/arbitrageimg/7650.png',\n    name: 'Liquid'\n  },\n  'KORBIT': {\n    img: 'front/arbitrageimg/194.png',\n    name: 'Korbit'\n  },\n  'GATEIO': {\n    \"img\": \"front/arbitrageimg/302.png\",\n    \"name\": \"Gate.io\"\n  },\n  'COINCHECK': {\n    \"img\": \"front/arbitrageimg/106.png\",\n    \"name\": \"Coincheck\"\n  },\n  'CRYPTODOTCOM': {\n    \"img\": \"front/arbitrageimg/1149.png\",\n    \"name\": \"Crypto.com\"\n  },\n  'FTX': {\n    \"img\": \"front/arbitrageimg/524.png\",\n    \"name\": \"FTX\"\n  },\n  // 'ZAIF',\n  'ASCENDEX': {\n    \"img\": \"front/arbitrageimg/453.png\",\n    \"name\": \"AscendEX\"\n  },\n  'COINLIST': {\n    \"img\": \"front/arbitrageimg/1011.png\",\n    \"name\": \"Coinlist Pro\"\n  },\n  'PROBIT': {\n    \"img\": \"front/arbitrageimg/477.png\",\n    \"name\": \"ProBit\"\n  },\n  'PROBITKR': {\n    \"img\": \"front/arbitrageimg/477.png\",\n    \"name\": \"ProBit Korea\"\n  },\n  'BITHUMBGLOBAL': {\n    \"img\": \"front/arbitrageimg/489.png\",\n    \"name\": \"Bithumb Global\"\n  },\n  'COINDCX': {\n    \"img\": \"front/arbitrageimg/949.png\",\n    \"name\": \"CoinDCX\"\n  },\n  // 'LUNO',\n  'EXMO': {\n    \"img\": \"front/arbitrageimg/50.png\",\n    \"name\": \"EXMO\"\n  },\n  // 'ETORO',\n  'OKCOIN': {\n    \"img\": \"front/arbitrageimg/61.png\",\n    \"name\": \"OKCoin\"\n  }\n};\nvar currencySymbols = {\n  'UNITEDSTATESDOLLAR': \"$ \",\n  'KOREANWON': \"\\u20A9 \",\n  'INDIANRUPEE': \"\\u20B9 \",\n  'THAIBAHT': \"\\u0E3F \",\n  'JAPANESEYEN': \"\\xA5 \",\n  'TRY': \"\\u20BA \",\n  'AUD': \"$ \"\n};\nvar currencyDetails = {\n  unitedstatesdollar: {\n    name: 'United States Dollar',\n    img: 'front/arbitrageimg/USD.svg',\n    sname: 'USD'\n  },\n  koreanwon: {\n    name: 'Korean Won',\n    img: 'front/arbitrageimg/KRW.svg',\n    sname: 'KRW'\n  },\n  indianrupee: {\n    name: 'Indian Rupee',\n    img: 'front/arbitrageimg/inr.svg',\n    sname: 'INR'\n  },\n  thaibaht: {\n    name: 'Thai Baht',\n    img: 'front/arbitrageimg/thb.svg',\n    sname: 'THB'\n  },\n  japaneseyen: {\n    name: 'Japanese Yen',\n    img: 'front/arbitrageimg/jp.svg',\n    sname: 'JPY'\n  },\n  \"try\": {\n    name: 'Turkish Lira',\n    img: 'front/arbitrageimg/jp.svg',\n    sname: 'TRY'\n  },\n  aud: {\n    name: 'Australian Dollar',\n    img: 'front/arbitrageimg/AUD.svg',\n    sname: 'AUD'\n  },\n  twd: {\n    name: 'Taiwan dollar',\n    img: 'front/arbitrageimg/twd.svg',\n    sname: 'TWD'\n  }\n};\nvar currencyList = ['USD', 'KRW', 'INR', 'THB', 'JPY', 'RUB', 'TRY', 'EUR', 'IDR', 'AUD', 'TWD', 'BRL'];\nvar quoteCoinsList = ['BTC', 'ETH']; // export const coinsAlertsList = {\n//   'BTC': {\n//     img: 'front/arbitrageimg/1.png',\n//     name: 'Bitcoin',\n//   },\n//   'ETH': {\n//     img: 'front/arbitrageimg/1027.png',\n//     name: 'Ethereum',\n//   },\n//   'BNB': {\n//     img: 'front/arbitrageimg/1839.png',\n//     name: 'Binance Coin',\n//   },\n//   'ADA': {\n//     img: 'front/arbitrageimg/2010.png',\n//     name: 'Cardano',\n//   },\n//   'DOT': {\n//     img: 'front/arbitrageimg/coin_12.svg',\n//     name: 'Polkadot',\n//   },\n//   'XRP': {\n//     img: 'front/arbitrageimg/coin_35.svg',\n//     name: 'Ripple',\n//   },\n//   'BCH': {\n//     img: 'front/arbitrageimg/coin_6.svg',\n//     name: 'Bitcoin cash',\n//   },\n//   'DOGE': {\n//     img: 'front/arbitrageimg/coin_11.png',\n//     name: 'Dogecoin',\n//   },\n//   'UNI': {\n//     img: 'front/arbitrageimg/3602.png',\n//     name: 'Uniswap',\n//   },\n//   'LTC': {\n//     img: 'front/arbitrageimg/coin_22.svg',\n//     name: 'Litecoin',\n//   },\n//   'ABT': {\n//     img: 'front/arbitrageimg/coin_2.png',\n//     name: 'ArcBlock',\n//   },\n//   'BAND': {\n//     img: 'front/arbitrageimg/coin_4.png',\n//     name: 'BAND',\n//   },\n//   'BAT': {\n//     img: 'front/arbitrageimg/coin_5.png',\n//     name: 'BAT',\n//   },\n//   'BSV': {\n//     img: 'front/arbitrageimg/3602.png',\n//     name: 'Bitcoin SV',\n//   },\n//   'CVC': {\n//     img: 'front/arbitrageimg/coin_9.png',\n//     name: 'Civic',\n//   },\n//   'DAI': {\n//     img: 'front/arbitrageimg/coin_10.png',\n//     name: 'Dai',\n//   },\n//   'EVX': {\n//     img: 'front/arbitrageimg/coin_14.png',\n//     name: 'Everex',\n//   },\n//   'GLM': {\n//     img: 'front/arbitrageimg/coin_15.png',\n//     name: 'Golem',\n//   },\n//   'INF': {\n//     img: 'front/arbitrageimg/coin_16.png',\n//     name: 'Infinitus',\n//   },\n//   'IOST': {\n//     img: 'front/arbitrageimg/coin_17.png',\n//     name: 'IOST',\n//   },\n//   'JFIN': {\n//     img: 'front/arbitrageimg/coin_18.png',\n//     name: 'Jfin',\n//   },\n//   'KNC': {\n//     img: 'front/arbitrageimg/coin_19.png',\n//     name: 'Kyber Network Crystals',\n//   },\n//   'KSM': {\n//     img: 'front/arbitrageimg/coin_20.png',\n//     name: 'Kusama',\n//   },\n//   'LINK': {\n//     img: 'front/arbitrageimg/coin_21.svg',\n//     name: 'Chainlink',\n//   },\n//   'MANA': {\n//     img: 'front/arbitrageimg/coin_23.png',\n//     name: 'Mana',\n//   },\n//   'NEAR': {\n//     img: 'front/arbitrageimg/coin_24.png',\n//     name: 'NEAR',\n//   },\n//   'OMG': {\n//     img: 'front/arbitrageimg/coin_25.png',\n//     name: 'OMG',\n//   },\n//   'POW': {\n//     img: 'front/arbitrageimg/coin_26.png',\n//     name: 'POW',\n//   },\n//   'RDN': {\n//     img: 'front/arbitrageimg/coin_27.png',\n//     name: 'RDN',\n//   },\n//   'SCRT': {\n//     img: 'front/arbitrageimg/coin_28.png',\n//     name: 'Secret Network',\n//   },\n//   'SIX': {\n//     img: 'front/arbitrageimg/coin_29.png',\n//     name: 'SIX',\n//   },\n//   'SNT': {\n//     img: 'front/arbitrageimg/coin_30.png',\n//     name: 'SNT',\n//   },\n//   'USDC': {\n//     img: 'front/arbitrageimg/coin_31.svg',\n//     name: 'USDC',\n//   },\n//   'USDT': {\n//     img: 'front/arbitrageimg/coin_32.png',\n//     name: 'USDT',\n//   },\n//   'WAN': {\n//     img: 'front/arbitrageimg/coin_33.png',\n//     name: 'Wanchain',\n//   },\n//   'XLM': {\n//     img: 'front/arbitrageimg/coin_34.svg',\n//     name: 'Stellar',\n//   },\n//   'ZIL': {\n//     img: 'front/arbitrageimg/coin_36.png',\n//     name: 'Zilliqa',\n//   },\n//   'ZRX': {\n//     img: 'front/arbitrageimg/coin_37.png',\n//     name: 'ZRX',\n//   },\n//   'default' : {\n//     img: 'front/arbitrageimg/coin_23.png',\n//     name: 'NOT FOUND',\n//   }\n// };\n\nvar coinsAlertsList = {\n  \"BTC\": {\n    \"img\": \"front/arbitrageimg/1.png\",\n    \"name\": \"Bitcoin\"\n  },\n  \"ETH\": {\n    \"img\": \"front/arbitrageimg/1027.png\",\n    \"name\": \"Ethereum\"\n  },\n  \"BNB\": {\n    \"img\": \"front/arbitrageimg/1839.png\",\n    \"name\": \"Binance Coin\"\n  },\n  \"XRP\": {\n    \"img\": \"front/arbitrageimg/52.png\",\n    \"name\": \"XRP\"\n  },\n  \"USDT\": {\n    \"img\": \"front/arbitrageimg/825.png\",\n    \"name\": \"Tether\"\n  },\n  \"ADA\": {\n    \"img\": \"front/arbitrageimg/2010.png\",\n    \"name\": \"Cardano\"\n  },\n  \"DOT\": {\n    \"img\": \"front/arbitrageimg/6636.png\",\n    \"name\": \"Polkadot\"\n  },\n  \"UNI\": {\n    \"img\": \"front/arbitrageimg/7083.png\",\n    \"name\": \"Uniswap\"\n  },\n  \"LTC\": {\n    \"img\": \"front/arbitrageimg/2.png\",\n    \"name\": \"Litecoin\"\n  },\n  \"LINK\": {\n    \"img\": \"front/arbitrageimg/1975.png\",\n    \"name\": \"Chainlink\"\n  },\n  \"DOGE\": {\n    \"img\": \"front/arbitrageimg/74.png\",\n    \"name\": \"Dogecoin\"\n  },\n  \"BCH\": {\n    \"img\": \"front/arbitrageimg/1831.png\",\n    \"name\": \"Bitcoin Cash\"\n  },\n  \"XLM\": {\n    \"img\": \"front/arbitrageimg/512.png\",\n    \"name\": \"Stellar\"\n  },\n  \"THETA\": {\n    \"img\": \"front/arbitrageimg/2416.png\",\n    \"name\": \"THETA\"\n  },\n  \"VET\": {\n    \"img\": \"front/arbitrageimg/3077.png\",\n    \"name\": \"VeChain\"\n  },\n  \"FIL\": {\n    \"img\": \"front/arbitrageimg/2280.png\",\n    \"name\": \"Filecoin\"\n  },\n  \"USDC\": {\n    \"img\": \"front/arbitrageimg/3408.png\",\n    \"name\": \"USD Coin\"\n  },\n  \"TRX\": {\n    \"img\": \"front/arbitrageimg/1958.png\",\n    \"name\": \"TRON\"\n  },\n  \"WBTC\": {\n    \"img\": \"front/arbitrageimg/3717.png\",\n    \"name\": \"Wrapped Bitcoin\"\n  },\n  \"SOL\": {\n    \"img\": \"front/arbitrageimg/5426.png\",\n    \"name\": \"Solana\"\n  },\n  \"EOS\": {\n    \"img\": \"front/arbitrageimg/1765.png\",\n    \"name\": \"EOS\"\n  },\n  \"KLAY\": {\n    \"img\": \"front/arbitrageimg/4256.png\",\n    \"name\": \"Klaytn\"\n  },\n  \"BSV\": {\n    \"img\": \"front/arbitrageimg/3602.png\",\n    \"name\": \"Bitcoin SV\"\n  },\n  \"LUNA\": {\n    \"img\": \"front/arbitrageimg/4172.png\",\n    \"name\": \"Terra\"\n  },\n  \"MIOTA\": {\n    \"img\": \"front/arbitrageimg/1720.png\",\n    \"name\": \"IOTA\"\n  },\n  \"CRO\": {\n    \"img\": \"front/arbitrageimg/3635.png\",\n    \"name\": \"Crypto.com Coin\"\n  },\n  \"XMR\": {\n    \"img\": \"front/arbitrageimg/monero.png\",\n    \"name\": \"Monero\"\n  },\n  \"ATOM\": {\n    \"img\": \"front/arbitrageimg/3794.png\",\n    \"name\": \"Cosmos\"\n  },\n  \"AAVE\": {\n    \"img\": \"front/arbitrageimg/7278.png\",\n    \"name\": \"Aave\"\n  },\n  \"BUSD\": {\n    \"img\": \"front/arbitrageimg/4687.png\",\n    \"name\": \"Binance USD\"\n  },\n  \"FTT\": {\n    \"img\": \"front/arbitrageimg/4195.png\",\n    \"name\": \"FTX Token\"\n  },\n  \"BTT\": {\n    \"img\": \"front/arbitrageimg/3718.png\",\n    \"name\": \"BitTorrent\"\n  },\n  \"XTZ\": {\n    \"img\": \"front/arbitrageimg/2011.png\",\n    \"name\": \"Tezos\"\n  },\n  \"AVAX\": {\n    \"img\": \"front/arbitrageimg/5805.png\",\n    \"name\": \"Avalanche\"\n  },\n  \"NEO\": {\n    \"img\": \"front/arbitrageimg/1376.png\",\n    \"name\": \"Neo\"\n  },\n  \"ALGO\": {\n    \"img\": \"front/arbitrageimg/4030.png\",\n    \"name\": \"Algorand\"\n  },\n  \"KSM\": {\n    \"img\": \"front/arbitrageimg/5034.png\",\n    \"name\": \"Kusama\"\n  },\n  \"EGLD\": {\n    \"img\": \"front/arbitrageimg/6892.png\",\n    \"name\": \"Elrond\"\n  },\n  \"XEM\": {\n    \"img\": \"front/arbitrageimg/873.png\",\n    \"name\": \"NEM\"\n  },\n  \"HT\": {\n    \"img\": \"front/arbitrageimg/2502.png\",\n    \"name\": \"Huobi Token\"\n  },\n  \"RUNE\": {\n    \"img\": \"front/arbitrageimg/4157.png\",\n    \"name\": \"THORChain\"\n  },\n  \"CAKE\": {\n    \"img\": \"front/arbitrageimg/7186.png\",\n    \"name\": \"PancakeSwap\"\n  },\n  \"BTCB\": {\n    \"img\": \"front/arbitrageimg/4023.png\",\n    \"name\": \"Bitcoin BEP2\"\n  },\n  \"DAI\": {\n    \"img\": \"front/arbitrageimg/4943.png\",\n    \"name\": \"Dai\"\n  },\n  \"HOT\": {\n    \"img\": \"front/arbitrageimg/2682.png\",\n    \"name\": \"Holo\"\n  },\n  \"DASH\": {\n    \"img\": \"front/arbitrageimg/131.png\",\n    \"name\": \"Dash\"\n  },\n  \"CHZ\": {\n    \"img\": \"front/arbitrageimg/4066.png\",\n    \"name\": \"Chiliz\"\n  },\n  \"MKR\": {\n    \"img\": \"front/arbitrageimg/1518.png\",\n    \"name\": \"Maker\"\n  },\n  \"HBAR\": {\n    \"img\": \"front/arbitrageimg/4642.png\",\n    \"name\": \"Hedera Hashgraph\"\n  },\n  \"ZEC\": {\n    \"img\": \"front/arbitrageimg/1437.png\",\n    \"name\": \"Zcash\"\n  },\n  \"STX\": {\n    \"img\": \"front/arbitrageimg/4847.png\",\n    \"name\": \"Stacks\"\n  },\n  \"COMP\": {\n    \"img\": \"front/arbitrageimg/5692.png\",\n    \"name\": \"Compound\"\n  },\n  \"DCR\": {\n    \"img\": \"front/arbitrageimg/1168.png\",\n    \"name\": \"Decred\"\n  },\n  \"ETC\": {\n    \"img\": \"front/arbitrageimg/1321.png\",\n    \"name\": \"Ethereum Classic\"\n  },\n  \"GRT\": {\n    \"img\": \"front/arbitrageimg/6719.png\",\n    \"name\": \"The Graph\"\n  },\n  \"ENJ\": {\n    \"img\": \"front/arbitrageimg/2130.png\",\n    \"name\": \"Enjin Coin\"\n  },\n  \"SNX\": {\n    \"img\": \"front/arbitrageimg/2586.png\",\n    \"name\": \"Synthetix\"\n  },\n  \"ZIL\": {\n    \"img\": \"front/arbitrageimg/2469.png\",\n    \"name\": \"Zilliqa\"\n  },\n  \"NEAR\": {\n    \"img\": \"front/arbitrageimg/6535.png\",\n    \"name\": \"NEAR Protocol\"\n  },\n  \"SUSHI\": {\n    \"img\": \"front/arbitrageimg/6758.png\",\n    \"name\": \"SushiSwap\"\n  },\n  \"BAT\": {\n    \"img\": \"front/arbitrageimg/1697.png\",\n    \"name\": \"Basic Attention Token\"\n  },\n  \"LEO\": {\n    \"img\": \"front/arbitrageimg/3957.png\",\n    \"name\": \"UNUS SED LEO\"\n  },\n  \"MATIC\": {\n    \"img\": \"front/arbitrageimg/3890.png\",\n    \"name\": \"Polygon\"\n  },\n  \"NEXO\": {\n    \"img\": \"front/arbitrageimg/2694.png\",\n    \"name\": \"Nexo\"\n  },\n  \"BTG\": {\n    \"img\": \"front/arbitrageimg/2083.png\",\n    \"name\": \"Bitcoin Gold\"\n  },\n  \"RVN\": {\n    \"img\": \"front/arbitrageimg/2577.png\",\n    \"name\": \"Ravencoin\"\n  },\n  'IOST': {\n    img: 'front/arbitrageimg/coin_17.png',\n    name: 'IOST'\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/globals.js\n");

/***/ }),

/***/ "./resources/js/index.js":
/*!*******************************!*\
  !*** ./resources/js/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _darkmode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./darkmode.js */ \"./resources/js/darkmode.js\");\n/* harmony import */ var _darkmode_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_darkmode_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _displayCurr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./displayCurr.js */ \"./resources/js/displayCurr.js\");\n/* harmony import */ var _alertsManagement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./alertsManagement.js */ \"./resources/js/alertsManagement.js\");\n/* harmony import */ var _makeTable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./makeTable.js */ \"./resources/js/makeTable.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n// import '../styles/index.scss';\n\n\n\n\n // import '../js/offcanvas.js';\n// if (process.env.NODE_ENV === 'development') {\n//   require('../index.html');\n// }\n\n$(function () {\n  $('.bxslider').bxSlider({\n    auto: false,\n    controls: true,\n    pager: false,\n    slideWidth: 280,\n    minSlides: 1,\n    maxSlides: 4,\n    moveSlides: 1,\n    slideMargin: 0,\n    speed: 300,\n    touchEnabled: true\n  });\n  $(\"#hide\").click(function () {\n    $(\".alertbox\").hide();\n  });\n  $(\"#show\").click(function () {\n    $(\".alertbox\").toggle();\n  });\n  $(document).mouseup(function (e) {\n    var container = $(\".alertbox\"); // if the target of the click isn't the container nor a descendant of the container\n\n    if (!container.is(e.target) && container.has(e.target).length === 0) {\n      container.hide();\n    }\n  }); // $(\"#hide_div\").click(function(){\n  //   $(\".alert_create\").hide();\n  // });\n  // $(\"#show_div\").click(function(){\n  //   $(\".alert_create\").show();\n  // });\n\n  $(\"#plus_show_div\").click(function () {\n    $(\".alert_create\").show();\n    $(\".tab-content\").hide();\n  });\n  $(\".hide_div\").click(function () {\n    $(\".alert_create\").hide();\n  });\n  $(\".show_tab\").click(function () {\n    $(\".tab-content\").show();\n  });\n  $('#tablesearchinput').on('keyup change', function () {\n    var searchterm = $('#tablesearchinput').val().replace(/[^\\w\\s]/gi, '');\n\n    if (searchterm.length > 0) {\n      $('.features select').prop('disabled', true);\n      _globals_js__WEBPACK_IMPORTED_MODULE_4__.coinsList.forEach(function (coin) {\n        if (!coin.toLowerCase().includes(searchterm.toLowerCase())) {\n          $('#' + coin.toLowerCase() + '_row').hide();\n        } else {\n          $('#' + coin.toLowerCase() + '_row').show();\n        }\n      });\n    } else {\n      $('.features select').prop('disabled', false);\n      _globals_js__WEBPACK_IMPORTED_MODULE_4__.coinsList.forEach(function (coin) {\n        $('#' + coin.toLowerCase() + '_row').show();\n      });\n    }\n  });\n  $('#exchange input').on('keyup change', function () {\n    var searchterm = $('#exchange input').val().replace(/[^\\w\\s]/gi, '');\n\n    if (searchterm.length > 0) {\n      var items = $('#exchange .dropdown-item').toArray();\n      items.forEach(function (item) {\n        if ($(item).html().includes(searchterm.toLowerCase())) {\n          $(item).show();\n        } else {\n          $(item).hide();\n        }\n      });\n    } else {\n      $('#exchange .dropdown-item').show();\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvaW5kZXguanM/OWE1NyJdLCJuYW1lcyI6WyIkIiwiYnhTbGlkZXIiLCJhdXRvIiwiY29udHJvbHMiLCJwYWdlciIsInNsaWRlV2lkdGgiLCJtaW5TbGlkZXMiLCJtYXhTbGlkZXMiLCJtb3ZlU2xpZGVzIiwic2xpZGVNYXJnaW4iLCJzcGVlZCIsInRvdWNoRW5hYmxlZCIsImNsaWNrIiwiaGlkZSIsInRvZ2dsZSIsImRvY3VtZW50IiwibW91c2V1cCIsImUiLCJjb250YWluZXIiLCJpcyIsInRhcmdldCIsImhhcyIsImxlbmd0aCIsInNob3ciLCJvbiIsInNlYXJjaHRlcm0iLCJ2YWwiLCJyZXBsYWNlIiwicHJvcCIsImNvaW5zTGlzdCIsImNvaW4iLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiaXRlbXMiLCJ0b0FycmF5IiwiZm9yRWFjaCIsIml0ZW0iLCJodG1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUVBO0FBRUE7QUFDQTtBQUNBOztBQUVBQSxDQUFDLENBQUMsWUFBWTtBQUVaQSxHQUFDLENBQUMsV0FBRCxDQUFELENBQWVDLFFBQWYsQ0FBd0I7QUFDdEJDLFFBQUksRUFBRSxLQURnQjtBQUV0QkMsWUFBUSxFQUFFLElBRlk7QUFHdEJDLFNBQUssRUFBRSxLQUhlO0FBSXRCQyxjQUFVLEVBQUUsR0FKVTtBQUt0QkMsYUFBUyxFQUFFLENBTFc7QUFNdEJDLGFBQVMsRUFBRSxDQU5XO0FBT3RCQyxjQUFVLEVBQUUsQ0FQVTtBQVF0QkMsZUFBVyxFQUFFLENBUlM7QUFTdEJDLFNBQUssRUFBRSxHQVRlO0FBVXRCQyxnQkFBWSxFQUFFO0FBVlEsR0FBeEI7QUFhQVgsR0FBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXWSxLQUFYLENBQWlCLFlBQVk7QUFDM0JaLEtBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZWEsSUFBZjtBQUNELEdBRkQ7QUFHQWIsR0FBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXWSxLQUFYLENBQWlCLFlBQVk7QUFDM0JaLEtBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZWMsTUFBZjtBQUNELEdBRkQ7QUFJQWQsR0FBQyxDQUFDZSxRQUFELENBQUQsQ0FBWUMsT0FBWixDQUFvQixVQUFVQyxDQUFWLEVBQWE7QUFDL0IsUUFBSUMsU0FBUyxHQUFHbEIsQ0FBQyxDQUFDLFdBQUQsQ0FBakIsQ0FEK0IsQ0FHL0I7O0FBQ0EsUUFBSSxDQUFDa0IsU0FBUyxDQUFDQyxFQUFWLENBQWFGLENBQUMsQ0FBQ0csTUFBZixDQUFELElBQTJCRixTQUFTLENBQUNHLEdBQVYsQ0FBY0osQ0FBQyxDQUFDRyxNQUFoQixFQUF3QkUsTUFBeEIsS0FBbUMsQ0FBbEUsRUFBcUU7QUFDbkVKLGVBQVMsQ0FBQ0wsSUFBVjtBQUNEO0FBQ0YsR0FQRCxFQXRCWSxDQStCWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FiLEdBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CWSxLQUFwQixDQUEwQixZQUFZO0FBQ3BDWixLQUFDLENBQUMsZUFBRCxDQUFELENBQW1CdUIsSUFBbkI7QUFDQXZCLEtBQUMsQ0FBQyxjQUFELENBQUQsQ0FBa0JhLElBQWxCO0FBQ0QsR0FIRDtBQUlBYixHQUFDLENBQUMsV0FBRCxDQUFELENBQWVZLEtBQWYsQ0FBcUIsWUFBWTtBQUMvQlosS0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQmEsSUFBbkI7QUFDRCxHQUZEO0FBR0FiLEdBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZVksS0FBZixDQUFxQixZQUFZO0FBQy9CWixLQUFDLENBQUMsY0FBRCxDQUFELENBQWtCdUIsSUFBbEI7QUFDRCxHQUZEO0FBSUF2QixHQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QndCLEVBQXZCLENBQTBCLGNBQTFCLEVBQTBDLFlBQU07QUFDOUMsUUFBTUMsVUFBVSxHQUFHekIsQ0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUIwQixHQUF2QixHQUE2QkMsT0FBN0IsQ0FBcUMsV0FBckMsRUFBa0QsRUFBbEQsQ0FBbkI7O0FBQ0EsUUFBSUYsVUFBVSxDQUFDSCxNQUFYLEdBQW9CLENBQXhCLEVBQTJCO0FBQ3pCdEIsT0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0I0QixJQUF0QixDQUEyQixVQUEzQixFQUF1QyxJQUF2QztBQUNBQyxnRUFBQSxDQUFrQixVQUFDQyxJQUFELEVBQVU7QUFDMUIsWUFBSSxDQUFDQSxJQUFJLENBQUNDLFdBQUwsR0FBbUJDLFFBQW5CLENBQTRCUCxVQUFVLENBQUNNLFdBQVgsRUFBNUIsQ0FBTCxFQUE0RDtBQUMxRC9CLFdBQUMsQ0FBQyxNQUFNOEIsSUFBSSxDQUFDQyxXQUFMLEVBQU4sR0FBMkIsTUFBNUIsQ0FBRCxDQUFxQ2xCLElBQXJDO0FBQ0QsU0FGRCxNQUVPO0FBQ0xiLFdBQUMsQ0FBQyxNQUFNOEIsSUFBSSxDQUFDQyxXQUFMLEVBQU4sR0FBMkIsTUFBNUIsQ0FBRCxDQUFxQ1IsSUFBckM7QUFDRDtBQUNGLE9BTkQ7QUFPRCxLQVRELE1BU087QUFDTHZCLE9BQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCNEIsSUFBdEIsQ0FBMkIsVUFBM0IsRUFBdUMsS0FBdkM7QUFDQUMsZ0VBQUEsQ0FBa0IsVUFBQ0MsSUFBRCxFQUFVO0FBQzFCOUIsU0FBQyxDQUFDLE1BQU04QixJQUFJLENBQUNDLFdBQUwsRUFBTixHQUEyQixNQUE1QixDQUFELENBQXFDUixJQUFyQztBQUNELE9BRkQ7QUFHRDtBQUNGLEdBakJEO0FBbUJBdkIsR0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUJ3QixFQUFyQixDQUF3QixjQUF4QixFQUF3QyxZQUFNO0FBQzVDLFFBQU1DLFVBQVUsR0FBR3pCLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCMEIsR0FBckIsR0FBMkJDLE9BQTNCLENBQW1DLFdBQW5DLEVBQWdELEVBQWhELENBQW5COztBQUNBLFFBQUlGLFVBQVUsQ0FBQ0gsTUFBWCxHQUFvQixDQUF4QixFQUEyQjtBQUN6QixVQUFNVyxLQUFLLEdBQUdqQyxDQUFDLENBQUMsMEJBQUQsQ0FBRCxDQUE4QmtDLE9BQTlCLEVBQWQ7QUFDQUQsV0FBSyxDQUFDRSxPQUFOLENBQWMsVUFBQ0MsSUFBRCxFQUFVO0FBQ3RCLFlBQUlwQyxDQUFDLENBQUNvQyxJQUFELENBQUQsQ0FBUUMsSUFBUixHQUFlTCxRQUFmLENBQXdCUCxVQUFVLENBQUNNLFdBQVgsRUFBeEIsQ0FBSixFQUF1RDtBQUNyRC9CLFdBQUMsQ0FBQ29DLElBQUQsQ0FBRCxDQUFRYixJQUFSO0FBQ0QsU0FGRCxNQUVPO0FBQ0x2QixXQUFDLENBQUNvQyxJQUFELENBQUQsQ0FBUXZCLElBQVI7QUFDRDtBQUNGLE9BTkQ7QUFPRCxLQVRELE1BU087QUFDTGIsT0FBQyxDQUFDLDBCQUFELENBQUQsQ0FBOEJ1QixJQUE5QjtBQUNEO0FBQ0YsR0FkRDtBQWdCRCxDQW5GQSxDQUFEIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICcuLi9zdHlsZXMvaW5kZXguc2Nzcyc7XHJcbmltcG9ydCAnLi9kYXJrbW9kZS5qcyc7XHJcbmltcG9ydCAnLi9kaXNwbGF5Q3Vyci5qcyc7XHJcbmltcG9ydCAnLi9hbGVydHNNYW5hZ2VtZW50LmpzJztcclxuaW1wb3J0ICcuL21ha2VUYWJsZS5qcyc7XHJcbmltcG9ydCB7IGNvaW5zTGlzdCB9IGZyb20gJy4vZ2xvYmFscy5qcyc7XHJcbi8vIGltcG9ydCAnLi4vanMvb2ZmY2FudmFzLmpzJztcclxuXHJcbi8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4vLyAgIHJlcXVpcmUoJy4uL2luZGV4Lmh0bWwnKTtcclxuLy8gfVxyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICQoJy5ieHNsaWRlcicpLmJ4U2xpZGVyKHtcclxuICAgIGF1dG86IGZhbHNlLFxyXG4gICAgY29udHJvbHM6IHRydWUsXHJcbiAgICBwYWdlcjogZmFsc2UsXHJcbiAgICBzbGlkZVdpZHRoOiAyODAsXHJcbiAgICBtaW5TbGlkZXM6IDEsXHJcbiAgICBtYXhTbGlkZXM6IDQsXHJcbiAgICBtb3ZlU2xpZGVzOiAxLFxyXG4gICAgc2xpZGVNYXJnaW46IDAsXHJcbiAgICBzcGVlZDogMzAwLFxyXG4gICAgdG91Y2hFbmFibGVkOiB0cnVlXHJcbiAgfSk7XHJcblxyXG4gICQoXCIjaGlkZVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLmFsZXJ0Ym94XCIpLmhpZGUoKTtcclxuICB9KTtcclxuICAkKFwiI3Nob3dcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIi5hbGVydGJveFwiKS50b2dnbGUoKTtcclxuICB9KTtcclxuXHJcbiAgJChkb2N1bWVudCkubW91c2V1cChmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIGNvbnRhaW5lciA9ICQoXCIuYWxlcnRib3hcIik7XHJcblxyXG4gICAgLy8gaWYgdGhlIHRhcmdldCBvZiB0aGUgY2xpY2sgaXNuJ3QgdGhlIGNvbnRhaW5lciBub3IgYSBkZXNjZW5kYW50IG9mIHRoZSBjb250YWluZXJcclxuICAgIGlmICghY29udGFpbmVyLmlzKGUudGFyZ2V0KSAmJiBjb250YWluZXIuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29udGFpbmVyLmhpZGUoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gJChcIiNoaWRlX2RpdlwiKS5jbGljayhmdW5jdGlvbigpe1xyXG4gIC8vICAgJChcIi5hbGVydF9jcmVhdGVcIikuaGlkZSgpO1xyXG4gIC8vIH0pO1xyXG4gIC8vICQoXCIjc2hvd19kaXZcIikuY2xpY2soZnVuY3Rpb24oKXtcclxuICAvLyAgICQoXCIuYWxlcnRfY3JlYXRlXCIpLnNob3coKTtcclxuICAvLyB9KTtcclxuICAkKFwiI3BsdXNfc2hvd19kaXZcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIi5hbGVydF9jcmVhdGVcIikuc2hvdygpO1xyXG4gICAgJChcIi50YWItY29udGVudFwiKS5oaWRlKCk7XHJcbiAgfSk7XHJcbiAgJChcIi5oaWRlX2RpdlwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLmFsZXJ0X2NyZWF0ZVwiKS5oaWRlKCk7XHJcbiAgfSk7XHJcbiAgJChcIi5zaG93X3RhYlwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLnRhYi1jb250ZW50XCIpLnNob3coKTtcclxuICB9KTtcclxuXHJcbiAgJCgnI3RhYmxlc2VhcmNoaW5wdXQnKS5vbigna2V5dXAgY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgc2VhcmNodGVybSA9ICQoJyN0YWJsZXNlYXJjaGlucHV0JykudmFsKCkucmVwbGFjZSgvW15cXHdcXHNdL2dpLCAnJyk7XHJcbiAgICBpZiAoc2VhcmNodGVybS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICQoJy5mZWF0dXJlcyBzZWxlY3QnKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICBjb2luc0xpc3QuZm9yRWFjaCgoY29pbikgPT4ge1xyXG4gICAgICAgIGlmICghY29pbi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaHRlcm0udG9Mb3dlckNhc2UoKSkpIHtcclxuICAgICAgICAgICQoJyMnICsgY29pbi50b0xvd2VyQ2FzZSgpICsgJ19yb3cnKS5oaWRlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoJyMnICsgY29pbi50b0xvd2VyQ2FzZSgpICsgJ19yb3cnKS5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICQoJy5mZWF0dXJlcyBzZWxlY3QnKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgY29pbnNMaXN0LmZvckVhY2goKGNvaW4pID0+IHtcclxuICAgICAgICAkKCcjJyArIGNvaW4udG9Mb3dlckNhc2UoKSArICdfcm93Jykuc2hvdygpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJCgnI2V4Y2hhbmdlIGlucHV0Jykub24oJ2tleXVwIGNoYW5nZScsICgpID0+IHtcclxuICAgIGNvbnN0IHNlYXJjaHRlcm0gPSAkKCcjZXhjaGFuZ2UgaW5wdXQnKS52YWwoKS5yZXBsYWNlKC9bXlxcd1xcc10vZ2ksICcnKTtcclxuICAgIGlmIChzZWFyY2h0ZXJtLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgaXRlbXMgPSAkKCcjZXhjaGFuZ2UgLmRyb3Bkb3duLWl0ZW0nKS50b0FycmF5KCk7XHJcbiAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICBpZiAoJChpdGVtKS5odG1sKCkuaW5jbHVkZXMoc2VhcmNodGVybS50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgJChpdGVtKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoaXRlbSkuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKCcjZXhjaGFuZ2UgLmRyb3Bkb3duLWl0ZW0nKS5zaG93KCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/index.js\n");

/***/ }),

/***/ "./resources/js/makeTable.js":
/*!***********************************!*\
  !*** ./resources/js/makeTable.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globals.js */ \"./resources/js/globals.js\");\n\n$(function () {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbWFrZVRhYmxlLmpzPzVhOGYiXSwibmFtZXMiOlsiJCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUVBQSxDQUFDLENBQUMsWUFBVyxDQUVaLENBRkEsQ0FBRCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9tYWtlVGFibGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2luc0xpc3QsIGV4Y2hhbmdlTGlzdCwgY3VycmVuY3lTeW1ib2xzLCBjb2luc0FsZXJ0c0xpc3QsIGN1cnJlbmN5TGlzdCB9IGZyb20gJy4vZ2xvYmFscy5qcyc7XHJcblxyXG4kKGZ1bmN0aW9uKCkge1xyXG5cclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/makeTable.js\n");

/***/ }),

/***/ "./node_modules/redux/es/redux.js":
/*!****************************************!*\
  !*** ./node_modules/redux/es/redux.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__DO_NOT_USE__ActionTypes\": () => (/* binding */ ActionTypes),\n/* harmony export */   \"applyMiddleware\": () => (/* binding */ applyMiddleware),\n/* harmony export */   \"bindActionCreators\": () => (/* binding */ bindActionCreators),\n/* harmony export */   \"combineReducers\": () => (/* binding */ combineReducers),\n/* harmony export */   \"compose\": () => (/* binding */ compose),\n/* harmony export */   \"createStore\": () => (/* binding */ createStore)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n\n\n/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux error #\" + code + \"; visit https://redux.js.org/Errors?code=\" + code + \" for the full message or \" + 'use the non-minified dev environment for full errors. ';\n}\n\n// Inlined version of the `symbol-observable` polyfill\nvar $$observable = (function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n})();\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\nfunction kindOf(val) {\n  var typeOfVal = typeof val;\n\n  if (true) {\n    // Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\n    function miniKindOf(val) {\n      if (val === void 0) return 'undefined';\n      if (val === null) return 'null';\n      var type = typeof val;\n\n      switch (type) {\n        case 'boolean':\n        case 'string':\n        case 'number':\n        case 'symbol':\n        case 'function':\n          {\n            return type;\n          }\n      }\n\n      if (Array.isArray(val)) return 'array';\n      if (isDate(val)) return 'date';\n      if (isError(val)) return 'error';\n      var constructorName = ctorName(val);\n\n      switch (constructorName) {\n        case 'Symbol':\n        case 'Promise':\n        case 'WeakMap':\n        case 'WeakSet':\n        case 'Map':\n        case 'Set':\n          return constructorName;\n      } // other\n\n\n      return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n    }\n\n    function ctorName(val) {\n      return typeof val.constructor === 'function' ? val.constructor.name : null;\n    }\n\n    function isError(val) {\n      return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n    }\n\n    function isDate(val) {\n      if (val instanceof Date) return true;\n      return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n    }\n\n    typeOfVal = miniKindOf(val);\n  }\n\n  return typeOfVal;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error( false ? 0 : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error( false ? 0 : \"Expected the enhancer to be a function. Instead, received: '\" + kindOf(enhancer) + \"'\");\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error( false ? 0 : \"Expected the root reducer to be a function. Instead, received: '\" + kindOf(reducer) + \"'\");\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error( false ? 0 : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error( false ? 0 : \"Expected the listener to be a function. Instead, received: '\" + kindOf(listener) + \"'\");\n    }\n\n    if (isDispatching) {\n      throw new Error( false ? 0 : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error( false ? 0 : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error( false ? 0 : \"Actions must be plain objects. Instead, the actual type was: '\" + kindOf(action) + \"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\");\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error( false ? 0 : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n\n    if (isDispatching) {\n      throw new Error( false ? 0 : 'Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error( false ? 0 : \"Expected the nextReducer to be a function. Instead, received: '\" + kindOf(nextReducer));\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error( false ? 0 : \"Expected the observer to be an object. Instead, received: '\" + kindOf(observer) + \"'\");\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + kindOf(inputState) + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error( false ? 0 : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error( false ? 0 : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle '\" + ActionTypes.INIT + \"' or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (true) {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (true) {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (true) {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var actionType = action && action.type;\n        throw new Error( false ? 0 : \"When called with an action of type \" + (actionType ? \"\\\"\" + String(actionType) + \"\\\"\" : '(unknown type)') + \", the slice reducer for key \\\"\" + _key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\");\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error( false ? 0 : \"bindActionCreators expected an object or a function, but instead received: '\" + kindOf(actionCreators) + \"'. \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error( false ? 0 : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.default)((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__.default)({}, store), {}, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif ( true && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/redux/es/redux.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/index.js");
/******/ 	
/******/ })()
;